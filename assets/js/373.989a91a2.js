(window.webpackJsonp=window.webpackJsonp||[]).push([[373],{806:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"factory-method-工厂方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#factory-method-工厂方法"}},[t._v("#")]),t._v(" Factory Method（工厂方法）")]),t._v(" "),a("p",[t._v("Factory Method（工厂方法）属于创建型模式，利用工厂方法创建对象实例而不是直接用 New 关键字实例化。")]),t._v(" "),a("p",[t._v("理解如何写出工厂方法很简单，但理解为什么要用工厂方法就需要动动脑子了。工厂方法看似简单的将 New 替换为一个函数，其实是体现了面向接口编程的思路，它创建的对象其实是一个符合通用接口的通用对象，这个对象的具体实现可以随意替换，以达到通用性目的。")]),t._v(" "),a("p",[a("strong",[t._v("意图：定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。")])]),t._v(" "),a("h2",{attrs:{id:"举例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例子"}},[t._v("#")]),t._v(" 举例子")]),t._v(" "),a("p",[t._v("如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用起来，结合例子可以加深你的理解，下面我准备了三个例子，让你体会什么场景下会用到这种设计模式。")]),t._v(" "),a("h3",{attrs:{id:"换灯泡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#换灯泡"}},[t._v("#")]),t._v(" 换灯泡")]),t._v(" "),a("p",[t._v("我自己在家换过灯泡，以前我家里灯坏掉的时候，我看着这个奇形怪状的灯管，心里想，这种灯泡和这个灯座应该是一体的，市场上估计很难买到适配我这个灯座的灯泡了。结果等我把灯泡拧下来，跑到门口的五金店去换的时候，店员随便给了我一个灯泡，我回去随便拧了一下居然就能用了。")]),t._v(" "),a("p",[t._v("我买这个灯泡的过程就用到了工厂模式，而正是得益于这种模式，让我可以方便在家门口就买到可以用的灯泡。")]),t._v(" "),a("h3",{attrs:{id:"卡牌对战游戏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卡牌对战游戏"}},[t._v("#")]),t._v(" 卡牌对战游戏")]),t._v(" "),a("p",[t._v("卡牌对战中，卡牌有一些基本属性，比如攻防、生命值，也符合一些通用约定，比如一回合出击一起等等，那么对于战斗系统来说，应该怎样实例化卡牌呢？如何批量操作卡牌，而不是通用功能也要拿到每个卡牌的实例才能调用？另外每个卡牌有特殊能力，这些特殊能力又应该如何拓展呢？")]),t._v(" "),a("h3",{attrs:{id:"实现任意图形拖拽系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现任意图形拖拽系统"}},[t._v("#")]),t._v(" 实现任意图形拖拽系统")]),t._v(" "),a("p",[t._v("一个可以被交互操作的图形，它可以用鼠标进行拉伸、旋转或者移动，不同图形实现这些操作可能并不相同，要存储的数据也不一样，这些数据应该独立于图形存储，我们的系统如果要对接任意多的图形，具备强大拓展能力，对象关系应该如何设计呢？")]),t._v(" "),a("h2",{attrs:{id:"意图解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#意图解释"}},[t._v("#")]),t._v(" 意图解释")]),t._v(" "),a("p",[t._v("在使用工厂方法之前，我们就要创建一个 "),a("strong",[t._v("用于创建对象的接口")]),t._v("，这个接口具备通用性，"),a("strong",[t._v("所以我们可以忽略不同的实现来做一些通用的事情")]),t._v("。")]),t._v(" "),a("p",[t._v("换灯泡的例子来说，我去门口五金店买灯泡，而不是拿到灯泡材料自己 New 一个出来，就是因为五金店这个 “工厂” 提供给我的灯泡符合国家接口标准，而我家里的灯座也符合这个标准，所以灯座不需要知道对接的灯泡是具体哪个实例，什么颜色，什么形状，这些都无所谓，只要灯泡符合国家标准接口，就可以对接上。")]),t._v(" "),a("p",[t._v("对卡牌对战的系统来说，"),a("strong",[t._v("所有卡牌都应该实现同一种接口")]),t._v("，所以卡牌对战系统拿到的卡牌应该就是简单的 Card 类型，这种类型具备基本的卡片操作交互能力，系统就调用这些能力完成基本流程就好了，如果系统直接实例化具体的卡片，那不同的卡片类型会导致系统难以维护，卡片间操作也无法抽象化。")]),t._v(" "),a("p",[t._v("正是这种模式，使得我们可以在卡牌的具体实现上做一些特殊功能，比如修改卡片攻击时效果，修改卡牌销毁时效果。")]),t._v(" "),a("p",[t._v("对图形拖拽系统来说，用到了 “连接平行的类层次” 这个特性，所谓连接平行的类层次，就是指一个图形，与其对应的操作类是一个平行抽象类，而一个具体的图形与具体的操作类则是另一个平行关系，系统只要关注最抽象的 “通用图形类” 与 “通用操作类” 即可，操作时，底层可能是某个具体的 “圆类” 与 “圆操作类” 结合使用，具体的类有不同的实现，但都符合同一种接口，因此操作系统才可以把它们一视同仁，统一操作。")]),t._v(" "),a("p",[a("strong",[t._v("意图：定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。")])]),t._v(" "),a("p",[t._v("所以接口是非常重要的，工厂方法第一句话就是 “定义一个用于创建对象的接口”，这个接口就是 "),a("code",[t._v("Creator")]),t._v("，让子类，也就是具体的创建类（"),a("code",[t._v("ConcreteCreator")]),t._v("）决定要实例化哪个类（"),a("code",[t._v("ConcreteProduct")]),t._v("）。")]),t._v(" "),a("p",[t._v("所谓使一个类的实例化延迟到其子类，是因为抽象类不知道要实例化哪个具体类，所以实例化动作只能由具体的子类去做，这样绕一圈的好处是，我们可以将任意多对象看作是同一类事物，做统一的处理，比如 "),a("strong",[t._v("无论何种灯泡实例都满足通用的灯座接口")]),t._v("，"),a("strong",[t._v("所有工厂实例化的卡牌都具备玩一局卡牌游戏的基本功能")]),t._v("，"),a("strong",[t._v("任何图形与交互类都满足特定功能关系")]),t._v("，这种思想让生活和设计得到了大幅简化。")]),t._v(" "),a("h2",{attrs:{id:"结构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构图"}},[t._v("#")]),t._v(" 结构图")]),t._v(" "),a("img",{attrs:{width:"800",src:"https://img.alicdn.com/tfs/TB1VjyZmsVl614jSZKPXXaGjpXa-1434-476.png"}}),t._v(" "),a("p",[a("code",[t._v("Creator")]),t._v(" 就是工厂方法，"),a("code",[t._v("ConcreteCreator")]),t._v(" 是实现了 "),a("code",[t._v("Creator")]),t._v(" 的具体工厂方法，每一个具体工厂方法生产一个具体的产品 "),a("code",[t._v("ConcreteProduct")]),t._v("，每个具体的产品都实现通用产品的特性 "),a("code",[t._v("Product")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"代码例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码例子"}},[t._v("#")]),t._v(" 代码例子")]),t._v(" "),a("p",[t._v("下面例子使用 typescript 编写。")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 产品接口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Product")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("save")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 工厂接口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Creator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("createProduct")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 具体产品")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcreteProduct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Product")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("save")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 具体工厂")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcreteCreator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Creator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("createProduct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcreteProduct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("创建一个 "),a("code",[t._v("Product")]),t._v(" 的子类 "),a("code",[t._v("ConcreteCreator")]),t._v("，并返回一个实现了 "),a("code",[t._v("Product")]),t._v(" 的具体实例 "),a("code",[t._v("ConcreteProduct")]),t._v("，这样我们就可以方便使用这个工厂了。")]),t._v(" "),a("p",[t._v("工厂方法并不是直接调用 "),a("code",[t._v("new ConcreteCreator().createProduct")]),t._v(" 那么简单，这样体现不出任何抽象性，真正的场景是，在一个创建产品的流程中，我们只知道拿到的工厂是 "),a("code",[t._v("Creator")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyCreator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Creator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" product "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" anyCreator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createProduct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在外面调用 "),a("code",[t._v("main")]),t._v(" 函数时，实际传进去的是一个具体工厂，比如 "),a("code",[t._v("myCreator")]),t._v("，但关键是 "),a("code",[t._v("main")]),t._v(" 函数不用关心到底是哪一个具体工厂，只要知道是个工厂就行了，具体对象创建过程交给了其子类。")]),t._v(" "),a("p",[a("strong",[t._v("你也许也发现了，这就是抽象工厂中其中的一步，所以抽象工厂使用了工厂方法。")])]),t._v(" "),a("h2",{attrs:{id:"弊端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弊端"}},[t._v("#")]),t._v(" 弊端")]),t._v(" "),a("p",[t._v("工厂方法中，每创建一种具体的子类，就要写一个对应的 "),a("code",[t._v("ConcreteCreate")]),t._v("，这相对比较笨重，但有意思的是，如果将创建多个对象放到一个 "),a("code",[t._v("ConcreteCreate")]),t._v(" 中，就变成了 "),a("strong",[t._v("简单工厂模式")]),t._v("，新增产品要修改已有类不符合开闭模式，反而推荐写成本文说的这种模式。")]),t._v(" "),a("p",[t._v("彼之毒药吾之蜜糖，要知道没有一种设计模式解决所有问题，没有一种设计模式没有弊端，"),a("strong",[t._v("而这个弊端不代表这个设计模式不好，一个弊端的出现可能是为了解决另一个痛点。")]),t._v(" 要接受不完美的存在，这么多种设计模式就是对应了不同的业务场景，"),a("strong",[t._v("为合适的场景选择一种能将优势发扬光大，以至于能掩盖弊端，就算进行了合理的架构设计")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("工厂方法并不是简单把 New 的过程换成了函数，而是抽象出一套面向接口的设计模式：")]),t._v(" "),a("img",{attrs:{width:"800",src:"https://img.alicdn.com/tfs/TB1WKH.Zoz1gK0jSZLeXXb9kVXa-1480-786.png"}}),t._v(" "),a("p",[t._v("你看，我要做灯泡，可以直接做具体的灯泡，也可以定一个灯泡接口，通过灯泡工厂拿到具体灯泡，灯泡工厂对待所有灯泡的只做流程都是一样的，不管是中世纪风灯泡，还是复古灯泡，还是普通白织灯，都是一模一样的制作流程，具体怎么做由具体的子类去实现，这样我们可以统一管理 “灯泡” 这一个通用概念，而忽略不同灯泡之间不太重要的差别，程序的可维护性得到了大幅提升。")]),t._v(" "),a("blockquote",[a("p",[t._v("讨论地址是："),a("a",{attrs:{href:"https://github.com/dt-fe/weekly/issues/274",target:"_blank",rel:"noopener noreferrer"}},[t._v("精读《设计模式 - Factory Method 工厂方法》· Issue #274 · dt-fe/weekly"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("如果你想参与讨论，请 "),a("a",{attrs:{href:"https://github.com/dt-fe/weekly",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击这里"),a("OutboundLink")],1),t._v("，每周都有新的主题，周末或周一发布。前端精读 - 帮你筛选靠谱的内容。")])]),t._v(" "),a("blockquote",[a("p",[t._v("关注 "),a("strong",[t._v("前端精读微信公众号")])])]),t._v(" "),a("img",{attrs:{width:"200",src:"https://img.alicdn.com/tfs/TB165W0MCzqK1RjSZFLXXcn2XXa-258-258.jpg"}}),t._v(" "),a("blockquote",[a("p",[t._v("版权声明：自由转载-非商用-非衍生-保持署名（"),a("a",{attrs:{href:"https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh",target:"_blank",rel:"noopener noreferrer"}},[t._v("创意共享 3.0 许可证"),a("OutboundLink")],1),t._v("）")])])])}),[],!1,null,null,null);a.default=r.exports}}]);