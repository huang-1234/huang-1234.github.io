(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{539:function(t,v,T){"use strict";T.r(v);var a=T(2),_=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"http-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP 2")]),t._v(" "),v("p",[t._v("开始前我们先了解一下 HTTP 1.1 有什么问题。")]),t._v(" "),v("p",[t._v("HTTP/1.1 为网络效率做了大量的优化，最核心的有如下三种方式：")]),t._v(" "),v("ul",[v("li",[t._v("增加了持久连接；")]),t._v(" "),v("li",[t._v("浏览器为每个域名最多同时维护 6 个 TCP 持久连接；")]),t._v(" "),v("li",[t._v("使用 CDN 的实现域名分片机制。")])]),t._v(" "),v("blockquote",[v("p",[t._v("CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。")])]),t._v(" "),v("h2",{attrs:{id:"http-1-1主要问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1主要问题"}},[t._v("#")]),t._v(" HTTP 1.1主要问题")]),t._v(" "),v("p",[t._v("HTTP/1.1对带宽的利用率却并不理想。")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"title"},[t._v("带宽")]),v("p",[t._v("每秒最大能发送或者接收的字节数。")])]),v("p",[t._v("之所以说 HTTP/1.1 对带宽的利用率不理想，是因为 HTTP/1.1 很难将带宽用满。比如我们常说的 100M 带宽，实际的下载速度能达到 12.5M/S，而采用 HTTP/1.1 时，也许在加载页面资源时最大只能使用到 2.5M/S，很难将 12.5M 全部用满。")]),t._v(" "),v("p",[t._v("为什么会造成这种情况呢？")]),t._v(" "),v("h3",{attrs:{id:"tcp-慢启动"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-慢启动"}},[t._v("#")]),t._v(" TCP 慢启动")]),t._v(" "),v("p",[t._v("一旦一个 TCP 连接建立之后，就进入了发送数据状态，刚开始 TCP 协议会采用一个非常慢的速度去发送数据，然后慢慢加快发送数据的速度，直到发送数据的速度达到一个理想状态，这个过程称为慢启动。")]),t._v(" "),v("p",[t._v("慢启动是 TCP 为了减少网络拥塞的一种策略。这点是无法改变的。")]),t._v(" "),v("p",[t._v("页面中常用的一些关键资源文件本来就不大，如 HTML 文件、CSS 文件和 JavaScript 文件，通常这些文件在 TCP 连接建立好之后就要发起请求的，但这个过程是慢启动，所以耗费的时间比正常的时间要多很多，这样就推迟了首次渲染页面的时长了。")]),t._v(" "),v("h3",{attrs:{id:"竞争带宽"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#竞争带宽"}},[t._v("#")]),t._v(" 竞争带宽")]),t._v(" "),v("p",[t._v("由于同时开启了多条 TCP 连接，那么这些连接会竞争固定的带宽。")]),t._v(" "),v("p",[t._v("这样就会出现一个问题，因为有的 TCP 连接下载的是一些关键资源，如 CSS 文件、JavaScript 文件等，而有的 TCP 连接下载的是图片、视频等普通的资源文件，但是多条 TCP 连接之间又不能协商让哪些关键资源优先下载，这样就有可能影响那些关键资源的下载速度了。")]),t._v(" "),v("h3",{attrs:{id:"队头阻塞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#队头阻塞"}},[t._v("#")]),t._v(" 队头阻塞")]),t._v(" "),v("p",[t._v("HTTP/1.1 中使用持久连接时，虽然能公用一个 TCP 管道，但是在一个管道中同一时刻只能处理一个请求，在当前的请求没有结束之前，其他的请求只能处于阻塞状态。")]),t._v(" "),v("h2",{attrs:{id:"http-2的多路复用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-2的多路复用"}},[t._v("#")]),t._v(" HTTP 2的多路复用")]),t._v(" "),v("p",[t._v("HTTP/2 的思路就是一个域名只使用一个 TCP 长连接来传输数据，这样整个页面资源的下载过程只需要一次慢启动，同时也避免了多个 TCP 连接竞争带宽所带来的问题。")]),t._v(" "),v("p",[t._v("对于队头阻塞问题，HTTP 2 实现了资源的并行请求，任何时候都可以将请求发送给服务器，不需要等待其他请求的完成，然后服务器也可以随时返回处理好的请求资源给浏览器。")]),t._v(" "),v("p",[t._v("于是就实现了多路复用机制。")]),t._v(" "),v("p",[t._v("服务器端接收到这些请求后，会根据自己的喜好来决定优先返回哪些内容，比如服务器可能早就缓存好了 index.html 和 bar.js 的响应头信息，那么当接收到请求的时候就可以立即把 index.html 和 bar.js 的响应头信息返回给浏览器，然后再将 index.html 和 bar.js 的响应体数据返回给浏览器。之所以可以随意发送，是因为每份数据都有对应的 ID，浏览器接收到之后，会筛选出相同 ID 的内容，将其拼接为完整的 HTTP 响应数据。")]),t._v(" "),v("p",[t._v("HTTP 2 使用了多路复用技术，可以将请求分成一帧一帧的数据去传输，这样带来了一个额外的好处，就是当收到一个优先级高的请求时，比如接收到 JavaScript 或者 CSS 关键资源的请求，服务器可以暂停之前的请求来优先处理关键资源的请求。")]),t._v(" "),v("h3",{attrs:{id:"实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),v("p",[t._v("可以知道HTTP/2 添加了一个二进制分帧层，实现了 HTTP 的多路复用技术。下面模拟一下请求和接收过程。")]),t._v(" "),v("ul",[v("li",[t._v("浏览器准备好请求数据，包括了请求行、请求头等信息，如果是 POST 方法，那么还要有请求体。")]),t._v(" "),v("li",[t._v("这些数据经过二进制分帧层处理之后，会被转换为一个个带有请求 ID 编号的帧，通过协议栈将这些帧发送给服务器。")]),t._v(" "),v("li",[t._v("服务器接收到所有帧之后，会将所有相同 ID 的帧合并为一条完整的请求信息。")]),t._v(" "),v("li",[t._v("服务器处理该条请求，并将处理的响应行、响应头和响应体分别发送至二进制分帧层。")]),t._v(" "),v("li",[t._v("二进制分帧层会将这些响应数据转换为一个个带有请求 ID 编号的帧，经过协议栈发送给浏览器。")]),t._v(" "),v("li",[t._v("览器接收到响应帧之后，会根据 ID 编号将帧的数据提交给对应的请求。")])]),t._v(" "),v("h2",{attrs:{id:"http-2-特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-2-特性"}},[t._v("#")]),t._v(" HTTP 2 特性")]),t._v(" "),v("h3",{attrs:{id:"可以设置请求的优先级"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#可以设置请求的优先级"}},[t._v("#")]),t._v(" 可以设置请求的优先级")]),t._v(" "),v("p",[t._v("HTTP/2 提供了请求优先级，可以在发送请求时，标上该请求的优先级，这样服务器接收到请求之后，会优先处理优先级高的请求。")]),t._v(" "),v("h3",{attrs:{id:"服务器推送"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[t._v("#")]),t._v(" 服务器推送")]),t._v(" "),v("p",[t._v("HTTP/2 可以直接将数据提前推送到浏览器。你可以想象这样一个场景，当用户请求一个 HTML 页面之后，服务器知道该 HTML 页面会引用几个重要的 JavaScript 文件和 CSS 文件，那么在接收到 HTML 请求之后，附带将要使用的 CSS 文件和 JavaScript 文件一并发送给浏览器，这样当浏览器解析完 HTML 文件之后，就能直接拿到需要的 CSS 文件和 JavaScript 文件，这对首次打开页面的速度起到了至关重要的作用。")]),t._v(" "),v("h3",{attrs:{id:"头部压缩"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#头部压缩"}},[t._v("#")]),t._v(" 头部压缩")]),t._v(" "),v("p",[t._v("HTTP/2 对请求头和响应头进行了压缩。浏览器发送请求的时候，基本上都是发送 HTTP 请求头，很少有请求体的发送。所以对头部进行压缩，传输速率就会得到提升。")]),t._v(" "),v("p",[t._v("虽然 HTTP2 解决了 HTTP/1.1 中的队头阻塞问题，但是 HTTP/2 依然是基于 TCP 协议的，而 TCP 协议依然存在数据包级别的队头阻塞问题。")]),t._v(" "),v("h2",{attrs:{id:"tcp-队头阻塞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-队头阻塞"}},[t._v("#")]),t._v(" TCP 队头阻塞")]),t._v(" "),v("p",[t._v("最后讨论一下 TCP 的队头阻塞。")]),t._v(" "),v("p",[t._v("先看一下 TCP 队头阻塞是如何影响 HTTP 1.1 传输的。")]),t._v(" "),v("img",{attrs:{src:t.$withBase("/images/Browser/HTTP/HTTP201.png"),alt:"HTTP201"}}),t._v(" "),v("p",[t._v("从一端发送给另外一端的数据会被拆分为一个个按照顺序排列的数据包，这些数据包通过网络传输到了接收端，接收端再按照顺序将这些数据包组合成原始数据，这样就完成了数据传输。")]),t._v(" "),v("p",[t._v("不过，如果在数据传输的过程中，有一个数据因为网络故障或者其他原因而丢包了，那么整个 TCP 的连接就会处于暂停状态，需要等待丢失的数据包被重新传输过来。")]),t._v(" "),v("img",{attrs:{src:t.$withBase("/images/Browser/HTTP/HTTP202.png"),alt:"HTTP202"}}),t._v(" "),v("p",[v("strong",[t._v("在 TCP 传输过程中，由于单个数据包的丢失而造成的阻塞称为 TCP 上的队头阻塞。")])]),t._v(" "),v("p",[t._v("接下来在看看队头阻塞是如何对 HTTP 2 产生影响的")]),t._v(" "),v("img",{attrs:{src:t.$withBase("/images/Browser/HTTP/HTTP203.png"),alt:"HTTP203"}}),t._v(" "),v("p",[t._v("在 HTTP/2 中，多个请求是跑在一个 TCP 管道中的，如果其中任意一路数据流中出现了丢包的情况，那么就会阻塞该 TCP 连接中的所有请求。这不同于 HTTP/1.1，使用 HTTP/1.1 时，浏览器为每个域名开启了 6 个 TCP 连接，如果其中的 1 个 TCP 连接发生了队头阻塞，那么其他的 5 个连接依然可以继续传输数据。")]),t._v(" "),v("h2",{attrs:{id:"tcp建立连接的延时"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp建立连接的延时"}},[t._v("#")]),t._v(" TCP建立连接的延时")]),t._v(" "),v("p",[t._v("除了 TCP 队头阻塞之外，TCP 的握手过程也是影响传输效率的一个重要因素。")]),t._v(" "),v("p",[t._v("从浏览器发送一个数据包到服务器，再从服务器返回数据包到浏览器的整个往返时间称为 RTT，也称为网络延迟。")]),t._v(" "),v("p",[t._v("RTT 是反映网络性能的一个重要指标。")]),t._v(" "),v("img",{attrs:{src:t.$withBase("/images/Browser/HTTP/HTTP204.png"),alt:"HTTP204"}}),t._v(" "),v("p",[t._v("HTTP/1 和 HTTP/2 都是使用 TCP 协议来传输的，而如果使用 HTTPS 的话，还需要使用 TLS 协议进行安全传输，而使用 TLS 也需要一个握手过程，这样就需要有两个握手延迟过程。")]),t._v(" "),v("ul",[v("li",[t._v("在建立 TCP 连接的时候，需要和服务器进行三次握手来确认连接成功，也就是说需要在消耗完 1.5 个 RTT 之后才能进行数据传输。")]),t._v(" "),v("li",[t._v("进行 TLS 连接，TLS 有两个版本——TLS1.2 和 TLS1.3，每个版本建立连接所花的时间不同，大致是需要 1～2 个 RTT。")])])])}),[],!1,null,null,null);v.default=_.exports}}]);