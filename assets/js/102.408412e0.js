(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{533:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("p",[t._v("深入理解 JS 数组")]),t._v(" "),s("p",[t._v("今天看到一个有意思的问题:")]),t._v(" "),s("blockquote",[s("p",[t._v("Javascript 的 Array 中的元素在内存上的分布是连续的吗? 为什么?")])]),t._v(" "),s("p",[t._v("咋一看, 我心里想的答案是: 肯定是啊, 数组在内存空间分配的内存不就是连续的嘛? 为什么要问这样的问题呢? 答案真的这么简单吗? 我开始不坚定自己的想法, 毕竟我也没有深究过 JavaScript 的 Array 底层是怎么实现的. 然后我就带着问题, 开始我的 Google 之旅... 好家伙, **果然有问题!**为了刨根问底, 我找到了 V8 的源码仔细研究了一下午, 准备写篇博客记录一下, 以免忘记.")]),t._v(" "),s("h2",{attrs:{id:"什么是数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是数组"}},[t._v("#")]),t._v(" 什么是数组")]),t._v(" "),s("p",[t._v("在讨论 JS 数组之前, 我们先回顾一下数据结构中数组的定义:")]),t._v(" "),s("blockquote",[s("p",[t._v("在计算机科学中, 数组数据结构(英语:array data structure), 简称数组(英语: Array), 是由"),s("strong",[t._v("相同类型的元素")]),t._v("(element)的集合所组成的数据结构, "),s("strong",[t._v("分配一块连续的内存")]),t._v("来存储. 利用元素的索引(index)可以计算出该元素对应的存储地址."),s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("引自维基百科"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("由维基百科给出的数组的定义可知, 数组满足:")]),t._v(" "),s("ol",[s("li",[t._v("数组中所有元素是"),s("strong",[t._v("同种类型")]),t._v("的元素（同一类型元素所需存储空间大小一致，所以我们可以很方便的利用元素的索引来计算出元素所在的位置）；")]),t._v(" "),s("li",[t._v("分配"),s("strong",[t._v("一块连续")]),t._v("的内存存储（固定长度、连续）。")])]),t._v(" "),s("p",[t._v('回想一下 JS 数组, 你就会发现 JS 数组有点"特殊"...')]),t._v(" "),s("h2",{attrs:{id:"js-数组有点特殊"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-数组有点特殊"}},[t._v("#")]),t._v(" JS 数组有点特殊")]),t._v(" "),s("p",[t._v("写过 JS 代码的童鞋对下面这段代码肯定不陌生:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同一数组可以存储不同类型的元素")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4，数组长度可任意更改")]),t._v("\n")])])]),s("p",[t._v("从上面的代码我可以直观的看到, JS 数组与数据结构中的数组相比有些特殊:")]),t._v(" "),s("ol",[s("li",[t._v("同一个 JS 数组的元素可以是"),s("strong",[t._v("不同的数据类型")]),t._v("，那我们肯定没法固定长度为每个元素分配空间，那么这样的数组也就没办法通过元素的索引来计算出某个元素对应的存储地址了。")]),t._v(" "),s("li",[t._v("JS 数组可以"),s("strong",[t._v("任意更改大小")]),t._v("。看到这里，你还会觉得 JS 数组在内存中分配的空间是连续的吗？如果是连续的，如果我们无限制的增加数组的大小，怎么保证后面的区域也是可以分配给数组的呢？")])]),t._v(" "),s("h2",{attrs:{id:"初探-js-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初探-js-数组"}},[t._v("#")]),t._v(" 初探 JS 数组")]),t._v(" "),s("p",[t._v("在查阅一些资料之后, 我知道了这个结论: 在 JS 中数组存在两种形式, 一种是与 "),s("code",[t._v("C/C++")]),t._v(" 等相同的在连续内存中存放数据的"),s("strong",[t._v("快数组")]),t._v(", 另一种是 "),s("code",[t._v("HashTable")]),t._v(" 结构的"),s("strong",[t._v("慢数组")]),t._v(", 是一种典型的"),s("strong",[t._v("字典形式")]),t._v(". 在 V8 引擎中, 直接创建数组默认的方式是创建"),s("strong",[t._v("快数组")]),t._v(", 会直接为数组开辟"),s("strong",[t._v("一定大小连续的内存")]),t._v(".")]),t._v(" "),s("p",[t._v("首先 "),s("code",[t._v("F12")]),t._v(" 打开 Chrome 浏览器的 "),s("code",[t._v("Developer Tools")]),t._v(" , 我们可以利用这个工具初步探索 JS 数组.")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("打开 "),s("code",[t._v("Memory")]),t._v(" 选项卡, 我们可以看到当前网页我们用了多大内存:")])]),t._v(" "),s("li",[s("p",[t._v("在 "),s("code",[t._v("Console")]),t._v(" 中执行以下代码")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("再打开 "),s("code",[t._v("Memory")]),t._v(" 选项卡:")])]),t._v(" "),s("p",[t._v("内存迅速增加了近 200M")]),t._v(" "),s("p",[t._v("回想我们再数据结构中学到的知识: 如果系统为该数组分配的是一块连续的内存, 那么在这个数组上的遍历速度应该是很快的, 那么我们可以计算一下遍历该数组大概需要多少时间:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeEnd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("console 输出如下")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("console.time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("let "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("i")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("LIMIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i++"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.timeEnd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nVM678:3 Array: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.748046875")]),t._v(" ms\n")])])]),s("p",[t._v("现在我们知道了快数组是和 c/c++等语言类似的为其分配连续固定大小的内存空间, 那如果我们此时改变数组大小, 会发生什么事?")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1026")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array+1026"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeEnd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array+1026"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr.length+1026"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nconsole.time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array+1026"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("let "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("i")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("LIMIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i++"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.timeEnd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array+1026"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nVM760:4 Array+1026: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1194.070068359375")]),t._v(" ms\n")])])]),s("p",[t._v("当我们为数组新增 1027 ( "),s("code",[t._v("arr[arr.length+1026] = 1")]),t._v(" 意味着最大索引是 "),s("code",[t._v("arr.length+1026")]),t._v(" , 所以我们为数组增加了 "),s("code",[t._v("1027")]),t._v(" 个长度)个长度后, 再次遍历数组, 所需要开销的时间多了 "),s("code",[t._v("100")]),t._v(" 倍左右, 我们只是增加了 "),s("code",[t._v("1027")]),t._v(' 个元素为什么遍历效率会低这么多? 对! 它"变了"! 它再也不是原来那个快数组了, 它变"慢"了, 变成了慢数组. 看到这里大家肯定觉得有点懵, 怎么就变了? 什么情况下会变? 你倒是说清楚啊! 别急, 下面我们就来研究研究它为什么"变了"?')]),t._v(" "),s("h2",{attrs:{id:"深探-js-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深探-js-数组"}},[t._v("#")]),t._v(" 深探 JS 数组")]),t._v(" "),s("p",[t._v('刚刚我们一直在说什么快数组, 慢数组. 这里"快", "慢"到底是咋回事?')]),t._v(" "),s("h2",{attrs:{id:"v8-中的快慢属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v8-中的快慢属性"}},[t._v("#")]),t._v(" V8 中的快慢属性")]),t._v(" "),s("p",[t._v("这里为了避免这篇文章的内容太长, 就不去深入讨论 V8 中的快慢属性了, 这里直接说结论: 在 V8 中, 前后者分别被称为 "),s("code",[t._v("数组索引属性 (Array-indexed Properties)")]),t._v(" 和 "),s("code",[t._v("命名属性 (Named Properties)")]),t._v(" , 遍历时一般会先遍历前者. 前后两者在底层存储在"),s("strong",[t._v("两个单独的数据结构")]),t._v("中, 分别用 "),s("code",[t._v("properties")]),t._v(" 和 "),s("code",[t._v("elements")]),t._v(" 两个指针指向它们")]),t._v(" "),s("p",[t._v("之所以存储在两个数据结构中, 是为了使不同情况下对属性的增删改查都相对高效. 实际上, V8 有一种策略: 如果命名属性个数在对象初始大小预定义范围内时, 命名属性会直接存储到"),s("strong",[t._v("对象本身")]),t._v(", 而无需先通过 "),s("code",[t._v("properties")]),t._v(" 指针查询, 再获取对应 "),s("code",[t._v("key")]),t._v(" 的值, 省去中间的一步, 从而提升了查找属性的效率. 直接存储到对象本身的属性被称为 "),s("code",[t._v("对象内属性 (In-object Properties)")]),t._v(" . "),s("code",[t._v("对象内属性")]),t._v(" 与 "),s("code",[t._v("properties")]),t._v(" 、 "),s("code",[t._v("elements")]),t._v(" 处于同一层级.")]),t._v(" "),s("h2",{attrs:{id:"快数组与慢数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快数组与慢数组"}},[t._v("#")]),t._v(" 快数组与慢数组")]),t._v(" "),s("p",[t._v("类比快慢属性, 再看我们上一节中举的例子:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 快数组")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1026")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 快数组转为慢数组")]),t._v("\n")])])]),s("p",[t._v("这个例子中, 在行 "),s("code",[t._v("2")]),t._v(" 声明完毕后 "),s("code",[t._v("arr")]),t._v(" 是一个空数组, 但在行 "),s("code",[t._v("3")]),t._v(" 马上又定义索引 "),s("code",[t._v("arr.length+1026")]),t._v(" 处值为 "),s("code",[t._v("1")]),t._v(" , 此时如果为 "),s("code",[t._v("arr")]),t._v(" 创建一个长度为 "),s("code",[t._v("arr.length+1026+1")]),t._v(" 的数组连续内存来存储这样的"),s("strong",[t._v("稀疏数据")]),t._v("将会非常占用内存, 为了应对这种情况, V8 会将数组降级为"),s("strong",[t._v("慢数组")]),t._v(", 创建一个"),s("strong",[t._v("字典")]),t._v("来存储「 "),s("code",[t._v("键、值、描述符")]),t._v(" 」(key、value、descriptor) 三元组. 当使用 "),s("code",[t._v("Object.defineProperty")]),t._v(" 自定义 "),s("code",[t._v("key、value、descriptor")]),t._v(" "),s("code",[t._v("时, V8")]),t._v(" 都会使用"),s("strong",[t._v("慢属性")]),t._v(", 对应到数组中就是"),s("strong",[t._v("慢数组")]),t._v(". 这样说还是太浅显了, 到底什么是快数组什么是慢数组, 什么时候快数组会转换为慢数组, 转换规则是什么?")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/objects/js-array.h")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The JSArray describes JavaScript Arrays")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  Such an array can be in one of two modes:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    - fast, backing storage is a FixedArray and length <= elements.length();")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       Please note: push and pop can be used to grow and shrink the array.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    - slow, backing storage is a HashTable with numbers as keys.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JSArray")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JSObject")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [length]: The length property.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("DECL_ACCESSORS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("通过在 V8 数组的定义可以了解到, 数组可以处于两种模式:")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("Fast 模式")]),t._v("的存储结构是 "),s("code",[t._v("FixedArray")]),t._v(" 并且"),s("strong",[t._v("长度小于等于")]),s("code",[t._v("elements.length")]),t._v(", 可以通过 "),s("code",[t._v("push")]),t._v(" 和 "),s("code",[t._v("pop")]),t._v(" 增加和缩小数组;")]),t._v(" "),s("li",[s("strong",[t._v("slow 模式")]),t._v("的存储结构是一个以"),s("strong",[t._v("数字")]),t._v("为键的 "),s("code",[t._v("HashTable")]),t._v(".")])]),t._v(" "),s("h3",{attrs:{id:"快数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快数组"}},[t._v("#")]),t._v(" 快数组")]),t._v(" "),s("ol",[s("li",[t._v("快数组是一种"),s("code",[t._v("线性的存储方式")]),t._v("，内部存储是"),s("code",[t._v("连续")]),t._v("的内存（新创建的空数组，默认的存储方式是快数组）；")]),t._v(" "),s("li",[s("code",[t._v("快数组长度是可变的")]),t._v("，可以根据元素的增加和删除来动态调整存储空间大小，内部是"),s("strong",[t._v("通过扩容")]),t._v("和"),s("strong",[t._v("收缩机制")]),t._v("实现；")])]),t._v(" "),s("h3",{attrs:{id:"扩容机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩容机制"}},[t._v("#")]),t._v(" 扩容机制")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/objects/js-array.h  105")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number of element slots to pre-allocate for an empty array. (默认的空数组预分配的大小为 4)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" kPreallocatedArrayElements "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/objects/js-objects.h  537")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" kMinAddedElementsCapacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/objects/js-objects.h  540")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Computes the new capacity when expanding the elements of a JSObject. (计算扩充后的容量)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewElementsCapacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" old_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (old_capacity + 50%) + kMinAddedElementsCapacity")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (扩容的公式: new_capacity = old_capacity + old_capacity / 2 + 16)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" old_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("old_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" kMinAddedElementsCapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/code-stub-assembler.cc  5137")]),t._v("\nNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CodeStubAssembler")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CalculateNewElementsCapacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" old_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                      ParameterMode mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CSA_SLOW_ASSERT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MatchesParameterMode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("old_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" half_old_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WordOrSmiShr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("old_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" new_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IntPtrOrSmiAdd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("half_old_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" old_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" padding "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IntPtrOrSmiConstant")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JSObject"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kMinAddedElementsCapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IntPtrOrSmiAdd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" padding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/code-stub-assembler.cc  5202")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Allocate the new backing store.")]),t._v("\nNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" new_elements "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AllocateFixedArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to_kind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Copy the elements from the old elements store to the new.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The size-check above guarantees that the |new_elements| is allocated")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in new space so we can skip the write barrier.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CopyFixedArrayElements")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from_kind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" to_kind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SKIP_WRITE_BARRIER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StoreObjectField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" JSObject"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kElementsOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("默认的空数组预分配的大小为 "),s("code",[t._v("4")]),t._v(" , 当数组进行扩充操作例如 "),s("code",[t._v("push")]),t._v(" 时, 数组的内存若不够则将进行扩容, 最小的扩容容量为 "),s("code",[t._v("16")]),t._v(" , 扩容的公式为 "),s("code",[t._v("new_capacity = old_capacity + old_capacity / 2 + 16")]),t._v(" , 即申请一块原容量 "),s("code",[t._v("1.5")]),t._v(" 倍加 "),s("code",[t._v("16")]),t._v(" 这样大小的内存, 将原数据拷贝到新内存, 然后 "),s("code",[t._v("length + 1")]),t._v(" , 并返回 "),s("code",[t._v("length.")])]),t._v(" "),s("h3",{attrs:{id:"收缩机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#收缩机制"}},[t._v("#")]),t._v(" 收缩机制")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/elements.cc  783")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果容量大于等于 length * 2 + 16，则进行收缩容量调整")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" JSObject"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kMinAddedElementsCapacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If more than half the elements won't be used, trim the array.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not trim from short arrays to prevent frequent trimming on")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// repeated pop operations.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Leave some space to allow for subsequent push operations.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" elements_to_trim "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" old_length\n                                "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    isolate"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("heap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RightTrimFixedArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backing_store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" elements_to_trim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fill the non-trimmed elements with holes.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BackingStore")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backing_store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FillWithHoles")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("old_length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" elements_to_trim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Otherwise, fill the unused tail with holes.（否则用 HOLES 对象填充未被初始化的位置）")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BackingStore")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backing_store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FillWithHoles")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" old_length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当数组执行 "),s("code",[t._v("pop")]),t._v(" 操作时, 会判断 "),s("code",[t._v("pop")]),t._v(" 后数组的容量, "),s("strong",[t._v("是否需要进行减容")]),t._v(", 如果容量大于等于 "),s("code",[t._v("length * 2 + 16")]),t._v(" , 则进行"),s("strong",[t._v("收缩容量调整")]),t._v(", 否则用 "),s("code",[t._v("HOLES")]),t._v(" "),s("strong",[t._v("对象填充未被初始化的位置")]),t._v(", "),s("code",[t._v("elements_to_trim")]),t._v(" 是要裁剪的大小, 需要根据 "),s("code",[t._v("length + 1")]),t._v(" 和 "),s("code",[t._v("old_length")]),t._v(" 判断是将空出的空间"),s("strong",[t._v("全部收缩掉")]),t._v("还是"),s("strong",[t._v("只收缩一半")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"holes-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#holes-对象"}},[t._v("#")]),t._v(" HOLES 对象")]),t._v(" "),s("p",[t._v("上边提到的 "),s("code",[t._v("HOLES")]),t._v(" 对象指的是数组中分配了空间, 但是没有存放元素的位置. 在 "),s("code",[t._v("Fast Elements")]),t._v(" 模式中有一个"),s("strong",[t._v("HOLES 的扩展")]),t._v("称为 "),s("code",[t._v("Fast Holey Elements")]),t._v(" 模式. "),s("code",[t._v("Fast Holey Elements")]),t._v(" 模式适合于数组中的有空洞情况(即只有某些索引存有数据, 而其他的索引都没有赋值的情况), 此时没有赋值的数组索引将会存储一个特殊的值 "),s("code",[t._v("empty")]),t._v(" , 这样在访问这些位置时就可以得到 "),s("code",[t._v("undefined")]),t._v(" . "),s("code",[t._v("Fast Holey Elements")]),t._v(" 模式与 "),s("code",[t._v("Fast Elements")]),t._v(" 模式一样, 会"),s("strong",[t._v("动态分配连续的存储空间")]),t._v(", "),s("strong",[t._v("分配空间的大小由最大的索引值决定")]),t._v(".(定义数组时, 如果没有设置容量, V8 会默认使用 "),s("code",[t._v("Fast Elements")]),t._v(" 模式实现, 如果定义数组时进行了容量的指定, 就会以 "),s("code",[t._v("Fast Holey Elements")]),t._v(" 模式实现).")]),t._v(" "),s("h3",{attrs:{id:"数组类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组类型"}},[t._v("#")]),t._v(" 数组类型")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("Fast Elements")]),t._v(" 模式下 V8 引擎还根据元素类型对数组类型做了细分以"),s("strong",[t._v("优化数组")]),t._v(":")]),t._v(" "),s("ol",[s("li",[t._v("当全部元素都为"),s("strong",[t._v("整数型")]),t._v("的话，那么这个数组的类型就被标记为 "),s("code",[t._v("PACKED_SMI_ELEMENTS")]),t._v(";")]),t._v(" "),s("li",[t._v("如果只存在"),s("strong",[t._v("整数型")]),t._v("和"),s("strong",[t._v("浮点型")]),t._v("的元素类型，那么这个数组的类型为 "),s("code",[t._v("PACKED_DOUBLE_ELEMENTS")]),t._v(";")]),t._v(" "),s("li",[t._v("除此以外，一个数组包含其它的元素，都被标记为 "),s("code",[t._v("PACKED_ELEMENTS")]),t._v("（"),s("strong",[t._v("密集数组")]),t._v("），但"),s("strong",[t._v("这些数组类型并非一成不变，而是在运行时随时更改的")]),t._v("，但是数组的类型只能从特定种类变更为普通种类。即：")])]),t._v(" "),s("ul",[s("li",[t._v("初始为 "),s("code",[t._v("PACKED_SMI_ELEMENTS")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"array.assets/equation",alt:"[公式]"}})]),t._v(" "),s("p",[s("code",[t._v("PACKED_DOUBLE_ELEMENTS")]),t._v(" 或 "),s("code",[t._v("PACKED_ELEMENTS")]),t._v(" ;")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("PACKED_DOUBLE_ELEMENTS")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"array.assets/equation",alt:"[公式]"}})]),t._v(" "),s("p",[s("code",[t._v("PACKED_ELEMENTS")]),t._v(" ;")]),t._v(" "),s("ul",[s("li",[t._v("初始就是 "),s("code",[t._v("PACKED_ELEMENTS")]),t._v(" 类型的数组, 就无法再过渡了, "),s("strong",[t._v("无法逆向过渡")]),t._v(".")])]),t._v(" "),s("p",[t._v("\\4. 上述的这三种类型, 都属于密集数组, 与之相对应的, 是"),s("strong",[t._v("稀疏数组")]),t._v(", 标记为 "),s("code",[t._v("HOLEY_ELEMENTS")]),t._v(" , 稀疏数组同样具有三种类型, **任何一种 "),s("code",[t._v("PACKED")]),t._v(" 都可以过渡到 "),s("code",[t._v("HOLEY")]),t._v(" **:")]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[s("code",[t._v("PACKED_SMI_ELEMENTS")])])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"array.assets/equation",alt:"[公式]"}})]),t._v(" "),s("p",[s("code",[t._v("HOLEY_SMI_ELEMENTS")]),t._v(" ,")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("PACKED_DOUBLE_ELEMENTS")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"array.assets/equation",alt:"[公式]"}})]),t._v(" "),s("p",[s("code",[t._v("HOLEY_DOUBLE_ELEMENTS")]),t._v(" ,")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("PACKED_ELEMENTS")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"array.assets/equation",alt:"[公式]"}}),s("code",[t._v("HOLEY_ELEMENTS")]),t._v(" .(需要注意的是, 虽然可以将数组转换为 "),s("code",[t._v("HOLEY")]),t._v(" 模式, 但是"),s("strong",[t._v("并不一定就代表着这个数组被转换为慢数组")]),t._v(".)")]),t._v(" "),s("h3",{attrs:{id:"慢数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#慢数组"}},[t._v("#")]),t._v(" 慢数组")]),t._v(" "),s("p",[t._v("慢数组是一种字典的内存形式. 不用分配大块连续的存储空间, "),s("code",[t._v("节省了内存")]),t._v(" , 但是由于需要维护这样一个 "),s("code",[t._v("HashTable")]),t._v(" , 其 "),s("code",[t._v("效率会比快数组低")]),t._v(" , V8 中是以 "),s("code",[t._v("Dictionary")]),t._v(" 的结构实现的慢数组.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/objects/dictionary.h  line 27")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashTable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derived")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Shape")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" HashTable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Derived"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Shape"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DerivedHashTable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Shape")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Key Key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns the value at entry.")]),t._v("\n    Object "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DerivedHashTable")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("EntryToIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set the value for entry.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValueAtPut")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Object value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DerivedHashTable")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("EntryToIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns the property details for the property at entry.")]),t._v("\n    PropertyDetails "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("DetailsAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Shape")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("DetailsAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derived")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"快数组转换为慢数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快数组转换为慢数组"}},[t._v("#")]),t._v(" 快数组转换为慢数组")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/objects/js-objects.h")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" kMaxGap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/objects/dictionary.h")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JSObjects prefer dictionary elements if the dictionary saves this much")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// memory compared to a fast elements backing store.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" kPreferFastElementsSizeFactor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NumberDictionaryShape")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NumberDictionaryBaseShape")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" kPrefixSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" kEntrySize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/objects/js-objects-inl.h")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If the fast-case backing storage takes up much more memory than a dictionary")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// backing storage would, the object should have slow elements.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// static")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ShouldConvertToSlowElements")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" used_elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" size_threshold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NumberDictionary"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kPreferFastElementsSizeFactor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n                            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NumberDictionary")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ComputeCapacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("used_elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n                            NumberDictionary"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kEntrySize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" size_threshold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ShouldConvertToSlowElements")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JSObject object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("STATIC_ASSERT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JSObject"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kMaxUncheckedOldFastElementsLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("\n                JSObject"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kMaxUncheckedFastElementsLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" JSObject"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kMaxGap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JSObject")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewElementsCapacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("DCHECK_LT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" JSObject"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kMaxUncheckedOldFastElementsLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" JSObject"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kMaxUncheckedFastElementsLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ObjectInYoungGeneration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ShouldConvertToSlowElements")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetFastElementsUsage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("从源码中我们可以得出结论:")]),t._v(" "),s("ol",[s("li",[t._v("如果快数组扩容后的容量是原来的 "),s("code",[t._v("3")]),t._v(" 倍以上, 意味着它比 "),s("code",[t._v("HashTable")]),t._v(" 形式存储占用更大的内存, 快数组会转换为慢数组;")]),t._v(" "),s("li",[t._v("如果快数组"),s("strong",[t._v("新增的索引与原来最大索引")]),t._v("的差值大于 "),s("code",[t._v("1024")]),t._v(", 快数组会被转换会慢数组.(之前的例子:"),s("code",[t._v("[(arr.length + 1026) - (arr.length - 1)] = 1027 > 1024")]),t._v(", 故 "),s("code",[t._v("arr")]),t._v(" 由快数组转为慢数组.)")])]),t._v(" "),s("h3",{attrs:{id:"慢数组转换为快数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#慢数组转换为快数组"}},[t._v("#")]),t._v(" 慢数组转换为快数组")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/objects/js-objects.cc  line 4523")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ShouldConvertToFastElements")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JSObject object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        NumberDictionary dictionary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If properties with non-standard attributes or accessors were added, we")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cannot go back to fast elements.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dictionary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("requires_slow_elements")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Adding a property with this index will require slow elements.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("static_cast")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Smi"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kMaxValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsJSArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Object length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JSArray")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsSmi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("static_cast")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Smi")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsJSSloppyArgumentsObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dictionary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max_number_key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" dictionary_size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("static_cast")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dictionary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Capacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n                             NumberDictionary"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("kEntrySize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Turn fast if the dictionary only saves 50% space.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" dictionary_size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/src/objects/smi.h  line 106")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constexpr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" kMaxValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" kSmiMaxValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v8/include/v8-internal.h  line 87")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constexpr")]),t._v(" intptr_t kSmiMaxValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("kSmiMinValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("当慢数组的元素可存放在快数组中且长度小于 "),s("code",[t._v("Smi::kMaxValue")]),t._v(" 且当前慢数组相对于快数组仅节省了少于或等于 "),s("code",[t._v("50%")]),t._v(" 的空间, 则转变为快数组.")]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/v8/",target:"_blank",rel:"noopener noreferrer"}},[t._v("V8"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//v8.dev/blog/fast-properties",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fast properties in V8"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/chargeworld/p/12236848.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("V8 是怎么跑起来的 —— V8 中的对象表示"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903943638794248",target:"_blank",rel:"noopener noreferrer"}},[t._v('探究 JS V8 引擎下的"数组"底层实现'),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//z3rog.tech/blog/2020/fast-properties.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("V8 中的快慢属性与快慢数组"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/WindrunnerMax/p/13121840.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解 Js 数组"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);