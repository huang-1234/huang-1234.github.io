(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{559:function(t,a,e){"use strict";e.r(a);var s=e(2),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器工作大体流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器工作大体流程"}},[t._v("#")]),t._v(" 浏览器工作大体流程")]),t._v(" "),a("p",[t._v("浏览器工作流程大体分为如下三部分：")]),t._v(" "),a("h2",{attrs:{id:"_1-浏览器会解析三个东西"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器会解析三个东西"}},[t._v("#")]),t._v(" 1）浏览器会解析三个东西：")]),t._v(" "),a("ul",[a("li",[t._v("一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。")]),t._v(" "),a("li",[t._v("CSS，解析CSS会产生CSS规则树。")]),t._v(" "),a("li",[t._v("Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.")])]),t._v(" "),a("h2",{attrs:{id:"_2-解析完成后-浏览器引擎会通过dom-tree-和-css-rule-tree-来构造-rendering-tree。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-解析完成后-浏览器引擎会通过dom-tree-和-css-rule-tree-来构造-rendering-tree。"}},[t._v("#")]),t._v(" 2）解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。")]),t._v(" "),a("ul",[a("li",[t._v("Rendering Tree 渲染树并不等同于DOM树，因为一些像Header或display:none的东西就没必要放在渲染树中了。")]),t._v(" "),a("li",[t._v("CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。")]),t._v(" "),a("li",[t._v("然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。")])]),t._v(" "),a("h2",{attrs:{id:"_3-最后通过调用操作系统native-gui的api绘制。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-最后通过调用操作系统native-gui的api绘制。"}},[t._v("#")]),t._v(" 3）最后通过调用操作系统Native GUI的API绘制。")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("接下来我们针对这其中所经历的重要步骤，一一详细阐述。")])])]),t._v(" "),a("h2",{attrs:{id:"构建dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建dom"}},[t._v("#")]),t._v(" 构建DOM")]),t._v(" "),a("p",[t._v("浏览器会遵守一套步骤将HTML 文件转换为 DOM 树。宏观上，可以分为几个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器从磁盘或网络读取HTML的原始字节，并根据文件的指定编码（例如 UTF-8）将它们转换成字符串。")])]),t._v(" "),a("p",[t._v("在网络中传输的内容其实都是 0 和 1 这些字节数据。当浏览器接收到这些字节数据以后，它会将这些字节数据转换为字符串，也就是我们写的代码。")]),t._v(" "),a("ul",[a("li",[t._v("将字符串转换成Token，例如："),a("code",[t._v("<html>")]),t._v("、"),a("code",[t._v("<body>")]),t._v("等。"),a("strong",[t._v("Token中会标识出当前Token是“开始标签”或是“结束标签”亦或是“文本”等信息")]),t._v("。")])]),t._v(" "),a("p",[t._v("这时候你一定会有疑问，节点与节点之间的关系如何维护？")]),t._v(" "),a("p",[t._v("事实上，这就是Token要标识“起始标签”和“结束标签”等标识的作用。例如“title”Token的起始标签和结束标签之间的节点肯定是属于“head”的子节点。")]),t._v(" "),a("p",[t._v("上图给出了节点之间的关系，例如：“Hello”Token位于“title”开始标签与“title”结束标签之间，表明“Hello”Token是“title”Token的子节点。同理“title”Token是“head”Token的子节点。")]),t._v(" "),a("ul",[a("li",[t._v("生成节点对象并构建DOM")])]),t._v(" "),a("p",[t._v("事实上，构建DOM的过程中，不是等所有Token都转换完成后再去生成节点对象，而是一边生成Token一边消耗Token来生成节点对象。换句话说，每个Token被生成后，会立刻消耗这个Token创建出节点对象。"),a("strong",[t._v("注意：带有结束标签标识的Token不会创建节点对象。")])]),t._v(" "),a("h2",{attrs:{id:"构建cssom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建cssom"}},[t._v("#")]),t._v(" 构建CSSOM")]),t._v(" "),a("p",[t._v("DOM会捕获页面的内容，但浏览器还需要知道页面如何展示，所以需要构建CSSOM。")]),t._v(" "),a("p",[t._v("构建CSSOM的过程与构建DOM的过程非常相似，当浏览器接收到一段CSS，浏览器首先要做的是识别出Token，然后构建节点并生成CSSOM。")]),t._v(" "),a("p",[t._v("在这一过程中，浏览器会确定下每一个节点的样式到底是什么，并且这一过程其实是很消耗资源的。因为样式你可以自行设置给某个节点，也可以通过继承获得。在这一过程中，浏览器得递归 CSSOM 树，然后确定具体的元素到底是什么样式。")]),t._v(" "),a("p",[a("strong",[t._v("注意：CSS匹配HTML元素是一个相当复杂和有性能问题的事情。所以，DOM树要小，CSS尽量用id和class，千万不要过渡层叠下去")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"构建渲染树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建渲染树"}},[t._v("#")]),t._v(" 构建渲染树")]),t._v(" "),a("p",[t._v("当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。")]),t._v(" "),a("p",[t._v("在这一过程中，不是简单的将两者合并就行了。"),a("strong",[t._v("渲染树只会包括需要显示的节点和这些节点的样式信息")]),t._v("，如果某个节点是 "),a("code",[t._v("display: none")]),t._v("的，那么就不会在渲染树中显示。")]),t._v(" "),a("h2",{attrs:{id:"布局与绘制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局与绘制"}},[t._v("#")]),t._v(" 布局与绘制")]),t._v(" "),a("p",[t._v("当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。")]),t._v(" "),a("p",[t._v("布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸，所有相对测量值都将转换为屏幕上的绝对像素。")]),t._v(" "),a("p",[t._v("布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("以上我们详细介绍了浏览器工作流程中的重要步骤，接下来我们讨论几个相关的问题：")])])]),t._v(" "),a("h2",{attrs:{id:"问题一-渲染过程中遇到js文件怎么处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题一-渲染过程中遇到js文件怎么处理"}},[t._v("#")]),t._v(" 问题一：渲染过程中遇到JS文件怎么处理？")]),t._v(" "),a("p",[t._v("JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。")]),t._v(" "),a("p",[t._v("也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性（下文会介绍这两者的区别）。")]),t._v(" "),a("p",[t._v("JS文件不只是阻塞DOM的构建，它会导致CSSOM也阻塞DOM的构建。")]),t._v(" "),a("p",[t._v("原本DOM和CSSOM的构建是互不影响，井水不犯河水，但是一旦引入了JavaScript，CSSOM也开始阻塞DOM的构建，只有CSSOM构建完毕后，DOM再恢复DOM构建。")]),t._v(" "),a("p",[t._v("这是什么情况？")]),t._v(" "),a("p",[t._v("这是因为JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM。前面我们介绍，不完整的CSSOM是无法使用的，但JavaScript中想访问CSSOM并更改它，那么在执行JavaScript时，必须要能拿到完整的CSSOM。所以就导致了一个现象，如果浏览器尚未完成CSSOM的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟脚本执行和DOM构建，直至其完成CSSOM的下载和构建。也就是说，"),a("strong",[t._v("在这种情况下，浏览器会先下载和构建CSSOM，然后再执行JavaScript，最后在继续构建DOM")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"问题二-你真的了解回流和重绘吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题二-你真的了解回流和重绘吗"}},[t._v("#")]),t._v(" 问题二：你真的了解回流和重绘吗")]),t._v(" "),a("p",[t._v("我们知道，当网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。重新渲染会重复上图中的第四步(回流)+第五步(重绘)或者只有第五个步(重绘)。")]),t._v(" "),a("ul",[a("li",[t._v("重绘:当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的，比如background-color。")]),t._v(" "),a("li",[t._v("回流:当render tree中的一部分(或全部)因为元素的规模尺寸、布局、隐藏等改变而需要重新构建")])]),t._v(" "),a("p",[a("strong",[t._v("回流必定会发生重绘，重绘不一定会引发回流")]),t._v("。重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。")]),t._v(" "),a("h2",{attrs:{id:"_1-常见引起回流属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-常见引起回流属性和方法"}},[t._v("#")]),t._v(" 1）常见引起回流属性和方法")]),t._v(" "),a("p",[t._v("任何会改变元素几何信息(元素的位置和尺寸大小)的操作，都会触发回流，")]),t._v(" "),a("ul",[a("li",[t._v("添加或者删除可见的DOM元素；")]),t._v(" "),a("li",[t._v("元素尺寸改变——边距、填充、边框、宽度和高度")]),t._v(" "),a("li",[t._v("内容变化，比如用户在input框中输入文字")]),t._v(" "),a("li",[t._v("浏览器窗口尺寸改变——resize事件发生时")]),t._v(" "),a("li",[t._v("计算 offsetWidth 和 offsetHeight 属性")]),t._v(" "),a("li",[t._v("设置 style 属性的值")])]),t._v(" "),a("h2",{attrs:{id:"_2-常见引起重绘属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-常见引起重绘属性和方法"}},[t._v("#")]),t._v(" 2）常见引起重绘属性和方法")]),t._v(" "),a("p",[t._v("下面例子中，触发了几次回流和重绘？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("padding "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回流+重绘")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("border "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1px solid red"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再一次 回流+重绘")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再一次重绘")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backgroundColor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#ccc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再一次 重绘")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fontSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"14px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再一次 回流+重绘")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加node，再一次 回流+重绘")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTextNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-如何减少回流、重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何减少回流、重绘"}},[t._v("#")]),t._v(" 3）如何减少回流、重绘")]),t._v(" "),a("ul",[a("li",[t._v("使用 transform 替代 top")]),t._v(" "),a("li",[t._v("使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局）")]),t._v(" "),a("li",[t._v("不要把节点的属性值放在一个循环里当成循环里的变量。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 offsetTop 会导致回流，因为需要去获取正确的值")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.test'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局")]),t._v(" "),a("li",[t._v("动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 requestAnimationFrame")]),t._v(" "),a("li",[t._v("CSS 选择符从右往左匹配查找，避免节点层级过多")]),t._v(" "),a("li",[t._v("将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点。比如对于 video 标签来说，浏览器会自动将该节点变为图层。")])]),t._v(" "),a("h2",{attrs:{id:"问题三-async和defer的作用是什么-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题三-async和defer的作用是什么-有什么区别"}},[t._v("#")]),t._v(" 问题三：async和defer的作用是什么？有什么区别?")]),t._v(" "),a("p",[t._v("接下来我们对比下 defer 和 async 属性的区别：")]),t._v(" "),a("p",[t._v("defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。")]),t._v(" "),a("p",[t._v("defer 与相比普通 script，有两点区别：**载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。")]),t._v(" "),a("p",[t._v("在加载多个JS脚本的时候，async是无顺序的加载，而defer是有顺序的加载。**")]),t._v(" "),a("h2",{attrs:{id:"问题四-为什么操作-dom-慢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题四-为什么操作-dom-慢"}},[t._v("#")]),t._v(" 问题四：为什么操作 DOM 慢")]),t._v(" "),a("p",[t._v("因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。操作 DOM 次数一多，也就等同于一直在进行线程之间的通信，并且操作 DOM 可能还会带来重绘回流的情况，所以也就导致了性能上的问题。")]),t._v(" "),a("h2",{attrs:{id:"问题五-渲染页面时常见哪些不良现象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题五-渲染页面时常见哪些不良现象"}},[t._v("#")]),t._v(" 问题五：渲染页面时常见哪些不良现象？")]),t._v(" "),a("p",[a("strong",[t._v("由于浏览器的渲染机制不同，在渲染页面时会出现两种常见的不良现象—-白屏问题和FOUS（无样式内容闪烁）")])]),t._v(" "),a("p",[t._v("FOUC：由于浏览器渲染机制（比如firefox），再CSS加载之前，先呈现了HTML，就会导致展示出无样式内容，然后样式突然呈现的现象；")]),t._v(" "),a("p",[t._v("白屏：有些浏览器渲染机制（比如chrome）要先构建DOM树和CSSOM树，构建完成后再进行渲染，如果CSS部分放在HTML尾部，由于CSS未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把js文件放在头部，脚本会阻塞后面内容的呈现，脚本会阻塞其后组件的下载，出现白屏问题。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。")]),t._v(" "),a("li",[t._v("CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。")]),t._v(" "),a("li",[t._v("通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个script标签时，DOM构建将暂停，直至脚本完成执行。但由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS。")]),t._v(" "),a("li",[t._v("如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，建议将 script 标签放在 body 标签底部。")])]),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//segmentfault.com/q/1010000000640869",target:"_blank",rel:"noopener noreferrer"}},[t._v("async 和 defer 的区别 | SegmentFault"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//coolshell.cn/articles/9666.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器的渲染原理简介"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//juejin.im/book/5bdc715fe51d454e755f75ef/section/5c024ecbf265da616a476638",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端面试之道"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//juejin.im/entry/59e1d31f51882578c3411c77",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器的渲染：过程与原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000017329980",target:"_blank",rel:"noopener noreferrer"}},[t._v("你真的了解回流和重绘吗"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzA5NzkwNDk3MQ%3D%3D%26mid%3D2650588806%26idx%3D1%26sn%3D408a54e7c8102fd6944c9a40b119015a%26chksm%3D8891d6a2bfe65fb42f493fe9a4dab672dd7e440f31e753196cee0cfbc6696e4f8dd3a669e040%26mpshare%3D1%26scene%3D1%26srcid%3D1228ZrXsmbZKcgCSu7zTVDwy%23",target:"_blank",rel:"noopener noreferrer"}},[t._v("关键渲染路径"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.css88.com/archives/4996",target:"_blank",rel:"noopener noreferrer"}},[t._v("页面重绘和回流以及优化"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("[浏览器重绘(repaint)重排(reflow)与优化"),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//juejin.im/post/5c15f797f265da61141c7f86",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器机制]"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);