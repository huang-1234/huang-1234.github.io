(window.webpackJsonp=window.webpackJsonp||[]).push([[315],{746:function(a,t,e){"use strict";e.r(t);var s=e(2),v=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"es2020-2021-操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es2020-2021-操作符"}},[a._v("#")]),a._v(" es2020 2021 操作符")]),a._v(" "),t("p",[a._v("\\1. 数值分割符 _")]),a._v(" "),t("p",[a._v("\\2. 逗号运算符 ,")]),a._v(" "),t("p",[a._v("\\3. 零合并操作符 ??")]),a._v(" "),t("p",[a._v("\\4. 可选链操作符 ?.")]),a._v(" "),t("p",[a._v("\\5. 私有方法/属性")]),a._v(" "),t("p",[a._v("\\6. 位运算符 >> 与 >>>")]),a._v(" "),t("p",[a._v("\\7. 位运算符 & 与 |")]),a._v(" "),t("p",[a._v("\\8. 双位运算符 ~~")]),a._v(" "),t("p",[a._v("\\9. 短路运算符 && 与 ||")]),a._v(" "),t("p",[a._v("\\10. void 运算符")]),a._v(" "),t("p",[a._v("\\11. 其他常用操作符")]),a._v(" "),t("p",[a._v("\\12. 操作符优先级")]),a._v(" "),t("p",[a._v("JS 里的操作符大家每天都在使用，还有一些 ES2020、ES2021 新加的实用操作符，这些共同构成了 JS 灵活的语法生态。")]),a._v(" "),t("p",[a._v("本文除介绍常用的操作符之外，还会介绍 JS 里一些不常用但是很强大的操作符，下面我们一起来看看吧～")]),a._v(" "),t("h2",{attrs:{id:"_1-数值分割符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数值分割符"}},[a._v("#")]),a._v(" 1. 数值分割符 _")]),a._v(" "),t("p",[a._v("ES2021 引入了数值分割符 "),t("code",[a._v("_")]),a._v("，在数值组之间提供分隔，使一个长数值读起来更容易。Chrome 已经提供了对数值分割符的支持，可以在浏览器里试起来。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let number = 100_0000_0000_0000 // 0太多了不用数值分割符眼睛看花了\nconsole.log(number)             // 输出 100000000000000\n")])])]),t("p",[a._v("此外，十进制的小数部分也可以使用数值分割符，二进制、十六进制里也可以使用数值分割符。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("0x11_1 === 0x111// true 十六进制\n0.11_1 === 0.111// true 十进制的小数\n0b11_1 === 0b111// true 二进制\n")])])]),t("h2",{attrs:{id:"_2-逗号运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-逗号运算符"}},[a._v("#")]),a._v(" 2. 逗号运算符 ,")]),a._v(" "),t("p",[a._v("什么，逗号也可以是运算符吗？是的，曾经看到这样一个简单的函数，将数组的第一项和第二项调换，并返回两项之和：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function reverse(arr) {\n    return [arr[0], arr[1]]=[arr[1], arr[0]], arr[0] + arr[1]\n}\nconst list = [1, 2]\nreverse(list)   // 返回 3，此时 list 为[2, 1]\n")])])]),t("p",[a._v("逗号操作符对它的每个操作数求值（从左到右），并返回"),t("strong",[a._v("最后")]),a._v("一个操作数的值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("expr1, expr2, expr3...\n")])])]),t("p",[a._v("会返回最后一个表达式 "),t("code",[a._v("expr3")]),a._v(" 的结果，其他的表达式只会进行求值。")]),a._v(" "),t("h2",{attrs:{id:"_3-零合并操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-零合并操作符"}},[a._v("#")]),a._v(" 3. 零合并操作符 ??")]),a._v(" "),t("p",[a._v("零合并操作符 "),t("code",[a._v("??")]),a._v(" 是一个逻辑操作符，当左侧的操作数为 "),t("code",[a._v("null")]),a._v(" 或者 "),t("code",[a._v("undefined")]),a._v(" 时，返回右侧操作数，否则返回左侧操作数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("expr1 ?? expr2\n")])])]),t("p",[a._v("空值合并操作符一般用来为常量提供默认值，保证常量不为 "),t("code",[a._v("null")]),a._v(" 或者 "),t("code",[a._v("undefined")]),a._v("，以前一般使用 "),t("code",[a._v("||")]),a._v(" 来做这件事 "),t("code",[a._v("variable = variable || 'bar'")]),a._v("。然而，由于 "),t("code",[a._v("||")]),a._v(" 是一个布尔逻辑运算符，左侧的操作数会被强制转换成布尔值用于求值。任何假值（"),t("code",[a._v("0")]),a._v("， "),t("code",[a._v("''")]),a._v("， "),t("code",[a._v("NaN")]),a._v("， "),t("code",[a._v("null")]),a._v("， "),t("code",[a._v("undefined")]),a._v("）都不会被返回。这导致如果你使用 "),t("code",[a._v("0")]),a._v("、"),t("code",[a._v("''")]),a._v("、"),t("code",[a._v("NaN")]),a._v(" 作为有效值，就会出现不可预料的后果。")]),a._v(" "),t("p",[a._v("正因为 "),t("code",[a._v("||")]),a._v(" 存在这样的问题，而 "),t("code",[a._v("??")]),a._v(" 的出现就是解决了这些问题，"),t("code",[a._v("??")]),a._v(" 只会在左侧为 "),t("code",[a._v("undefined")]),a._v("、"),t("code",[a._v("null")]),a._v(" 时才返回后者，"),t("code",[a._v("??")]),a._v(" 可以理解为是 "),t("code",[a._v("||")]),a._v(" 的完善解决方案。")]),a._v(" "),t("p",[a._v("可以在浏览器中执行下面的代码感受一下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("undefined || 'default'// 'default'\nnull || 'default'// 'default'\nfalse || 'default'// 'default'\n0 || 'default'// 'default'\n\nundefined ?? 'default'// 'default'\nnull ?? 'default'// 'default'\nfalse ?? 'default'// 'false'\n0 ?? 'default'// 0\n")])])]),t("p",[a._v("另外在赋值的时候，可以运用赋值运算符的简写 "),t("code",[a._v("??=")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {b: null, c: 10}\na.b ??= 20\na.c ??= 20\nconsole.log(a)     // 输出 { b: 20, c: 10 }\n")])])]),t("h2",{attrs:{id:"_4-可选链操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-可选链操作符"}},[a._v("#")]),a._v(" 4. 可选链操作符 ?.")]),a._v(" "),t("p",[a._v("可选链操作符 "),t("code",[a._v("?.")]),a._v(" 允许读取位于连接对象链深处的属性的值，而不必验证链中的每个引用是否有效。"),t("code",[a._v("?.")]),a._v(" 操作符的功能类似于 "),t("code",[a._v(".")]),a._v(" 链式操作符，不同之处在于，在引用为 "),t("code",[a._v("null")]),a._v(" 或者 "),t("code",[a._v("undefined")]),a._v(" 的情况下不会引起错误，该表达式短路返回值是 "),t("code",[a._v("undefined")]),a._v("。")]),a._v(" "),t("p",[a._v("当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const obj = {\n  a: 'foo',\n  b: {\n    c: 'bar'\n  }\n}\n\nconsole.log(obj.b?.c)      // 输出 bar\nconsole.log(obj.d?.c)      // 输出 undefined\nconsole.log(obj.func?.())  // 不报错，输出 undefined\n")])])]),t("p",[a._v("以前可能会通过 "),t("code",[a._v("obj && obj.a && obj.a.b")]),a._v(" 来获取一个深度嵌套的子属性，现在可以直接 "),t("code",[a._v("obj?.a?.b")]),a._v(" 即可。")]),a._v(" "),t("p",[a._v("可选链除了可以用在获取对象的属性，还可以用在数组的索引 "),t("code",[a._v("arr?.[index]")]),a._v("，也可以用在函数的判断 "),t("code",[a._v("func?.(args)")]),a._v("，当尝试调用一个可能不存在的方法时也可以使用可选链。")]),a._v(" "),t("p",[a._v("调用一个对象上可能不存在的方法时（版本原因或者当前用户的设备不支持该功能的场景下），使用可选链可以使得表达式在函数不存在时返回 "),t("code",[a._v("undefined")]),a._v(" 而不是直接抛异常。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const result = someInterface.customFunc?.()\n")])])]),t("h2",{attrs:{id:"_5-私有方法-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-私有方法-属性"}},[a._v("#")]),a._v(" 5. 私有方法/属性")]),a._v(" "),t("p",[a._v("在一个类里面可以给属性前面增加 "),t("code",[a._v("#")]),a._v(" 私有标记的方式来标记为私有，除了属性可以被标记为私有外，"),t("code",[a._v("getter/setter")]),a._v(" 也可以标记为私有，方法也可以标为私有。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class Person {\n  getDesc(){\n    returnthis.#name +' '+ this.#getAge()\n  }\n\n  #getAge(){ returnthis.#age } // 私有方法\n\n  get #name(){ return'foo' } // 私有访问器\n  #age = 23// 私有属性\n}\nconst a = new Person()\nconsole.log(a.age)       // undefined 直接访问不到\nconsole.log(a.getDesc()) // foo 23\n")])])]),t("h2",{attrs:{id:"_6-位运算符-与"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-位运算符-与"}},[a._v("#")]),a._v(" 6. 位运算符 >> 与 >>>")]),a._v(" "),t("p",[a._v("有符号右移操作符 "),t("code",[a._v(">>")]),a._v(" 将第一个操作数向右移动指定的位数，多余的位移到右边被丢弃，高位补其符号位，正数补 0，负数则补 1。因为新的最左位与前一个最左位的值相同，所以符号位（最左位）不会改变。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('(0b111>>1).toString(2)   // "11"\n(-0b111>>1).toString(2)  // "-100" 感觉跟直觉不一样\n')])])]),t("p",[a._v("正数的好理解，负数怎么理解呢，负数在计算机中存储是按照补码来存储的，补码的计算方式是取反加一，移位时将补码形式右移，最左边补符号位，移完之后再次取反加一求补码获得处理后的原码。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-111// 真值\n10000111// 原码（高位的0无所谓，后面加不到）\n11111001// 补码\n11111100// 算数右移\n10000100// 移位后求补码获得原码\n-100// 移位后的真值\n")])])]),t("p",[a._v("一般我们用 "),t("code",[a._v(">>")]),a._v(" 来将一个数除 2，相当于先舍弃小数位然后进行一次 "),t("code",[a._v("Math.floor")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("10 >> 1// 5\n13 >> 1// 6 相当于\n13.9 >> 1// 6\n-13 >> 1// -7 相当于\n-13.9 >> 1// -7\n")])])]),t("p",[a._v("无符号右移操作符 "),t("code",[a._v(">>>")]),a._v("，将符号位作为二进制数据的一部分向右移动，高位始终补 0，对于正整数和算数右移没有区别，对于负数来说由于符号位被补 0，成为正数后就不用再求补码了，所以结果总是非负的。即便右移 0 个比特，结果也是非负的。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('(0b111>>>1).toString(2)   // "11"\n(-0b111>>>1).toString(2)  // "1111111111111111111111111111100"\n')])])]),t("p",[a._v("可以这样去理解")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-111// 真值\n1000000000000000000000000000111// 原码\n1111111111111111111111111111001// 补码\n0111111111111111111111111111100// 算数右移（由于右移后成为正数，就不要再求补码了）\n1073741820// 移位后的真值\n")])])]),t("p",[a._v("左移运算符 "),t("code",[a._v("<<")]),a._v(" 与之类似，左移很简单左边移除最高位，低位补 0：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('(0b1111111111111111111111111111100<<1).toString(2)   // "-1000"\n(0b1111111111111111111111111111100<<<1).toString(2)  // "-1000"\n')])])]),t("blockquote",[t("p",[a._v("PS：JS 里面没有无符号左移，而且其他语言比如 JAVA 也没有无符号左移。")])]),a._v(" "),t("h2",{attrs:{id:"_7-位运算符-与"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-位运算符-与"}},[a._v("#")]),a._v(" 7. 位运算符 & 与 |")]),a._v(" "),t("p",[a._v("位运算符是按位进行运算，"),t("code",[a._v("&")]),a._v(" 与、"),t("code",[a._v("|")]),a._v(" 或、"),t("code",[a._v("~")]),a._v(" 非、"),t("code",[a._v("^")]),a._v(" 按位异或：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("&: 1010  |: 1010  ~: 1010  ^: 1010\n   011001100110\n   ----     ----     ----     ----\n   0010111001011100\n")])])]),t("p",[a._v("使用位运算符时会抛弃小数位，我们可以利用这个特性来给数字取整，比如给任意数字 "),t("code",[a._v("&")]),a._v(" 上二进制的 32 个 1，或者 "),t("code",[a._v("|")]),a._v(" 上 0，显而易见后者简单些。")]),a._v(" "),t("p",[a._v("所以我们可以对一个数字 "),t("code",[a._v("| 0")]),a._v(" 来取整，负数也同样适用")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("1.3 | 0// 1\n-1.9 | 0// -1\n")])])]),t("p",[a._v("判断奇偶数除了常见的取余 "),t("code",[a._v("% 2")]),a._v(" 之外，也可以使用 "),t("code",[a._v("& 1")]),a._v("，来判断二进制数的最低位是不是 1，这样除了最低位之外都被置 0，取余的结果只剩最低位，是不是很巧妙。负数也同样适用：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const num = 3\n!!(num & 1)                    // true\n!!(num % 2)                    // true\n")])])]),t("h2",{attrs:{id:"_8-双位运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-双位运算符"}},[a._v("#")]),a._v(" 8. 双位运算符 ~~")]),a._v(" "),t("p",[a._v("可以使用双位操作符来替代正数的 "),t("code",[a._v("Math.floor( )")]),a._v("，替代负数的 "),t("code",[a._v("Math.ceil( )")]),a._v("。双否定位操作符的优势在于它执行相同的操作运行速度更快。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.floor(4.9) === 4// true\n// 简写为：\n~~4.9 === 4// true\n")])])]),t("p",[a._v("不过要注意，对正数来说 "),t("code",[a._v("~~")]),a._v(" 运算结果与 "),t("code",[a._v("Math.floor( )")]),a._v(" 运算结果相同，而对于负数来说与 "),t("code",[a._v("Math.ceil( )")]),a._v(" 的运算结果相同：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("~~4.5// 4\nMath.floor(4.5)      // 4\nMath.ceil(4.5)       // 5\n\n~~-4.5// -4\nMath.floor(-4.5)     // -5\nMath.ceil(-4.5)      // -4\n")])])]),t("blockquote",[t("p",[a._v("PS：注意 "),t("code",[a._v("~~(num/2)")]),a._v(" 方式和 "),t("code",[a._v("num >> 1")]),a._v(" 在值为负数时的差别")])]),a._v(" "),t("h2",{attrs:{id:"_9-短路运算符-与"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-短路运算符-与"}},[a._v("#")]),a._v(" 9. 短路运算符 && 与 ||")]),a._v(" "),t("p",[a._v("我们知道逻辑与 "),t("code",[a._v("&&")]),a._v(" 与逻辑或 "),t("code",[a._v("||")]),a._v(" 是短路运算符，短路运算符就是从左到右的运算中前者满足要求，就不再执行后者了。")]),a._v(" "),t("p",[a._v("可以理解为：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("&&")]),a._v(" 为取假运算，从左到右依次判断，如果遇到一个假值，就返回假值，以后不再执行，否则返回最后一个真值")]),a._v(" "),t("li",[t("code",[a._v("||")]),a._v(" 为取真运算，从左到右依次判断，如果遇到一个真值，就返回真值，以后不再执行，否则返回最后一个假值")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let param1 = expr1 && expr2\nlet param2 = expr1 || expr2\n")])])]),t("p",[t("img",{attrs:{src:"operators.assets/640",alt:"图片"}}),a._v("短路运算符")]),a._v(" "),t("p",[a._v("因此可以用来做很多有意思的事，比如给变量赋初值：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let variable1\nlet variable2 = variable1  || 'foo'\n")])])]),t("p",[a._v("如果 "),t("code",[a._v("variable1")]),a._v(" 是真值就直接返回了，后面短路就不会被返回了，如果为假值，则会返回后面的"),t("code",[a._v("foo")]),a._v("。")]),a._v(" "),t("p",[a._v("也可以用来进行简单的判断，取代冗长的"),t("code",[a._v("if")]),a._v("语句：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let variable = param && param.prop\n// 有了可选链之后可以直接 param?.prop\n")])])]),t("p",[a._v("如果 "),t("code",[a._v("param")]),a._v(" 如果为真值则返回 "),t("code",[a._v("param.prop")]),a._v(" 属性，否则返回 "),t("code",[a._v("param")]),a._v(" 这个假值，这样在某些地方防止 "),t("code",[a._v("param")]),a._v(" 为 "),t("code",[a._v("undefined")]),a._v(" 的时候还取其属性造成报错。")]),a._v(" "),t("h2",{attrs:{id:"_10-void-运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-void-运算符"}},[a._v("#")]),a._v(" 10. void 运算符")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("void` 运算符 对给定的表达式进行求值，然后返回 `undefined\n")])])]),t("p",[a._v("可以用来给在使用立即调用的函数表达式（IIFE）时，可以利用 "),t("code",[a._v("void")]),a._v(" 运算符让 JS 引擎把一个 "),t("code",[a._v("function")]),a._v(" 关键字识别成函数表达式而不是函数声明。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function iife() { console.log('foo') }()       // 报错，因为JS引擎把IIFE识别为了函数声明\nvoidfunction iife() { console.log('foo') }()  // 正常调用\n~function iife() { console.log('foo') }()      // 也可以使用一个位操作符\n(function iife() { console.log('foo') })()     // 或者干脆用括号括起来表示为整体的表达式\n")])])]),t("p",[a._v("还可以用在箭头函数中避免传值泄漏，箭头函数，允许在函数体不使用括号来直接返回值。这个特性给用户带来了很多便利，但有时候也带来了不必要的麻烦，如果右侧调用了一个原本没有返回值的函数，其返回值改变后，会导致非预期的副作用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const func = () =>void customMethod()   // 特别是给一个事件或者回调函数传一个函数时\n")])])]),t("p",[a._v("安全起见，当不希望函数返回值是除了空值以外其他值，应该使用 "),t("code",[a._v("void")]),a._v(" 来确保返回 "),t("code",[a._v("undefined")]),a._v("，这样，当 customMethod 返回值发生改变时，也不会影响箭头函数的行为。")]),a._v(" "),t("h2",{attrs:{id:"_11-其他常用操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-其他常用操作符"}},[a._v("#")]),a._v(" 11. 其他常用操作符")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("三元表达式")]),a._v("：很简单了，大家经常用，"),t("code",[a._v("expr ? expr1 : expr2")]),a._v(" 如果 "),t("code",[a._v("expr")]),a._v(" 为真值则返回 "),t("code",[a._v("expr1")]),a._v("，否则返回 "),t("code",[a._v("expr2")])]),a._v(" "),t("li",[t("strong",[a._v("赋值运算符简写")]),a._v("：加法赋值 "),t("code",[a._v("+=")]),a._v("、减法赋值 "),t("code",[a._v("-=")]),a._v("、乘法赋值 "),t("code",[a._v("*=")]),a._v("、除法赋值 "),t("code",[a._v("/=")]),a._v("、求幂赋值 "),t("code",[a._v("**=")]),a._v("、按位或复制 "),t("code",[a._v("|=")]),a._v("、按位与赋值 "),t("code",[a._v("&=")]),a._v("、有符号按位右移赋值 "),t("code",[a._v(">>=")]),a._v("、无符号按位右移赋值 "),t("code",[a._v(">>>=")]),a._v("、逻辑空赋值 "),t("code",[a._v("??=")]),a._v(" ....")]),a._v(" "),t("li",[t("strong",[a._v("求幂运算符")]),a._v("："),t("code",[a._v("var1 ** var2")]),a._v(" 相当于 "),t("code",[a._v("Math.pow")]),a._v("，结果为 "),t("code",[a._v("var1")]),a._v(" 的 "),t("code",[a._v("var2")]),a._v(" 次方")])]),a._v(" "),t("h2",{attrs:{id:"_12-操作符优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-操作符优先级"}},[a._v("#")]),a._v(" 12. 操作符优先级")]),a._v(" "),t("p",[a._v("正因为有操作符优先级，所以 "),t("code",[a._v("variable = 1, 2")]),a._v(" 的含义是将变量先赋值为 1，再返回数字 2，而不是变量赋值给 "),t("code",[a._v("1, 2")]),a._v(" 的返回值 2，这是因为 "),t("code",[a._v("=")]),a._v(" 运算符的优先级高于 "),t("code",[a._v(",")]),a._v(" 逗号运算符。再比如表达式 "),t("code",[a._v("6 - 2 * 3 === 0 && 1")]),a._v("，"),t("code",[a._v("- * === &&")]),a._v(" 这四个运算符优先级最高的 "),t("code",[a._v("*")]),a._v(" 先运算，然后 "),t("code",[a._v("-")]),a._v(" 运算符结果为 0，"),t("code",[a._v("===")]),a._v(" 运算符优先级高于 "),t("code",[a._v("&&")]),a._v(" 而 "),t("code",[a._v("true && 1")]),a._v(" 的结果为 1，所以这就是运算的结果。")]),a._v(" "),t("p",[a._v("下面的表将运算符按照优先级的不同从高（20）到低（1）排列，但这个不是最新的，至少没包括可选链，建议参考"),t("strong",[a._v("这个表")]),a._v("[1]或者 "),t("strong",[a._v("MDN")]),a._v("[2]。")]),a._v(" "),t("p",[a._v("运算符优先级")]),a._v(" "),t("blockquote",[t("p",[a._v("参考文档：")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("运算符优先级 - JavaScript | MDN")]),a._v("[3]")]),a._v(" "),t("li",[t("strong",[a._v("JS 中可以提升幸福度的小技巧")]),a._v("[4]")]),a._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzA5MjQ0Mjk2NA==&mid=2247487118&idx=1&sn=37327a42056ec7a796c1097141cbcaa0&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[a._v("4个未听说过的强大JavaScript操作符"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("strong",[a._v("聊聊JavaScript中的二进制数")]),a._v("[5]")])])]),a._v(" "),t("h3",{attrs:{id:"运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[a._v("#")]),a._v(" 运算符")]),a._v(" "),t("p",[t("code",[a._v(">>")]),a._v("运算符和"),t("code",[a._v(">>>")]),a._v("运算符")]),a._v(" "),t("p",[a._v("今天在看"),t("code",[a._v("lodash")]),a._v("的源码中"),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/lodash/lodash/blob/master/slice.js",target:"_blank",rel:"noopener noreferrer"}},[a._v("slice"),t("OutboundLink")],1),a._v("这个函数实现的时候发现了里面有这么一行代码")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" start "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" end "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("end "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" start"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nstart "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("当时就很疑惑，知道 "),t("code",[a._v(">>")]),a._v("是移位，那"),t("code",[a._v(">>>")]),a._v("又是什么鬼，还有移位"),t("code",[a._v("0")]),a._v("位又有什么意义呢，带着强烈的好奇心，我就去探究了一下 "),t("code",[a._v(">>> 0")]),a._v("它到底暗藏什么玄机。")]),a._v(" "),t("ul",[t("li",[t("code",[a._v(">>")]),a._v(" 和 "),t("code",[a._v(">>>")]),a._v("有什么不一样\n查了"),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators%23Unsigned_right_shift",target:"_blank",rel:"noopener noreferrer"}},[a._v("MDN"),t("OutboundLink")],1),a._v("原来"),t("code",[a._v(">>>")]),a._v("是无符号右移，"),t("code",[a._v(">>")]),a._v("是有符号移位，\n"),t("code",[a._v(">>有符号移位")]),a._v("：该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧")])]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11111111111111111111111111110111")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// -9 -> 11111111111111111111111111111101   // -3")]),a._v("\n")])])]),t("p",[t("code",[a._v(">>>无符号移位")]),a._v("：该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用 0 填充。因为符号位变成了 0，所以结果总是非负的。（"),t("strong",[a._v("即便右移 0 个比特，结果也是非负的。")]),a._v("）")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("00000000000000000000000000001001")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 9 ->  00000000000000000000000000000010 // 2")]),a._v("\n")])])]),t("p",[a._v("根据文档说明即使移动 0 位也可以将一个负数变成正数，甚至也可以将一个小数变成整数，将未定义的值转换为 0，那到底移动 0 位是什么意思。")]),a._v(" "),t("ul",[t("li",[a._v("移位 0 有什么意义\n"),t("blockquote",[t("p",[a._v("查过一些资料，其中"),t("code",[a._v("stackoverflow")]),a._v("里面有一个"),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it",target:"_blank",rel:"noopener noreferrer"}},[a._v("高票回答"),t("OutboundLink")],1),a._v("，里面有这么一句话\nIt doesn't just convert non-Numbers to Number, it converts them to Numbers that can be expressed as 32-bit unsigned ints.\n原来移位操作符在移位前做了两种转换，第一将不是"),t("code",[a._v("number")]),a._v("类型的数据转换为"),t("code",[a._v("number")]),a._v("，第二将"),t("code",[a._v("number")]),a._v("转换为无符号的"),t("code",[a._v("32bit")]),a._v("数据，也就是"),t("code",[a._v("Uint32")]),a._v("类型。\n这些与移位的位数无关，移位 0 位主要就是用了 js 的内部特性做了前两种转换。")])])]),a._v(" "),t("li",[t("code",[a._v("Uint32")]),a._v("类型是如何转换的\n1 . 如果不能转换为"),t("code",[a._v("Number")]),a._v("，那就为"),t("code",[a._v("0")]),a._v("\n2 . 如果为非整数，先转换为整数，参考公式"),t("code",[a._v("sign(n) ⋅ floor(abs(n))")])])]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ToInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" Math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ceil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("floor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("3 . 如果是正数，返回正数，如果是负数，返回负数 + 2 的 32 次方")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("modulo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" Math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("floor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ToUint32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("modulo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ToInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" Math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("pow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("ul",[t("li",[a._v("总结\n"),t("code",[a._v("x >>> 0")]),a._v("本质上就是保证 x 有意义（为数字类型），且为正整数，在有效的数组范围内（0 ～ 0xFFFFFFFF），且在无意义的情况下缺省值为 0。一个小小的表达式，隐藏着着多重的异常处理。"),t("code",[a._v("js")]),a._v("真是诡异啊。")])]),a._v(" "),t("h3",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),t("p",[a._v("[1][运算符优先级 - JavaScript | MDN: ]https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence")]),a._v(" "),t("p",[a._v("[2]JS 中可以提升幸福度的小技巧: https://juejin.cn/post/6844903641468403726[3]聊聊JavaScript中的二进制数: https://zhuanlan.zhihu.com/p/22297104")])])}),[],!1,null,null,null);t.default=v.exports}}]);