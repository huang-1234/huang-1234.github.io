(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{520:function(a,s,n){"use strict";n.r(s);var t=n(2),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"yarn-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yarn-config"}},[a._v("#")]),a._v(" yarn config")]),a._v(" "),s("h2",{attrs:{id:"yarn-cache之坑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yarn-cache之坑"}},[a._v("#")]),a._v(" Yarn cache之坑")]),a._v(" "),s("p",[a._v("迫于电脑C盘只是128G的固态，虽然还有1个T的机械空间，但完全没用呀😭。眼看C盘越来越小，没办法开始网上各种搜索，优化C盘的办法。")]),a._v(" "),s("p",[a._v("首先是发现了TreeSize神器，这个能直接看到每个盘下面文件夹的大小，真的是一目了然，强烈推荐。")]),a._v(" "),s("p",[a._v("这个时候就发现了Yarn会在C盘个人目录下面缓存大量的包，发现的时候已经6个G了😭。")]),a._v(" "),s("p",[a._v("下面就介绍一下Yarn提供的几个缓存命令：")]),a._v(" "),s("h3",{attrs:{id:"一、yarn-cache-dir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、yarn-cache-dir"}},[a._v("#")]),a._v(" 一、yarn cache dir")]),a._v(" "),s("p",[a._v("运行这个命令会显示出当前缓存目录，默认为C盘。例如我电脑的为")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("C:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Users"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("***"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("AppData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Local"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Yarn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("v4\n")])])]),s("h3",{attrs:{id:"二、yarn-cache-clean-module-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、yarn-cache-clean-module-name"}},[a._v("#")]),a._v(" 二、yarn cache clean [<module_name…>]")]),a._v(" "),s("p",[a._v("运行这个命令会清理缓存包，如果没有指定包名则会全部清理，指定了就清理相关包。\n不过要注意，要先清理然后再配置目录，可能会因为配置完目之后，导致之前缓存下来的没法删除。")]),a._v(" "),s("h3",{attrs:{id:"三、yarn-config-set-cache-folder"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、yarn-config-set-cache-folder"}},[a._v("#")]),a._v(" 三、yarn config set cache-folder")]),a._v(" "),s("p",[a._v("设置当前缓存目录，例如我指定了缓存目录：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" config "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" cache-folder G:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("YarnCache\n")])])]),s("p",[a._v("运行完当然可以再次运行yarn cache dir，来检查下是否配置成功，当然也可以找一个项目运行yarn install来试下。")]),a._v(" "),s("h3",{attrs:{id:"四、同样的道理npm也会在用户目录下面缓存大量的文件-不过比yarn少了很多-只有1个g左右。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、同样的道理npm也会在用户目录下面缓存大量的文件-不过比yarn少了很多-只有1个g左右。"}},[a._v("#")]),a._v(" 四、同样的道理npm也会在用户目录下面缓存大量的文件，不过比yarn少了很多，只有1个G左右。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('npm config get cache\nnpm cache clean --force\nnpm config set cache "D:\\ProgramFile\\nodejs\\node_modules\\node_cache"\nnpm cache verify：验证清理的有效性\n')])])]),s("h3",{attrs:{id:"五、另外一些清理c盘的发现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、另外一些清理c盘的发现"}},[a._v("#")]),a._v(" 五、另外一些清理C盘的发现")]),a._v(" "),s("ol",[s("li",[a._v("IntellJ以及基于它开发的Webstrom、AndroidStudio也会在个人目录下面缓存大量的配置文件，1-2个G了，所以JetBrains全家桶可以考虑只装一个IntellJ，其他webstrom、pycharm等可以考虑安装插件。")]),a._v(" "),s("li",[a._v("window10系统更新完，会在C盘有一个windows.old目录，这个如果系统更新完没有啥问题，过段时间也是可以删除的。")])]),a._v(" "),s("h2",{attrs:{id:"yarn-yarn-lock文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yarn-yarn-lock文件"}},[a._v("#")]),a._v(" Yarn yarn.lock文件")]),a._v(" "),s("p",[a._v("为了在多台机器之间获得一致的安装结果，Yarn 可能会需要比 "),s("code",[a._v("package.json")]),a._v(" 文件中配置的依赖项更多的信息。它需要准确存储每一个依赖项的安装版本。因此在 Yarn 项目的根目录我们需要一个 "),s("code",[a._v("yarn.lock")]),a._v(" 文件，这个 "),s("code",[a._v("yarn.lock")]),a._v(" 文件是自动生成的。")]),a._v(" "),s("p",[a._v("当我们执行 "),s("code",[a._v("yarn")]),a._v(" 命令或者添加依赖包命令后，Yarn 都会在项目根目录下自动生成一个 "),s("code",[a._v("yarn.lock")]),a._v(" 文件。在使用 Yarn 安装、升级、删除依赖项目时，会自动更新到 "),s("code",[a._v("yarn.lock")]),a._v(" 文件中。一般我们不会去手动编辑这个文件，因为很容易破坏这个文件。")]),a._v(" "),s("h3",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[a._v("#")]),a._v(" 示例：")]),a._v(" "),s("p",[a._v("例如我们安装了一些依赖包，那么 "),s("code",[a._v("yarn.lock")]),a._v(" 文件内容类似所示格式：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('copy-descriptor@^0.1.0:\n  version "0.1.1"\n  resolved "https://registry.yarnpkg.com/copy-descriptor/-/copy-descriptor-0.1.1.tgz#676f6eb3c39997c2ee1ac3a924fd6124748f578d"\n  integrity sha1-Z29us8OZl8LuGsOpJP1hJHSPV40=\n\ncore-util-is@~1.0.0:\n  version "1.0.2"\n  resolved "https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7"\n  integrity sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=\n\ncreate-ecdh@^4.0.0:\n  version "4.0.3"\n  resolved "https://registry.yarnpkg.com/create-ecdh/-/create-ecdh-4.0.3.tgz#c9111b6f33045c4697f144787f9254cdc77c45ff"\n  integrity sha512-GbEHQPMOswGpKXM9kCWVrremUcBmjteUaQ01T9rkKCPDXfUHX0IoP9LpHYo2NPFampa4e+/pFDc3jQdxrxQLaw==\n  dependencies:\n    bn.js "^4.1.0"\n    elliptic "^6.0.0"\n')])])]),s("p",[a._v("可以明显看到 "),s("code",[a._v("yarn.lock")]),a._v(" 文件中的信息比 "),s("code",[a._v("package.json")]),a._v(" 文件中详细了很多。")]),a._v(" "),s("p",[a._v("在实际项目中，"),s("code",[a._v("yarn.lock")]),a._v(" 文件也很有用处，我们可以将 "),s("code",[a._v("yarn.lock")]),a._v(" 提交到版本库中，其他成员就可以通过 "),s("code",[a._v("yarn install")]),a._v("获取所有依赖包，这个可以保证大家安装的依赖是完全一致的，避免产生 "),s("code",[a._v("bug")]),a._v("。")]),a._v(" "),s("h2",{attrs:{id:"修改yarn的全局安装和缓存位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改yarn的全局安装和缓存位置"}},[a._v("#")]),a._v(" 修改Yarn的全局安装和缓存位置")]),a._v(" "),s("p",[a._v("在CMD命令行中执行")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#1.改变 yarn 全局安装位置")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" config  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" global-folder "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"你的磁盘路径"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#2.然后你会在你的用户目录找到 `.yarnrc` 的文件，打开它，找到 `global-folder` ，改为 `--global-folder`")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#这里是我的路径")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" config  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" global-folder "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"F:\\JS_SoftWare\\yarn\\yarn_cache"')]),a._v("\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#2. 改变 yarn 缓存位置")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" config "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" cache-folder "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"你的磁盘路径"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#这里是我的路径")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" config "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" cache-folder "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"F:\\JS_SoftWare\\yarn\\yarn_global"')]),a._v("\n")])])]),s("p",[a._v("在我们使用 全局安装 包的时候，会在 “D:\\Software\\yarn\\global” 下 生成 "),s("code",[a._v("node_modules\\.bin")]),a._v(" 目录")]),a._v(" "),s("p",[a._v("我们需要将 "),s("code",[a._v("D:\\Software\\yarn\\global\\node_modules\\.bin")]),a._v(" 整个目录 添加到系统环境变量中去，否则通过yarn 添加的全局包 在cmd 中是找不到的。")]),a._v(" "),s("p",[a._v("检查当前yarn 的 bin的 位置")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" global bin\n")])])]),s("p",[a._v("检查当前 yarn 的 全局安装位置")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" global "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dir")]),a._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);