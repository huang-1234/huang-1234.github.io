(window.webpackJsonp=window.webpackJsonp||[]).push([[519],{950:function(o,e,d){"use strict";d.r(e);var _=d(2),v=Object(_.a)({},(function(){var o=this,e=o._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h1",{attrs:{id:"模块化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[o._v("#")]),o._v(" 模块化")]),o._v(" "),e("h2",{attrs:{id:"模块解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块解析"}},[o._v("#")]),o._v(" 模块解析")]),o._v(" "),e("h4",{attrs:{id:"node-js如何解析模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js如何解析模块"}},[o._v("#")]),o._v(" Node.js如何解析模块")]),o._v(" "),e("p",[o._v("为了理解TypeScript编译依照的解析步骤，先弄明白Node.js模块是非常重要的。 通常，在Node.js里导入是通过 "),e("code",[o._v("require")]),o._v("函数调用进行的。 Node.js会根据 "),e("code",[o._v("require")]),o._v("的是相对路径还是非相对路径做出不同的行为。")]),o._v(" "),e("p",[o._v("相对路径很简单。 例如，假设有一个文件路径为 "),e("code",[o._v("/root/src/moduleA.js")]),o._v("，包含了一个导入"),e("code",[o._v('var x = require("./moduleB");')]),o._v(" Node.js以下面的顺序解析这个导入：")]),o._v(" "),e("ol",[e("li",[o._v("检查"),e("code",[o._v("/root/src/moduleB.js")]),o._v("文件是否存在。")]),o._v(" "),e("li",[o._v("检查"),e("code",[o._v("/root/src/moduleB")]),o._v("目录是否包含一个"),e("code",[o._v("package.json")]),o._v("文件，且"),e("code",[o._v("package.json")]),o._v("文件指定了一个"),e("code",[o._v('"main"')]),o._v("模块。 在我们的例子里，如果Node.js发现文件 "),e("code",[o._v("/root/src/moduleB/package.json")]),o._v("包含了"),e("code",[o._v('{ "main": "lib/mainModule.js" }')]),o._v("，那么Node.js会引用"),e("code",[o._v("/root/src/moduleB/lib/mainModule.js")]),o._v("。")]),o._v(" "),e("li",[o._v("检查"),e("code",[o._v("/root/src/moduleB")]),o._v("目录是否包含一个"),e("code",[o._v("index.js")]),o._v('文件。 这个文件会被隐式地当作那个文件夹下的"main"模块。')])]),o._v(" "),e("p",[o._v("你可以阅读Node.js文档了解更多详细信息："),e("a",{attrs:{href:"https://nodejs.org/api/modules.html#modules_file_modules",target:"_blank",rel:"noopener noreferrer"}},[o._v("file modules"),e("OutboundLink")],1),o._v(" 和 "),e("a",{attrs:{href:"https://nodejs.org/api/modules.html#modules_folders_as_modules",target:"_blank",rel:"noopener noreferrer"}},[o._v("folder modules"),e("OutboundLink")],1),o._v("。")]),o._v(" "),e("p",[o._v("但是，"),e("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/module-resolution.html#relative-vs-non-relative-module-imports",target:"_blank",rel:"noopener noreferrer"}},[o._v("非相对模块名"),e("OutboundLink")],1),o._v("的解析是个完全不同的过程。 Node会在一个特殊的文件夹 "),e("code",[o._v("node_modules")]),o._v("里查找你的模块。 "),e("code",[o._v("node_modules")]),o._v("可能与当前文件在同一级目录下，或者在上层目录里。 Node会向上级目录遍历，查找每个 "),e("code",[o._v("node_modules")]),o._v("直到它找到要加载的模块。")]),o._v(" "),e("p",[o._v("还是用上面例子，但假设"),e("code",[o._v("/root/src/moduleA.js")]),o._v("里使用的是非相对路径导入"),e("code",[o._v('var x = require("moduleB");')]),o._v("。 Node则会以下面的顺序去解析 "),e("code",[o._v("moduleB")]),o._v("，直到有一个匹配上。")]),o._v(" "),e("ol",[e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB.js")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB/package.json")]),o._v(" (如果指定了"),e("code",[o._v('"main"')]),o._v("属性)")])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB/index.js")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB.js")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB/package.json")]),o._v(" (如果指定了"),e("code",[o._v('"main"')]),o._v("属性)")])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB/index.js")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB.js")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB/package.json")]),o._v(" (如果指定了"),e("code",[o._v('"main"')]),o._v("属性)")])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB/index.js")])])])]),o._v(" "),e("p",[o._v("注意Node.js在步骤（4）和（7）会向上跳一级目录。")]),o._v(" "),e("p",[o._v("你可以阅读Node.js文档了解更多详细信息："),e("a",{attrs:{href:"https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders",target:"_blank",rel:"noopener noreferrer"}},[o._v("loading modules from "),e("code",[o._v("node_modules")]),e("OutboundLink")],1),o._v("。")]),o._v(" "),e("h4",{attrs:{id:"ts-如何解析模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ts-如何解析模块"}},[o._v("#")]),o._v(" TS 如何解析模块")]),o._v(" "),e("p",[o._v("TypeScript是模仿Node.js运行时的解析策略来在编译阶段定位模块定义文件。 因此，TypeScript在Node解析逻辑基础上增加了TypeScript源文件的扩展名（ "),e("code",[o._v(".ts")]),o._v("，"),e("code",[o._v(".tsx")]),o._v("和"),e("code",[o._v(".d.ts")]),o._v("）。 同时，TypeScript在 "),e("code",[o._v("package.json")]),o._v("里使用字段"),e("code",[o._v('"types"')]),o._v("来表示类似"),e("code",[o._v('"main"')]),o._v('的意义 - 编译器会使用它来找到要使用的"main"定义文件。')]),o._v(" "),e("p",[o._v("比如，有一个导入语句"),e("code",[o._v('import { b } from "./moduleB"')]),o._v("在"),e("code",[o._v("/root/src/moduleA.ts")]),o._v("里，会以下面的流程来定位"),e("code",[o._v('"./moduleB"')]),o._v("：")]),o._v(" "),e("ol",[e("li",[e("code",[o._v("/root/src/moduleB.ts")])]),o._v(" "),e("li",[e("code",[o._v("/root/src/moduleB.tsx")])]),o._v(" "),e("li",[e("code",[o._v("/root/src/moduleB.d.ts")])]),o._v(" "),e("li",[e("code",[o._v("/root/src/moduleB/package.json")]),o._v(" (如果指定了"),e("code",[o._v('"types"')]),o._v("属性)")]),o._v(" "),e("li",[e("code",[o._v("/root/src/moduleB/index.ts")])]),o._v(" "),e("li",[e("code",[o._v("/root/src/moduleB/index.tsx")])]),o._v(" "),e("li",[e("code",[o._v("/root/src/moduleB/index.d.ts")])])]),o._v(" "),e("p",[o._v("回想一下Node.js先查找"),e("code",[o._v("moduleB.js")]),o._v("文件，然后是合适的"),e("code",[o._v("package.json")]),o._v("，再之后是"),e("code",[o._v("index.js")]),o._v("。")]),o._v(" "),e("p",[o._v("类似地，非相对的导入会遵循Node.js的解析逻辑，首先查找文件，然后是合适的文件夹。 因此 "),e("code",[o._v("/root/src/moduleA.ts")]),o._v("文件里的"),e("code",[o._v('import { b } from "moduleB"')]),o._v("会以下面的查找顺序解析：")]),o._v(" "),e("ol",[e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB.tsx")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB.d.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB/package.json")]),o._v(" (如果指定了"),e("code",[o._v('"types"')]),o._v("属性)")])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB/index.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB/index.tsx")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/src/node_modules/moduleB/index.d.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB.tsx")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB.d.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB/package.json")]),o._v(" (如果指定了"),e("code",[o._v('"types"')]),o._v("属性)")])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB/index.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB/index.tsx")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/root/node_modules/moduleB/index.d.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB.tsx")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB.d.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB/package.json")]),o._v(" (如果指定了"),e("code",[o._v('"types"')]),o._v("属性)")])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB/index.ts")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB/index.tsx")])])]),o._v(" "),e("li",[e("p",[e("code",[o._v("/node_modules/moduleB/index.d.ts")])])])]),o._v(" "),e("p",[o._v("不要被这里步骤的数量吓到 - TypeScript只是在步骤（8）和（15）向上跳了两次目录。 这并不比Node.js里的流程复杂")])])}),[],!1,null,null,null);e.default=v.exports}}]);