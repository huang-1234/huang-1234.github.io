(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{612:function(s,a,t){"use strict";t.r(a);var r=t(2),e=Object(r.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"逻辑运算和数学运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算和数学运算"}},[s._v("#")]),s._v(" 逻辑运算和数学运算")]),s._v(" "),a("h2",{attrs:{id:"异或运算-xor-教程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异或运算-xor-教程"}},[s._v("#")]),s._v(" 异或运算 XOR 教程")]),s._v(" "),a("h2",{attrs:{id:"一、含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、含义"}},[s._v("#")]),s._v(" 一、含义")]),s._v(" "),a("p",[s._v('XOR 是 exclusive OR 的缩写。英语的 exclusive 意思是"专有的，独有的"，可以理解为 XOR 是更单纯的 OR 运算。')]),s._v(" "),a("p",[s._v("我们知道，OR 运算的运算子有两种情况，计算结果为"),a("code",[s._v("true")]),s._v("。")]),s._v(" "),a("p",[s._v("（1）一个为 true，另一个为 false;")]),s._v(" "),a("p",[s._v("（2）两个都为 true。")]),s._v(" "),a("p",[s._v("上面两种情况，有时候需要明确区分，所以引入了 XOR。")]),s._v(" "),a("p",[s._v("XOR 排除了第二种情况，只有第一种情况（一个运算子为"),a("code",[s._v("true")]),s._v("，另一个为"),a("code",[s._v("false")]),s._v("）才会返回 true，所以可以看成是更单纯的 OR 运算。也就是说， "),a("strong",[s._v("XOR 主要用来判断两个值是否不同。")])]),s._v(" "),a("p",[s._v("XOR 一般使用插入符号（caret）"),a("code",[s._v("^")]),s._v("表示。如果约定"),a("code",[s._v("0")]),s._v(" 为 false，"),a("code",[s._v("1")]),s._v(" 为 true，那么 XOR 的运算真值表如下。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),a("h2",{attrs:{id:"二、运算定律"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、运算定律"}},[s._v("#")]),s._v(" 二、运算定律")]),s._v(" "),a("p",[s._v("XOR 运算有以下的运算定律。由于非常简单，这里就省略证明了。")]),s._v(" "),a("p",[s._v("（1）"),a("strong",[s._v("一个值与自身的运算，总是为 false。")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),a("p",[s._v("（2）"),a("strong",[s._v("一个值与 0 的运算，总是等于其本身。")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x\n")])])]),a("p",[s._v("（3）"),a("strong",[s._v("可交换性")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" x\n")])])]),a("p",[s._v("（4）"),a("strong",[s._v("结合性")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" z\n")])])]),a("h2",{attrs:{id:"三、应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、应用"}},[s._v("#")]),s._v(" 三、应用")]),s._v(" "),a("p",[s._v("根据上面的这些运算定律，可以得到异或运算的很多重要应用。")]),s._v(" "),a("h3",{attrs:{id:"_3-1-简化计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-简化计算"}},[s._v("#")]),s._v(" 3.1 简化计算")]),s._v(" "),a("p",[s._v("多个值的异或运算，可以根据运算定律进行简化。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" c\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" c\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c\n")])])]),a("h3",{attrs:{id:"_3-2-交换值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-交换值"}},[s._v("#")]),s._v(" 3.2 交换值")]),s._v(" "),a("p",[s._v("两个变量连续进行三次异或运算，可以互相交换值。")]),s._v(" "),a("p",[s._v("假设两个变量是"),a("code",[s._v("x")]),s._v("和"),a("code",[s._v("y")]),s._v("，各自的值是"),a("code",[s._v("a")]),s._v("和"),a("code",[s._v("b")]),s._v("。下面就是"),a("code",[s._v("x")]),s._v("和"),a("code",[s._v("y")]),s._v("进行三次异或运算，注释部分是每次运算后两个变量的值。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (a ^ b, b)")]),s._v("\ny "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (a ^ b, a ^ b ^ b) =(a ^ b, a)")]),s._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (a ^ b ^ a, a) =(b, a)")]),s._v("\n")])])]),a("p",[s._v("这是两个变量交换值的最快方法，不需要任何额外的空间。")]),s._v(" "),a("h3",{attrs:{id:"_3-3-加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-加密"}},[s._v("#")]),s._v(" 3.3 加密")]),s._v(" "),a("p",[s._v("异或运算可以用于加密。")]),s._v(" "),a("p",[s._v("第一步，明文（text）与密钥（key）进行异或运算，可以得到密文（cipherText）。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cipherText\n")])])]),a("p",[s._v("第二步，密文与密钥再次进行异或运算，就可以还原成明文。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("cipherText "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" text\n")])])]),a("p",[s._v("原理很简单，如果明文是 x，密钥是 y，那么 x 连续与 y 进行两次异或运算，得到自身。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x\n")])])]),a("h3",{attrs:{id:"_3-4-数据备份"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-数据备份"}},[s._v("#")]),s._v(" 3.4 数据备份")]),s._v(" "),a("p",[s._v("异或运算可以用于数据备份。")]),s._v(" "),a("p",[s._v("文件 x 和文件 y 进行异或运算，产生一个备份文件 z。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" z\n")])])]),a("p",[s._v("以后，无论是文件 x 或文件 y 损坏，只要不是两个原始文件同时损坏，就能根据另一个文件和备份文件，进行还原。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" z\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" y\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y\n")])])]),a("p",[s._v("上面的例子是 y 损坏，x 和 z 进行异或运算，就能得到 y。")]),s._v(" "),a("h2",{attrs:{id:"四、一道面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、一道面试题"}},[s._v("#")]),s._v(" 四、一道面试题")]),s._v(" "),a("p",[s._v("一些面试的算法题，也能使用异或运算快速求解。")]),s._v(" "),a("p",[s._v("请看下面这道题。")]),s._v(" "),a("p",[s._v("一个数组包含 n-1 个成员，这些成员是 1 到 n 之间的整数，且没有重复，请找出缺少的那个数字。")]),s._v(" "),a("p",[s._v("最快的解答方法，就是把所有数组成员（A[0] 一直到 A[n-2]）与 1 到 n 的整数全部放在一起，进行异或运算。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" n\n")])])]),a("p",[s._v("上面这个式子中，每个数组成员都会出现两次，相同的值进行异或运算就会得到 0。只有缺少的那个数字出现一次，所以最后得到的就是这个值。")]),s._v(" "),a("p",[s._v("你可能想到了，加法也可以解这道题。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("但是，加法的速度没有异或运算快，而且需要额外的空间。如果数字比较大，还有溢出的可能。")]),s._v(" "),a("p",[s._v("下面是一道类似的题目，大家可以作为练习。")]),s._v(" "),a("p",[s._v("一个数组包含 n+1 个成员，这些成员是 1 到 n 之间的整数。只有一个成员出现了两次，其他成员都只出现一次，请找出重复出现的那个数字。")])])}),[],!1,null,null,null);a.default=e.exports}}]);