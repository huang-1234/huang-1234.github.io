(window.webpackJsonp=window.webpackJsonp||[]).push([[566],{999:function(t,n,e){"use strict";e.r(n);var s=e(2),a=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"vscode-扩展插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vscode-扩展插件"}},[t._v("#")]),t._v(" vscode 扩展插件")]),t._v(" "),n("p",[t._v("安装扩展C/C++，扩展程序将自动安装clang-format。clang-format默认安装路径为c:\\Users\\wqr57.vscode\\extensions\\ms-vscode.cpptools-0.18.1/bin/../LLVM/bin/clang-format.exe")]),t._v(" "),n("h1",{attrs:{id:"clang-format"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clang-format"}},[t._v("#")]),t._v(" .clang-format")]),t._v(" "),n("p",[t._v("powershell中输入")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("clang-format "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-style")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("llvm -dump-config "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" .clang-format\n")])])]),n("p",[t._v("产生模板")]),t._v(" "),n("p",[t._v("决定自定义格式化")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("---\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto")]),t._v("\nLanguage:\tCpp\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BasedOnStyle:\tLLVM")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问说明符(public、private等)的偏移")]),t._v("\nAccessModifierOffset:\t"),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)")]),t._v("\nAlignAfterOpenBracket:\tAlign\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连续赋值时，对齐所有等号")]),t._v("\nAlignConsecutiveAssignments:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连续声明时，对齐所有声明的变量名")]),t._v("\nAlignConsecutiveDeclarations:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\nAlignEscapedNewlines: Right\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左对齐逃脱换行(使用反斜杠换行)的反斜杠")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#AlignEscapedNewlinesLeft:\ttrue")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 水平对齐二元和三元表达式的操作数")]),t._v("\nAlignOperands:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对齐连续的尾随的注释")]),t._v("\nAlignTrailingComments:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许函数声明的所有参数在放在下一行")]),t._v("\nAllowAllParametersOfDeclarationOnNextLine:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许短的块放在同一行")]),t._v("\nAllowShortBlocksOnASingleLine:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许短的case标签放在同一行")]),t._v("\nAllowShortCaseLabelsOnASingleLine:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All")]),t._v("\nAllowShortFunctionsOnASingleLine:\tEmpty\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许短的if语句保持在同一行")]),t._v("\nAllowShortIfStatementsOnASingleLine:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许短的循环保持在同一行")]),t._v("\nAllowShortLoopsOnASingleLine:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 总是在定义返回类型后换行(deprecated)")]),t._v("\nAlwaysBreakAfterDefinitionReturnType:\tNone\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)")]),t._v("\nAlwaysBreakAfterReturnType:\tNone\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 总是在多行string字面量前换行")]),t._v("\nAlwaysBreakBeforeMultilineStrings:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 总是在template声明后换行")]),t._v("\nAlwaysBreakTemplateDeclarations:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# false表示函数实参要么都在同一行，要么都各自一行")]),t._v("\nBinPackArguments:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# false表示所有形参要么都在同一行，要么都各自一行")]),t._v("\nBinPackParameters:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效")]),t._v("\nBraceWrapping:\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# class定义后面")]),t._v("\n  AfterClass:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 控制语句后面")]),t._v("\n  AfterControlStatement:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# enum定义后面")]),t._v("\n  AfterEnum:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 函数定义后面 fine finally")]),t._v("\n  AfterFunction:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命名空间定义后面")]),t._v("\n  AfterNamespace:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ObjC定义后面")]),t._v("\n  AfterObjCDeclaration:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# struct定义后面")]),t._v("\n  AfterStruct:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# union定义后面")]),t._v("\n  AfterUnion:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n  AfterExternBlock: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# catch之前")]),t._v("\n  BeforeCatch:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# else之前")]),t._v("\n  BeforeElse:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 缩进大括号")]),t._v("\n  IndentBraces:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  SplitEmptyFunction: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  SplitEmptyRecord: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  SplitEmptyNamespace: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)")]),t._v("\nBreakBeforeBinaryOperators:\tNone\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   注：这里认为语句块也属于函数")]),t._v("\nBreakBeforeBraces:\tCustom\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在三元运算符前换行")]),t._v("\nBreakBeforeTernaryOperators:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在构造函数的初始化列表的逗号前换行")]),t._v("\nBreakConstructorInitializersBeforeComma:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nBreakConstructorInitializers: BeforeColon\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每行字符的限制，0表示没有限制")]),t._v("\nColumnLimit:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变")]),t._v("\nCommentPragmas:\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^ IWYU pragma:'")]),t._v("\nCompactNamespaces: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构造函数的初始化列表要么都在同一行，要么都各自一行")]),t._v("\nConstructorInitializerAllOnOneLineOrOnePerLine:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构造函数的初始化列表的缩进宽度")]),t._v("\nConstructorInitializerIndentWidth:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 延续的行的缩进宽度")]),t._v("\nContinuationIndentWidth:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 去除C++11的列表初始化的大括号{后和}前的空格")]),t._v("\nCpp11BracedListStyle:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 继承最常用的指针和引用的对齐方式")]),t._v("\nDerivePointerAlignment:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭格式化")]),t._v("\nDisableFormat:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)")]),t._v("\nExperimentalAutoDetectBinPacking:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要被解读为foreach循环而不是函数调用的宏")]),t._v("\nForEachMacros:\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" foreach, Q_FOREACH, BOOST_FOREACH "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   可以定义负数优先级从而保证某些#include永远在最前面")]),t._v("\nIncludeCategories:\n  - Regex:\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^\"(llvm|llvm-c|clang|clang-c)/'")]),t._v("\n    Priority:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  - Regex:\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^(<|\"(gtest|isl|json)/)'")]),t._v("\n    Priority:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  - Regex:\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.*'")]),t._v("\n    Priority:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 缩进case标签")]),t._v("\nIndentCaseLabels:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\nIndentPPDirectives:  AfterHash\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 缩进宽度")]),t._v("\nIndentWidth:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 函数返回类型换行时，缩进函数声明或函数定义的函数名")]),t._v("\nIndentWrappedFunctionNames:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保留在块开始处的空行")]),t._v("\nKeepEmptyLinesAtTheStartOfBlocks:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开始一个块的宏的正则表达式")]),t._v("\nMacroBlockBegin:\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 结束一个块的宏的正则表达式")]),t._v("\nMacroBlockEnd:\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连续空行的最大数量")]),t._v("\nMaxEmptyLinesToKeep:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All")]),t._v("\nNamespaceIndentation:\tInner\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用ObjC块时缩进宽度")]),t._v("\nObjCBlockIndentWidth:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在ObjC的@property后添加一个空格")]),t._v("\nObjCSpaceAfterProperty:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在ObjC的protocol列表前添加一个空格")]),t._v("\nObjCSpaceBeforeProtocolList:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在call(后对函数调用换行的penalty")]),t._v("\nPenaltyBreakBeforeFirstCallParameter:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在一个注释中引入换行的penalty")]),t._v("\nPenaltyBreakComment:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一次在<<前换行的penalty")]),t._v("\nPenaltyBreakFirstLessLess:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在一个字符串字面量中引入换行的penalty")]),t._v("\nPenaltyBreakString:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对于每个在行字符数限制之外的字符的penalty")]),t._v("\nPenaltyExcessCharacter:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将函数的返回类型放到它自己的行的penalty")]),t._v("\nPenaltyReturnTypeOnItsOwnLine:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指针和引用的对齐: Left, Right, Middle")]),t._v("\nPointerAlignment:\tLeft\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许重新排版注释")]),t._v("\nReflowComments:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许排序#include")]),t._v("\nSortIncludes:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在C风格类型转换后添加空格")]),t._v("\nSpaceAfterCStyleCast:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\nSpaceAfterTemplateKeyword: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在赋值运算符之前添加空格")]),t._v("\nSpaceBeforeAssignmentOperators:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开圆括号之前添加一个空格: Never, ControlStatements, Always")]),t._v("\nSpaceBeforeParens:\tControlStatements\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在空的圆括号中添加空格")]),t._v("\nSpaceInEmptyParentheses:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在尾随的评论前添加的空格数(只适用于//)")]),t._v("\nSpacesBeforeTrailingComments:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在尖括号的<后和>前添加空格")]),t._v("\nSpacesInAngles:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格")]),t._v("\nSpacesInContainerLiterals:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在C风格类型转换的括号中添加空格")]),t._v("\nSpacesInCStyleCastParentheses:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在圆括号的(后和)前添加空格")]),t._v("\nSpacesInParentheses:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响")]),t._v("\nSpacesInSquareBrackets:\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 标准: Cpp03, Cpp11, Auto")]),t._v("\nStandard:\tCpp11\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tab宽度")]),t._v("\nTabWidth:\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always")]),t._v("\nUseTab:\tNever\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);