(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{500:function(t,e,l){"use strict";l.r(e);var v=l(2),a=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"全局对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局对象"}},[t._v("#")]),t._v(" 全局对象")]),t._v(" "),e("p",[t._v("JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。")]),t._v(" "),e("p",[t._v("在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以外）都是 global 对象的属性。")]),t._v(" "),e("p",[t._v("在 Node.js 我们可以直接访问到 global 的属性，而不需要在应用中包含它。")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"全局对象与全局变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局对象与全局变量"}},[t._v("#")]),t._v(" 全局对象与全局变量")]),t._v(" "),e("p",[t._v("global 最根本的作用是作为全局变量的宿主。按照 ECMAScript 的定义，满足以下条 件的变量是全局变量：")]),t._v(" "),e("ul",[e("li",[t._v("在最外层定义的变量；")]),t._v(" "),e("li",[t._v("全局对象的属性；")]),t._v(" "),e("li",[t._v("隐式定义的变量（未定义直接赋值的变量）。")])]),t._v(" "),e("p",[t._v("当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注 意的是，在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。")]),t._v(" "),e("p",[e("strong",[t._v("注意：")]),t._v(" 最好不要使用 var 定义变量以避免引入全局变量，因为全局变量会污染命名空间，提高代码的耦合风险。")]),t._v(" "),e("blockquote",[e("p",[t._v("模块的五个参数")])]),t._v(" "),e("ul",[e("li",[t._v("__filename")])]),t._v(" "),e("p",[e("strong",[t._v("__filename")]),t._v(" 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。")]),t._v(" "),e("h2",{attrs:{id:"定时器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定时器"}},[t._v("#")]),t._v(" 定时器")]),t._v(" "),e("ol",[e("li",[t._v("setTimeout(cb, ms)")])]),t._v(" "),e("p",[e("strong",[t._v("setTimeout(cb, ms)")]),t._v(" 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：setTimeout() 只执行一次指定函数。")]),t._v(" "),e("p",[t._v("返回一个代表定时器的句柄值。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("clearTimeout(t)")])]),t._v(" "),e("p",[e("strong",[t._v("clearTimeout( t )")]),t._v(" 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 "),e("strong",[t._v("t")]),t._v(" 是通过 setTimeout() 函数创建的定时器。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("setInterval(cb, ms)")])]),t._v(" "),e("p",[e("strong",[t._v("setInterval(cb, ms)")]),t._v(" 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。返回一个代表定时器的句柄值。可以使用 "),e("strong",[t._v("clearInterval(t)")]),t._v(" 函数来清除定时器。setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。")]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("setInterval(cb, ms)")])]),t._v(" "),e("p",[e("strong",[t._v("setInterval(cb, ms)")]),t._v(" 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。返回一个代表定时器的句柄值。可以使用 "),e("strong",[t._v("clearInterval(t)")]),t._v(" 函数来清除定时器。setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。")]),t._v(" "),e("h2",{attrs:{id:"console"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#console"}},[t._v("#")]),t._v(" console")]),t._v(" "),e("p",[t._v("console 用于提供控制台标准输出，它是由 Internet Explorer 的 JScript 引擎提供的调试工具，后来逐渐成为浏览器的实施标准。")]),t._v(" "),e("p",[t._v("Node.js 沿用了这个标准，提供与习惯行为一致的 console 对象，用于向标准输出流（stdout）或标准错误流（stderr）输出字符。")]),t._v(" "),e("h3",{attrs:{id:"console-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#console-方法"}},[t._v("#")]),t._v(" console 方法")]),t._v(" "),e("p",[t._v("以下为 console 对象的方法:")]),t._v(" "),e("p",[t._v("以下为 console 对象的方法:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("方法 & 描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("console.log([data][, ...])")]),t._v(" 向标准输出流打印字符并以换行符结束。该方法接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("console.info([data][, ...])")]),t._v(" 该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("console.error([data][, ...])")]),t._v(" 输出错误消息的。控制台在出现错误时会显示是红色的叉子。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("console.warn([data][, ...])")]),t._v(" 输出警告消息。控制台出现有黄色的惊叹号。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("console.dir(obj[, options])")]),t._v(" 用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("console.time(label)")]),t._v(" 输出时间，表示计时开始。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("console.timeEnd(label)")]),t._v(" 结束时间，表示计时结束。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("console.trace(message[, ...])")]),t._v(" 当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("console.assert(value[, message][, ...])")]),t._v(" 用于判断某个表达式或变量是否为真，接收两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。")])])])]),t._v(" "),e("p",[t._v("console.log()：向标准输出流打印字符并以换行符结束。")]),t._v(" "),e("h2",{attrs:{id:"process"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#process"}},[t._v("#")]),t._v(" process")]),t._v(" "),e("p",[t._v("process 是一个全局变量，即 global 对象的属性。")]),t._v(" "),e("p",[t._v("它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。通常在你写本地命令行程序的时候，少不了要 和它打交道。下面将会介绍 process 对象的一些最常用的成员方法。")]),t._v(" "),e("h3",{attrs:{id:"事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("事件 & 描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("exit")]),t._v(" 当进程准备退出时触发。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("beforeExit")]),t._v(" 当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 'beforeExit' 的监听器可以异步调用，这样 node 就会继续执行。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("uncaughtException")]),t._v(" 当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("Signal 事件")]),t._v(" 当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。")])])])]),t._v(" "),e("h3",{attrs:{id:"process-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#process-属性"}},[t._v("#")]),t._v(" Process 属性")]),t._v(" "),e("p",[t._v("Process 提供了很多有用的属性，便于我们更好的控制系统的交互：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("序号.")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("属性 & 描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("stdout")]),t._v(" 标准输出流。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("stderr")]),t._v(" 标准错误流。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("stdin")]),t._v(" 标准输入流。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("argv")]),t._v(" argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("execPath")]),t._v(" 返回执行当前脚本的 Node 二进制文件的绝对路径。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("execArgv")]),t._v(" 返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("env")]),t._v(" 返回一个对象，成员为当前 shell 的环境变量")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("exitCode")]),t._v(" 进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("version")]),t._v(" Node 的版本，比如v0.10.18。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("versions")]),t._v(" 一个属性，包含了 node 的版本和依赖.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("config")]),t._v(' 一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 "config.gypi" 文件相同。')])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("pid")]),t._v(" 当前进程的进程号。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("title")]),t._v(' 进程名，默认值为"node"，可以自定义该值。')])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("arch")]),t._v(" 当前 CPU 的架构：'arm'、'ia32' 或者 'x64'。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("platform")]),t._v(" 运行程序所在的平台系统 'darwin', 'freebsd', 'linux', 'sunos' 或 'win32'")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("mainModule")]),t._v(" require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。")])])])]),t._v(" "),e("h3",{attrs:{id:"process的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#process的方法"}},[t._v("#")]),t._v(" process的方法")]),t._v(" "),e("p",[t._v("Process 提供了很多有用的方法，便于我们更好的控制系统的交互：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("方法 & 描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("abort()")]),t._v(" 这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("chdir(directory)")]),t._v(" 改变当前工作进程的目录，如果操作失败抛出异常。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("cwd()")]),t._v(" 返回当前进程的工作目录")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("exit([code])")]),t._v(" 使用指定的 code 结束进程。如果忽略，将会使用 code 0。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("getgid()")]),t._v(" 获取进程的群组标识（参见 getgid(2)）。获取到得时群组的数字 id，而不是名字。 注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("setgid(id)")]),t._v(" 设置进程的群组标识（参见 setgid(2)）。可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。 注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("getuid()")]),t._v(" 获取进程的用户标识(参见 getuid(2))。这是数字的用户 id，不是用户名。 注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("setuid(id)")]),t._v(" 设置进程的用户标识（参见setuid(2)）。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。 注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("getgroups()")]),t._v(" 返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。 注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("setgroups(groups)")]),t._v(" 设置进程的群组 ID。这是授权操作，所以你需要有 root 权限，或者有 CAP_SETGID 能力。 注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("initgroups(user, extra_group)")]),t._v(" 读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所以你需要有 root 权限，或者有 CAP_SETGID 能力。 注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("kill(pid[, signal])")]),t._v(" 发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 'SIGINT' 或 'SIGHUP'。如果忽略，信号会是 'SIGTERM'。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("memoryUsage()")]),t._v(" 返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("nextTick(callback)")]),t._v(" 一旦当前事件循环结束，调用回调函数。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("umask([mask])")]),t._v(" 设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("uptime()")]),t._v(" 返回 Node 已经运行的秒数。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("17")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("hrtime()")]),t._v(" 返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。 你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。")])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);