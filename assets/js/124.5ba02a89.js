(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{556:function(l,n,i){"use strict";i.r(n);var e=i(2),t=Object(e.a)({},(function(){var l=this,n=l._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[n("h1",{attrs:{id:"优化spa应用的首屏加载速度慢的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优化spa应用的首屏加载速度慢的问题"}},[l._v("#")]),l._v(" 优化SPA应用的首屏加载速度慢的问题")]),l._v(" "),n("ul",[n("li",[l._v("将公用的JS库通过script标签外部引入，减小app.bundel的大小，让浏览器并行下载资源文件，提高下载速度；")]),l._v(" "),n("li",[l._v("在配置 路由时，页面和组件使用懒加载的方式引入，进一步缩小 app.bundel 的体积，在调用某个组件时再加载对应的js文件；")]),l._v(" "),n("li",[l._v("加一个首屏 loading 图，提升用户体验；")]),l._v(" "),n("li",[l._v("如果在webview中的页面，可以进行页面预加载")]),l._v(" "),n("li",[l._v("独立打包异步组件公共 Bundle，以提高复用性&缓存命中率")]),l._v(" "),n("li",[l._v("静态文件本地缓存，有两种方式分别为HTTP缓存，设置Cache-Control，Last-Modified，Etag等响应头和Service Worker离线缓存")]),l._v(" "),n("li",[l._v("配合 PWA 使用")]),l._v(" "),n("li",[l._v("SSR")]),l._v(" "),n("li",[l._v("去掉外链css")]),l._v(" "),n("li",[l._v("http缓存资源 cache-control > expires > etag > last-modified")]),l._v(" "),n("li",[l._v("使用动态 polyfill")]),l._v(" "),n("li",[l._v("使用 SplitChunksPlugin 自动拆分业务基础库，避免加载重复模块")]),l._v(" "),n("li",[l._v("使用 Tree Shaking 减少业务代码体积")]),l._v(" "),n("li",[l._v("懒加载：动态import，loaddable")]),l._v(" "),n("li",[l._v("把代码编译到 ES2015+")]),l._v(" "),n("li",[l._v("使用 lazyload 和 placeholder 提升加载体验")])]),l._v(" "),n("p",[l._v("另外")]),l._v(" "),n("p",[l._v("减少网络请求次数\n• 雪碧图\n• 避免图片src 为空，减少不必要的请求\n减少资源体积\n• js 压缩\n• css 压缩\n• code spliting (实现按需加载)\n• 使用外部js css ，减少当前html 文件体积\n延迟加载\n• 懒加载、预加载\n• webpack - import() 实现组件按需加载\n预加载\n使用CDN\n• webpack - externals ：将第三方依赖用CDN的方式引入，可使用其缓存的特性\nHTTP缓存\n• 强缓存\n• 协商缓存\n减少包的体积（空间换时间）\n• code split\n渲染性能\n• 避免回流\nSSR\n• 首屏服务端渲染\n避免重定向\n减少页面DOM数量\nDNS Prefetch")]),l._v(" "),n("p",[l._v("SEO • 合理的 title、description、keywords（三项的权重逐个减小） • 语义化的 HTML 标签 • 重要内容 HTML 代码放在最前，不要用 js 输出，少用 iframe（搜索引擎不会抓取子资源的内容） • 图片必须加 alt • 服务端渲染")])])}),[],!1,null,null,null);n.default=t.exports}}]);