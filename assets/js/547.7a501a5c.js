(window.webpackJsonp=window.webpackJsonp||[]).push([[547],{976:function(t,e,s){"use strict";s.r(e);var a=s(2),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"规范你的-git-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规范你的-git-commit"}},[t._v("#")]),t._v(" 规范你的 git commit")]),t._v(" "),e("p",[e("strong",[t._v("简介：")]),t._v(" commit message应该如何写才更清晰明了？团队开发中有没有遇到过让人头疼的git commit？本文分享在git commit规范建设上的实践，规定了commit message的格式，并通过webhook在提交时进行监控，避免不规范的代码提交。")]),t._v(" "),e("h3",{attrs:{id:"背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),e("p",[t._v("Git每次提交代码都需要写commit message，否则就不允许提交。一般来说，commit message应该清晰明了，说明本次提交的目的，具体做了什么操作……但是在日常开发中，大家的commit message千奇百怪，中英文混合使用、fix bug等各种笼统的message司空见怪，这就导致后续代码维护成本特别大，有时自己都不知道自己的fix bug修改的是什么问题。基于以上这些问题，我们希望通过某种方式来监控用户的git commit message，让规范更好的服务于质量，提高大家的研发效率。")]),t._v(" "),e("h3",{attrs:{id:"规范建设"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规范建设"}},[t._v("#")]),t._v(" 规范建设")]),t._v(" "),e("h4",{attrs:{id:"规范梳理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规范梳理"}},[t._v("#")]),t._v(" 规范梳理")]),t._v(" "),e("p",[t._v("初期我们在互联网上搜索了大量有关git commit规范的资料，但只有Angular规范是目前使用最广的写法，比较合理和系统化，并且有配套的工具（IDEA就有插件支持这种写法）。最后综合阿里巴巴高德地图相关部门已有的规范总结出了一套git commit规范。")]),t._v(" "),e("p",[e("strong",[t._v("commit message格式")])]),t._v(" "),e("div",{staticClass:"language-xml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("("),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("): "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("subject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[e("strong",[t._v("type(必须)")])]),t._v(" "),e("p",[t._v("用于说明git commit的类别，只允许使用下面的标识。")]),t._v(" "),e("p",[t._v("feat：新功能（feature）。")]),t._v(" "),e("p",[t._v("fix/to：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。")]),t._v(" "),e("ul",[e("li",[t._v("fix：产生diff并自动修复此问题。适合于一次提交直接修复问题")]),t._v(" "),e("li",[t._v("to：只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix")])]),t._v(" "),e("p",[t._v("docs：文档（documentation）。")]),t._v(" "),e("p",[t._v("style：格式（不影响代码运行的变动）。")]),t._v(" "),e("p",[t._v("refactor：重构（即不是新增功能，也不是修改bug的代码变动）。")]),t._v(" "),e("p",[t._v("perf：优化相关，比如提升性能、体验。")]),t._v(" "),e("p",[t._v("test：增加测试。")]),t._v(" "),e("p",[t._v("chore：构建过程或辅助工具的变动。")]),t._v(" "),e("p",[t._v("revert：回滚到上一个版本。")]),t._v(" "),e("p",[t._v("merge：代码合并。")]),t._v(" "),e("p",[t._v("sync：同步主线或分支的Bug。")]),t._v(" "),e("p",[e("strong",[t._v("scope(可选)")])]),t._v(" "),e("p",[t._v("scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。")]),t._v(" "),e("p",[t._v("例如在Angular，可以是location，browser，compile，compile，rootScope， ngHref，ngClick，ngView等。如果你的修改影响了不止一个scope，你可以使用*代替。")]),t._v(" "),e("p",[e("strong",[t._v("subject(必须)")])]),t._v(" "),e("p",[t._v("subject是commit目的的简短描述，不超过50个字符。")]),t._v(" "),e("p",[t._v("建议使用中文（感觉中国人用中文描述问题能更清楚一些）。")]),t._v(" "),e("ul",[e("li",[t._v("结尾不加句号或其他标点符号。")]),t._v(" "),e("li",[t._v("根据以上规范git commit message将是如下的格式：")])]),t._v(" "),e("div",{staticClass:"language-stylus extra-class"},[e("pre",{pre:!0,attrs:{class:"language-stylus"}},[e("code",[e("span",{pre:!0,attrs:{class:"token func"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DAO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("用户查询缺少username属性 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token func"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("feat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Controller"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("用户查询接口开发")]),t._v("\n")])])]),e("p",[t._v("以上就是我们梳理的git commit规范，那么我们这样规范git commit到底有哪些好处呢？")]),t._v(" "),e("ul",[e("li",[t._v("便于程序员对提交历史进行追溯，了解发生了什么情况。")]),t._v(" "),e("li",[t._v("一旦约束了commit message，意味着我们将慎重的进行每一次提交，不能再一股脑的把各种各样的改动都放在一个git commit里面，这样一来整个代码改动的历史也将更加清晰。")]),t._v(" "),e("li",[t._v("格式化的commit message才可以用于自动化输出Change log。")])]),t._v(" "),e("h4",{attrs:{id:"监控服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监控服务"}},[t._v("#")]),t._v(" 监控服务")]),t._v(" "),e("p",[t._v("通常提出一个规范之后，为了大家更好的执行规范，就需要进行一系列的拉通，比如分享给大家这种规范的优点、能带来什么收益等，在大家都认同的情况下最好有一些强制性的措施。当然git commit规范也一样，前期我们分享完规范之后考虑从源头进行强制拦截，只要大家提交代码的commit message不符合规范，直接不能提交。但由于代码仓库操作权限的问题，我们最终选择了使用webhook通过发送警告的形式进行监控，督促大家按照规范执行代码提交。除了监控git commit message的规范外，我们还加入了大代码量提交监控和删除文件监控，减少研发的代码误操作。")]),t._v(" "),e("p",[e("strong",[t._v("整体流程")])]),t._v(" "),e("ul",[e("li",[t._v("服务注册：服务注册主要完成代码库相关信息的添加。")]),t._v(" "),e("li",[t._v("重复校验：防止merge request再走一遍验证流程。")]),t._v(" "),e("li",[t._v("消息告警：对不符合规范以及大代码量提交、删除文件等操作发送告警消息。")]),t._v(" "),e("li",[t._v("DB：存项目信息和git commit信息便于后续统计commit message规范率。")])]),t._v(" "),e("p",[t._v("webhook是作用于代码库上的，用户提交git commit，push到仓库的时候就会触发webhook，webhook从用户的commit信息里面获取到commit message，校验其是否满足git commit规范，如果不满足就发送告警消息；如果满足规范，调用gitlab API获取提交的diff信息，验证提交代码量，验证是否有重命名文件和删除文件操作，如果存在以上操作还会发送告警消息，最后把所有记录都入库保存。")]),t._v(" "),e("h1",{attrs:{id:"git-commit-规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-规范"}},[t._v("#")]),t._v(" Git Commit 规范")]),t._v(" "),e("h2",{attrs:{id:"一、背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、背景"}},[t._v("#")]),t._v(" 一、背景")]),t._v(" "),e("p",[t._v("Git 规范")]),t._v(" "),e("h2",{attrs:{id:"二、git-commit-规范内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、git-commit-规范内容"}},[t._v("#")]),t._v(" 二、Git Commit 规范内容")]),t._v(" "),e("p",[t._v("2.1 Commit 原子性\n为了更好的跟踪提交历史以及回溯，要确保 commit 的“原子性”，每个 commit 要以适当的粒度包含且仅包“单项”改动，避免过多的临时 commit；提交代码时应该让每个commit都更具有意义，而不是散乱随意的commit。\n判断原则参考：commit 粒度尽量小，且只提交该单个 commit 时功能能正常运行。")]),t._v(" "),e("p",[t._v("正例：\n一个需求（或一个完整的功能）一个 commit，或者一个阶段性代码一个 commit。\n一项优化一个 commit。\n一个 issue 修复一个 commit。\n反例：\n一个需求（优化或者 Bugfix）进行了多次临时且无意义的 commit。\n两个或多个不相关的 Bugfix，没有分开进行 commit。\n将一天的无关联的工作都集中到一个 commit。\nSquash Commits\n基于 commit 原子性原则，应避免将过于零散的 commit 提交合并到主干分支。对于需求或者功能的 commit，尤其是在协作开发时，如果 commit 过于临时或零散，应整合成一个 commit 再提交到主干，确保主干历史简洁有用。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("squash commits 能有效减少rebase方式合并时的冲突，能简化解决冲突的过程；频繁临时的commit导致多个无意义提交，容易引起他人困惑。\n注意：已经合并到主干的 commit，不能进行 squash，改变主干（协作）分支历史会导致其他人无法正常同步。\nSquash Commits 方法参考")]),t._v(" "),e("ol",[e("li",[t._v("优先本地处理，使用 git rebase -i/--interactive。\nsquash commits 实现的核心是 git rebase，-i/--interactive 选项提供交互式的 rebase。使用方法参考：\nhttps://github.com/wprig/wprig/wiki/How-to-squash-commits\nhttps://www.internalpointers.com/post/squash-commits-into-one-git")]),t._v(" "),e("li",[t._v("使用 squash / fixup 来合并 commit")]),t._v(" "),e("li",[t._v("其次，可考虑用 Gitlab squash 选项：")])]),t._v(" "),e("p",[t._v("Tips to stash your work")]),t._v(" "),e("ol",[e("li",[t._v("如果你的工作经常被打断，导致出现许多临时的 commit，那么你可能需要善用 git stash 技巧。")])]),t._v(" "),e("p",[t._v("2.2 Commit Message 格式规范\n规范参考 https://www.conventionalcommits.org/en/v1.0.0/（由 Angular Commit 规范衍化而来），并结合直播中台客户端特点进行演变。\nMessage 整体格式")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- <type>(<scope>): <subject>\n<BLANK LINE />\n<body>\n<BLANK LINE />\n<footer> --\x3e")]),t._v("\n")])])]),e("p",[t._v("整体格式说明：")]),t._v(" "),e("ol",[e("li",[t._v("Commit message 都包括三个部分：Header，Body 和 Footer。")]),t._v(" "),e("li",[t._v("其中，Header 是必需的，Body 和 Footer 可以省略。")]),t._v(" "),e("li",[t._v("Header，Body 和 Footer 之前用空行分隔。")]),t._v(" "),e("li",[t._v("每一行内容长度都不能超过100个字符。")])]),t._v(" "),e("h1",{attrs:{id:"header-type-scope-subject-100-character-line"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#header-type-scope-subject-100-character-line"}},[t._v("#")]),t._v(" header: type(scope): subject，100-character line")]),t._v(" "),e("h1",{attrs:{id:"type-feat-fix-docs-style-refactor-test-chore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type-feat-fix-docs-style-refactor-test-chore"}},[t._v("#")]),t._v(" - type: feat, fix, docs, style, refactor, test, chore")]),t._v(" "),e("h1",{attrs:{id:"scope-can-be-empty-eg-if-the-change-is-a-global-or-difficult-to-assign-to-a-single-component"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scope-can-be-empty-eg-if-the-change-is-a-global-or-difficult-to-assign-to-a-single-component"}},[t._v("#")]),t._v(" - scope: can be empty (eg. if the change is a global or difficult to assign to a single component)")]),t._v(" "),e("h1",{attrs:{id:"subject-start-with-verb-such-as-change"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subject-start-with-verb-such-as-change"}},[t._v("#")]),t._v(" - subject: start with verb (such as 'change')")]),t._v(" "),e("h1",{attrs:{id:"body-100-character-wrapped-this-should-answer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#body-100-character-wrapped-this-should-answer"}},[t._v("#")]),t._v(" body: 100-character wrapped. This should answer:")]),t._v(" "),e("h1",{attrs:{id:"why-was-this-change-necessary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-was-this-change-necessary"}},[t._v("#")]),t._v(" * Why was this change necessary?")]),t._v(" "),e("h1",{attrs:{id:"how-does-it-address-the-problem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-does-it-address-the-problem"}},[t._v("#")]),t._v(" * How does it address the problem?")]),t._v(" "),e("h1",{attrs:{id:"are-there-any-side-effects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#are-there-any-side-effects"}},[t._v("#")]),t._v(" * Are there any side effects?")]),t._v(" "),e("h1",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),e("h1",{attrs:{id:"footer-reserved-field"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#footer-reserved-field"}},[t._v("#")]),t._v(" footer: reserved field")]),t._v(" "),e("h1",{attrs:{id:"breaking-change-description"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#breaking-change-description"}},[t._v("#")]),t._v(" - BREAKING CHANGE: description")]),t._v(" "),e("h1",{attrs:{id:"closes-123-245-992"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#closes-123-245-992"}},[t._v("#")]),t._v(" - Closes #123, #245, #992")]),t._v(" "),e("p",[t._v("Header（必需）\nHeader 部分只有一行，包括三个字段：type（必需）、scope（可选）和 subject（必需）。")]),t._v(" "),e("p",[t._v("type（必需）\ntype 用来说明 commit 的类别，只允许使用下面的标识：\nfeat: A new feature")]),t._v(" "),e("p",[t._v("fix: A bug fix（code、UI）")]),t._v(" "),e("p",[t._v("docs: Documentation only changes")]),t._v(" "),e("p",[t._v("perf: A code change that improves performance")]),t._v(" "),e("p",[t._v("refactor: A code change that neither fixes a bug nor adds a feature")]),t._v(" "),e("p",[t._v("style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)")]),t._v(" "),e("p",[t._v("test: Adding missing tests or correcting existing tests")]),t._v(" "),e("p",[t._v("build: Changes that affect the build system or external dependencies")]),t._v(" "),e("p",[t._v("ci: Changes to our CI configuration files and scripts")]),t._v(" "),e("p",[t._v("chore: Other changes that don't modify src or test files")]),t._v(" "),e("p",[t._v("revert: Reverts a previous commit. If the commit reverts a previous commit, it should begin with revert: , followed by the header of the reverted commit. In the body it should say: This reverts commit "),e("code",[t._v("hash")]),t._v("., where the hash is the SHA of the commit being reverted.\nChangelog 配置参考：如果 type 为 feat 和 fix ，则该 commit 信息将肯定出现在 change log 之中。其他情况（docs、chore、style、refactor、test）再定，建议是不要。")]),t._v(" "),e("p",[t._v("scope（可选）\nscope 用于说明 commit 影响的范围，比如影响哪个模块或者功能等。推荐按功能描述。")]),t._v(" "),e("p",[t._v("直播客户端 scope 参考：\n功能模块角度：")]),t._v(" "),e("ul",[e("li",[t._v("开播\n"),e("ul",[e("li",[t._v("视频开播")]),t._v(" "),e("li",[t._v("录屏开播\n"),e("ul",[e("li",[t._v("悬浮窗")])])]),t._v(" "),e("li",[t._v("PC开播")])])]),t._v(" "),e("li",[t._v("直播间\n"),e("ul",[e("li",[t._v("PK")]),t._v(" "),e("li",[t._v("连麦")]),t._v(" "),e("li",[t._v("公屏")]),t._v(" "),e("li",[t._v("弹幕")]),t._v(" "),e("li",[t._v("短效触达")]),t._v(" "),e("li",[t._v("礼物")]),t._v(" "),e("li",[t._v("礼物托盘")])])])]),t._v(" "),e("p",[t._v("技术模块角度：\nAndroid：")]),t._v(" "),e("p",[t._v("iOS：")]),t._v(" "),e("p",[t._v("subject（必需）\nsubject 是关于 commit 信息的简短描述。")]),t._v(" "),e("ol",[e("li",[t._v("以动词开头，使用第一人称现在时，比如change，而不是changed或changes。")]),t._v(" "),e("li",[t._v("第一个字母小写（英文）。")]),t._v(" "),e("li",[t._v("结尾不加句号（.）。")]),t._v(" "),e("li",[t._v("如果是针对某单一宿主的改动，要在这里描述清楚。")])]),t._v(" "),e("p",[t._v("Body（可选）\nBody 部分是针对本次 commit 的详细描述，内容较长时，要进行合理的换行，要表达清楚变动的动机以及与之前行为的对比。好的提交信息要回答下面的内容：")]),t._v(" "),e("ol",[e("li",[t._v("为什么要提交这次修改？")]),t._v(" "),e("li",[t._v("怎么解决的问题？")]),t._v(" "),e("li",[t._v("可能影响哪些内容？")])]),t._v(" "),e("p",[t._v("【推荐】：如果在 Body 需要附上相关连接（如 PRD、技术优化文档），以 ref: 为前缀，如 ref: url。")]),t._v(" "),e("p",[t._v("Footer（可选）（保留字段，暂不启用）\nFooter 部分只用于描述不兼容的变动和关闭 Issue。\nBREAKING CHANGE: 不兼容的变动\nCloses：关闭 Issue")]),t._v(" "),e("p",[t._v("根据目前直播中台客户端情况，Footer暂不启用。")]),t._v(" "),e("p",[t._v("Samples\nfeature:\nfeat: 完成xx红包功能")]),t._v(" "),e("p",[t._v("VCD 项目，目前只有xx有红包功能。\nref：PRD-url\nbugfix:\nfix(liveredpacket-impl): 修复抖火红包xxxx问题")]),t._v(" "),e("p",[t._v("fix: 修复滑动直播间快捷礼物消失的问题\nrefactor：\nrefactor(礼物)：重构礼物模块")]),t._v(" "),e("p",[t._v("完成礼物模块组件化，xxxxxx。\nref: 礼物组件化文档")]),t._v(" "),e("p",[t._v("Tips to change commit message\n如果你想修改本地不符合规范的 commit message，可以有多种方式供你选择：")]),t._v(" "),e("ol",[e("li",[t._v("git commit --amend：修改最后一次 commit。")]),t._v(" "),e("li",[t._v("git rebase -i HEAD~N：利用 rebase 修改最近的N次 commit。")]),t._v(" "),e("li",[t._v("git reset --soft "),e("code",[t._v("<commit hash>")]),t._v("：利用 reset --soft 恢复修改到暂存区，然后重新进行 commit，可以修改最近多次的 commit。")])]),t._v(" "),e("p",[t._v("使用方法参考：\nhttps://help.github.com/en/github/committing-changes-to-your-project/changing-a-commit-message\nhttps://linuxize.com/post/change-git-commit-message/\nhttps://gist.github.com/nepsilon/156387acf9e1e72d48fa35c4fabef0b4")]),t._v(" "),e("p",[t._v("注意：不要修改已合并到主干的 commit，改变主干（协作）分支历史会导致其他人无法正常同步。")]),t._v(" "),e("p",[t._v("2.3 Commit Message 英文化规范要求 by @Patrick （待定）\n随着国际化的发展，需要与海外的团队交流合作，git提交信息需要全用英文完成。\n根据上一节 Message整体格式，目前Header是必选的，包括三个字段：type（必需）、scope（可选）和 subject（必需），前两者参考前面定义，subject 是提交的简要信息描述，也是锻练大家英文的地方，这里再详细说明一下：")]),t._v(" "),e("ol",[e("li",[t._v("以动词开头，使用第一人称现在时，比如change，而不是changed或changes。")]),t._v(" "),e("li",[t._v("第一个字母小写（英文）。")]),t._v(" "),e("li",[t._v("结尾不加句号（.）。")])]),t._v(" "),e("p",[t._v("2.4 Commit Message Template")]),t._v(" "),e("h1",{attrs:{id:"type-feat-fix-docs-style-refactor-test-chore-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type-feat-fix-docs-style-refactor-test-chore-2"}},[t._v("#")]),t._v(" - type: feat, fix, docs, style, refactor, test, chore")]),t._v(" "),e("h1",{attrs:{id:"scope-can-be-empty-eg-if-the-change-is-a-global-or-difficult-to-assign-to-a-single-component-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scope-can-be-empty-eg-if-the-change-is-a-global-or-difficult-to-assign-to-a-single-component-2"}},[t._v("#")]),t._v(" - scope: can be empty (eg. if the change is a global or difficult to assign to a single component)")]),t._v(" "),e("h1",{attrs:{id:"subject-start-with-verb-such-as-change-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subject-start-with-verb-such-as-change-2"}},[t._v("#")]),t._v(" - subject: start with verb (such as 'change')")]),t._v(" "),e("h1",{attrs:{id:"-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")])]),t._v(" "),e("h1",{attrs:{id:"body-100-character-wrapped-this-should-answer-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#body-100-character-wrapped-this-should-answer-2"}},[t._v("#")]),t._v(" body: 100-character wrapped. This should answer:")]),t._v(" "),e("h1",{attrs:{id:"why-was-this-change-necessary-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-was-this-change-necessary-2"}},[t._v("#")]),t._v(" * Why was this change necessary?")]),t._v(" "),e("h1",{attrs:{id:"how-does-it-address-the-problem-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-does-it-address-the-problem-2"}},[t._v("#")]),t._v(" * How does it address the problem?")]),t._v(" "),e("h1",{attrs:{id:"are-there-any-side-effects-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#are-there-any-side-effects-2"}},[t._v("#")]),t._v(" * Are there any side effects?")]),t._v(" "),e("h1",{attrs:{id:"-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[t._v("#")])]),t._v(" "),e("h1",{attrs:{id:"footer-reserved-field-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#footer-reserved-field-2"}},[t._v("#")]),t._v(" footer: reserved field")]),t._v(" "),e("h1",{attrs:{id:"breaking-change-description-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#breaking-change-description-2"}},[t._v("#")]),t._v(" BREAKING CHANGE: description")]),t._v(" "),e("h1",{attrs:{id:"closes-123-245-992-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#closes-123-245-992-2"}},[t._v("#")]),t._v(" Closes #123, #245, #992")]),t._v(" "),e("h2",{attrs:{id:"三、commitlint-与-commitizen-使用教程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、commitlint-与-commitizen-使用教程"}},[t._v("#")]),t._v(" 三、commitlint 与 commitizen 使用教程")]),t._v(" "),e("p",[t._v("为了更方便的编写符合规范的 message，工程将会安装 commitizen 工具。使用方法请参考commitlint 与 commitizen 使用教程")])])}),[],!1,null,null,null);e.default=r.exports}}]);