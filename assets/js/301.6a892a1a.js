(window.webpackJsonp=window.webpackJsonp||[]).push([[301],{731:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-js-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-js-运算符"}},[t._v("#")]),t._v(" 1. JS 运算符")]),t._v(" "),a("p",[t._v("除了标准的算术运算符（+， - ，* /），JavaScript还提供了下表中的算术运算符。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Operator")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Description")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Example")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("求余( "),a("code",[t._v("%")]),t._v(" )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("二元运算符. 返回相除之后的余数.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("12 % 5 返回 2。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("自增( "),a("code",[t._v("++")]),t._v(" )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("一元运算符. 将操作数的值加一. 如果放在操作数前面 ( "),a("code",[t._v("++x")]),t._v(" ), 则返回加一后的值; 如果放在操作数后面 ( "),a("code",[t._v("x++")]),t._v(" ), 则返回操作数原值, 然后再将操作数加一.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("var x=3;")]),t._v(" "),a("code",[t._v("console.log(++x); //4")]),t._v(" "),a("code",[t._v("console.log(x); //4")]),t._v(" "),a("code",[t._v("var y=3;")]),t._v(" "),a("code",[t._v("console.log(y++); //3")]),t._v(" "),a("code",[t._v("console.log(y); //4")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("自减( "),a("code",[t._v("--")]),t._v(" )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("一元运算符. 将操作数的值减一. 前后缀两种用法的返回值类似自增运算符.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("var x=3; console.log(--x); //输入2, x=2var y=3; console.log(y--); //输出3, x=2;")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("一元负值符( "),a("code",[t._v("-")]),t._v(" )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("一元运算符, 返回操作数的负值.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("var x=3; console.log(-x); //输入-3")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("一元正值符(+)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("一元运算符, 如果操作数在之前不是number，试图将其转换为number")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("console.log( +'3' ); // 3")]),t._v(" "),a("code",[t._v("console.log( '3' ); // '3'")]),t._v(" console.log(+true); // 1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("指数运算符(**)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("计算 "),a("code",[t._v("base(底数)")]),t._v(" 的 "),a("code",[t._v("exponent(")]),t._v(" 指数 "),a("code",[t._v(")次方")]),t._v(" , 表示为 "),a("code",[t._v("baseexponent")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("2 ** 3")]),t._v(" returns "),a("code",[t._v("8")]),t._v(" . "),a("code",[t._v("10 ** -1")]),t._v(" returns "),a("code",[t._v("0.1")]),t._v(" .")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),a("h3",{attrs:{id:"位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),a("p",[t._v("位运算符将它的操作数视为32位元的二进制串（0和1组成）而非十进制八进制或十六进制数。例如：十进制数字9用二进制表示为1001，位运算符就是在这个二进制表示上执行运算，但是返回结果是标准的JavaScript数值。")]),t._v(" "),a("p",[t._v("下表总结了 JavaScript 的位运算符。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Operator")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Usage")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("按位与[ AND]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("a & b")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在a, b的位表示中，每一个对应的位都为1则返回1， 否则返回0.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("按位或[ OR]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("a | b")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在a, b的位表示中，每一个对应的位，只要有一个为1则返回1， 否则返回0.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("按位异或[ XOR]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("a ^ b")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在a, b的位表示中，每一个对应的位，两个不相同则返回1，相同则返回0.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("按位非[ NOT]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("~ a")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("反转被操作数的位。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("左移[ shift]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("a << b")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将a的二进制串向左移动b位, 右边移入0.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("算术右移")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("a >> b")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("把a的二进制表示向右移动b位，丢弃被移出的所有位.(译注: 算术右移左边空出的位是根据最高位是0和1来进行填充的)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("无符号右移(左边空出位用0填充)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("a >>> b")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("把a的二进制表示向右移动b位，丢弃被移出的所有位，并把左边空出的位都填充为0")])])])]),t._v(" "),a("h4",{attrs:{id:"位逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位逻辑运算符"}},[t._v("#")]),t._v(" 位逻辑运算符")]),t._v(" "),a("p",[t._v("概念上来讲, 位逻辑运算符工作流程如下:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("操作数被转换为32bit整數，以位序列（0和1组成）表示. 若超過32bits，則取低位32bit，如下所示：")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Before: 11100110111110100000000000000110000000000001 After: 10100000000000000110000000000001")])])]),t._v(" "),a("li",[a("p",[t._v("第一个操作数的每一位都与第二个操作数的对应位组对: 第一位对应第一位, 第二位对应第二位, 以此类推.")])]),t._v(" "),a("li",[a("p",[t._v('运算符被应用到每一对"位"上, 最终的运算结果由每一对“位”的运算结果组合起来.')])])]),t._v(" "),a("p",[t._v("例如, 十进制数9的二进制表示是1001, 十进制数15的二进制表示是1111. 因此, 当位运算符应用到这两个值时, 结果如下:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("表达式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("结果")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("二进制描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("15 & 9")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("9")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("1111 & 1001 = 1001")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("15 | 9")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("15")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("1111 | 1001 = 1111")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("15 ^ 9")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("6")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("1111 ^ 1001 = 0110")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("~15")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-16")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("~")]),t._v(" "),a("code",[t._v("00000000...")]),t._v(" "),a("code",[t._v("00001111 =")]),t._v(" "),a("code",[t._v("1111")]),t._v(" "),a("code",[t._v("1111")]),t._v(" "),a("code",[t._v("...")]),t._v(" "),a("code",[t._v("11110000")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("~9")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-10")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("~")]),t._v(" "),a("code",[t._v("00000000")]),t._v(" "),a("code",[t._v("...")]),t._v(" "),a("code",[t._v("0000")]),t._v(" "),a("code",[t._v("1001 =")]),t._v(" "),a("code",[t._v("1111")]),t._v(" "),a("code",[t._v("1111")]),t._v(" "),a("code",[t._v("...")]),t._v(" "),a("code",[t._v("1111")]),t._v(" "),a("code",[t._v("0110")])])])])]),t._v(" "),a("p",[t._v("注意位运算符“非”将所有的32位取反，而值的最高位(最左边的一位)为1则表示负数(2-补码表示法)。")]),t._v(" "),a("h4",{attrs:{id:"移位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移位运算符"}},[t._v("#")]),t._v(" 移位运算符")]),t._v(" "),a("p",[t._v("移位运算符带两个操作数：第一个是待移位的数，第二个是指定第一个数要被移多少位的数。移位的方向由运算符来控制.")]),t._v(" "),a("p",[t._v("移位运算符把操作数转为32bit整数，然后得出一个与待移位数相同种类的值。")]),t._v(" "),a("p",[t._v("移位运算符列表如下。")]),t._v(" "),a("p",[a("strong",[t._v("移位运算符")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("范例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("<<")]),t._v(" (左移位)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将第一个操作数向左移动指定数量的位. 左边移出位被抛弃. 左边移出的几位被丢弃. 右边多出的空位由0补齐")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("9<<2产生36，因为1001移位2比特向左变为100100，它是36。")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v(">>")]),t._v(" (带符号右移)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将第一个操作数向右移动指定数量的位. 右边移出位被抛弃. 左边多出的空位由原值的最左边数字补齐.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("9>>2产生2，因为1001移位2位向右变为10，其是2。同样，-9>>2产生-3，由于符号被保留。")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v(">>>")]),t._v(" (补零右移)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将第一个操作数向右移动指定数量的位. 右边移出位被抛弃. 左边多出的空位由0补齐.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("19>>>2")]),t._v(" 产生4，因为10011移位2位向右变为100，它是4。对非负数值，补零右移和带符号右移产生相同结果。")])])])]),t._v(" "),a("h3",{attrs:{id:"逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"}},[t._v("逻辑运算符"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("逻辑运算符常用于布尔（逻辑）值之间; 当操作数都是布尔值时，返回值也是布尔值。 不过实际上 "),a("code",[t._v("&&")]),t._v(" 和 "),a("code",[t._v("||")]),t._v(" 返回的是一个特定的操作数的值，所以当它用于非布尔值的时候，返回值就可能是非布尔值。 逻辑运算符的描述如下。")]),t._v(" "),a("p",[a("strong",[t._v("逻辑运算符")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("范例")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑与 "),a("code",[t._v("&&")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("expr1 && expr2")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("(逻辑与) 如果expr1能被转换为false，那么返回expr1；否则，返回 "),a("code",[t._v("expr2")]),t._v(" 。因此 "),a("code",[t._v("，&&")]),t._v(" 用于布尔值时，当操作数都为true时返回true；否则返回false.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑或 "),a("code",[t._v("||")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("expr1 || expr2")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("(逻辑或) 如果expr1能被转换为true，那么返回expr1；否则，返回 "),a("code",[t._v("expr2")]),t._v(" 。因此，||用于布尔值时，当任何一个操作数为true则返回true；如果操作数都是false则返回false。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑非 "),a("code",[t._v("(!)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("!expr")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("(逻辑非) 如果操作数能够转换为true则返回false；否则返回true。能被转换为 "),a("code",[t._v("false")]),t._v(" 的值有 "),a("code",[t._v("null")]),t._v(" , "),a("code",[t._v("0")]),t._v(" , "),a("code",[t._v("NaN")]),t._v(' , 空字符串("")和 '),a("code",[t._v("undefined")]),t._v(" 。（译者注：也可以称作”falsy“）")])])])]),t._v(" "),a("p",[t._v('下面是&&（逻辑"与"）操作符的示例。')]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t && t returns true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t && f returns false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f && t returns false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f && f returns false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cat"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t && t returns Dog")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cat"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f && t returns false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a7 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cat"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t && f returns false")]),t._v("\n")])])]),a("p",[t._v("Copy to Clipboard")]),t._v(" "),a("p",[t._v('下面是||（逻辑"或"）操作符的示例。')]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t || t returns true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f || t returns true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t || f returns true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f || f returns false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cat"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t || t returns Cat")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cat"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f || t returns Cat")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o7 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cat"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t || f returns Cat")]),t._v("\n")])])]),a("p",[t._v("Copy to Clipboard")]),t._v(" "),a("p",[t._v('下面是！（逻辑"非"）操作符的示例。')]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// !t returns false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// !f returns true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cat"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// !t returns false")]),t._v("\n")])])]),a("p",[t._v("Copy to Clipboard")]),t._v(" "),a("h4",{attrs:{id:"短路求值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短路求值"}},[t._v("#")]),t._v(" 短路求值")]),t._v(" "),a("p",[t._v("作为逻辑表达式进行求值是从左到右，它们是为可能的“短路”的出现而使用以下规则进行测试：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("false")]),t._v(" && "),a("em",[t._v("anything")]),t._v("  // 被短路求值为false")]),t._v(" "),a("li",[a("code",[t._v("true")]),t._v(" || "),a("em",[t._v("anything")]),t._v("    // 被短路求值为true")])]),t._v(" "),a("p",[t._v("逻辑的规则，保证这些评估是总是正确的。请注意，上述表达式的 "),a("code",[t._v("anything")]),t._v(" 部分不会被求值，所以这样做不会产生任何副作用。")]),t._v(" "),a("h3",{attrs:{id:"字符串运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串运算符"}},[t._v("#")]),t._v(" 字符串运算符")]),t._v(" "),a("p",[t._v("除了比较操作符，它可以在字符串值中使用，连接操作符（+）连接两个字符串值相连接，返回另一个字符串，它是两个操作数串的结合。")]),t._v(" "),a("h2",{attrs:{id:"这些-js-中强大的操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#这些-js-中强大的操作符"}},[t._v("#")]),t._v(" 这些 JS 中强大的操作符")]),t._v(" "),a("p",[t._v("JS 里的操作符大家每天都在使用，还有一些 ES2020、ES2021 新加的实用操作符，这些共同构成了 JS 灵活的语法生态。本文除介绍常用的操作符之外，还会介绍 JS 里一些不常用但是很强大的操作符，下面我们一起来看看吧～")]),t._v(" "),a("h2",{attrs:{id:"_1-数值分割符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数值分割符"}},[t._v("#")]),t._v(" 1. 数值分割符 _")]),t._v(" "),a("p",[t._v("ES2021 引入了数值分割符 "),a("code",[t._v("_")]),t._v(" ，在数值组之间提供分隔，使一个长数值读起来更容易。Chrome 已经提供了对数值分割符的支持，可以在浏览器里试起来。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100_0000_0000_0000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0太多了不用数值分割符眼睛看花了")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 100000000000000")]),t._v("\n")])])]),a("p",[t._v("此外，十进制的小数部分也可以使用数值分割符，二进制、十六进制里也可以使用数值分割符。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x11_1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 十六进制")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.11_1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 十进制的小数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b11_1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 二进制")]),t._v("\n")])])]),a("h2",{attrs:{id:"_2-逗号运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-逗号运算符"}},[t._v("#")]),t._v(" 2. 逗号运算符 ,")]),t._v(" "),a("p",[t._v("什么，逗号也可以是运算符吗？是的，曾经看到这样一个简单的函数，将数组的第一项和第二项调换，并返回两项之和：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 3，此时 list 为[2, 1]")]),t._v("\n")])])]),a("p",[t._v("逗号操作符对它的每个操作数求值（从左到右），并返回"),a("strong",[t._v("最后")]),t._v("一个操作数的值。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("expr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expr3"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("会返回最后一个表达式 "),a("code",[t._v("expr3")]),t._v(" 的结果，其他的表达式只会进行求值。")]),t._v(" "),a("h2",{attrs:{id:"_3-零合并操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-零合并操作符"}},[t._v("#")]),t._v(" 3. 零合并操作符 ??")]),t._v(" "),a("p",[t._v("零合并操作符 "),a("code",[t._v("??")]),t._v(" 是一个逻辑操作符，当左侧的操作数为 "),a("code",[t._v("null")]),t._v(" 或者 "),a("code",[t._v("undefined")]),t._v(" 时，返回右侧操作数，否则返回左侧操作数。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("expr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" expr2\n")])])]),a("p",[t._v("空值合并操作符一般用来为常量提供默认值，保证常量不为 "),a("code",[t._v("null")]),t._v(" 或者 "),a("code",[t._v("undefined")]),t._v(" ，以前一般使用 "),a("code",[t._v("||")]),t._v(" 来做这件事 "),a("code",[t._v("variable = variable || 'bar'")]),t._v(" 。然而，由于 "),a("code",[t._v("||")]),t._v(" 是一个布尔逻辑运算符，左侧的操作数会被强制转换成布尔值用于求值。任何假值（ "),a("code",[t._v("0")]),t._v(" ， "),a("code",[t._v("''")]),t._v(" ， "),a("code",[t._v("NaN")]),t._v(" ， "),a("code",[t._v("null")]),t._v(" ， "),a("code",[t._v("undefined")]),t._v(" ）都不会被返回。这导致如果你使用 "),a("code",[t._v("0")]),t._v(" 、 "),a("code",[t._v("''")]),t._v(" 、 "),a("code",[t._v("NaN")]),t._v(" 作为有效值，就会出现不可预料的后果。")]),t._v(" "),a("p",[t._v("正因为 "),a("code",[t._v("||")]),t._v(" 存在这样的问题，而 "),a("code",[t._v("??")]),t._v(" 的出现就是解决了这些问题， "),a("code",[t._v("??")]),t._v(" 只会在左侧为 "),a("code",[t._v("undefined")]),t._v(" 、 "),a("code",[t._v("null")]),t._v(" 时才返回后者， "),a("code",[t._v("??")]),t._v(" 可以理解为是 "),a("code",[t._v("||")]),t._v(" 的完善解决方案。")]),t._v(" "),a("p",[t._v("可以在浏览器中执行下面的代码感受一下：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'false'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),a("p",[t._v("另外在赋值的时候，可以运用赋值运算符的简写 "),a("code",[t._v("??=")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 { b: 20, c: 10 }")]),t._v("\n")])])]),a("h2",{attrs:{id:"_4-可选链操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-可选链操作符"}},[t._v("#")]),t._v(" 4. 可选链操作符 ?.")]),t._v(" "),a("p",[t._v("可选链操作符 "),a("code",[t._v("?.")]),t._v(" 允许读取位于连接对象链深处的属性的值，而不必验证链中的每个引用是否有效。 "),a("code",[t._v("?.")]),t._v(" 操作符的功能类似于 "),a("code",[t._v(".")]),t._v(" 链式操作符，不同之处在于，在引用为 "),a("code",[t._v("null")]),t._v(" 或者 "),a("code",[t._v("undefined")]),t._v(" 的情况下不会引起错误，该表达式短路返回值是 "),a("code",[t._v("undefined")]),t._v(" 。")]),t._v(" "),a("p",[t._v("当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 bar")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 undefined")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错，输出 undefined")]),t._v("\n")])])]),a("p",[t._v("以前可能会通过 "),a("code",[t._v("obj && obj.a && obj.a.b")]),t._v(" 来获取一个深度嵌套的子属性，现在可以直接 "),a("code",[t._v("obj?.a?.b")]),t._v(" 即可。")]),t._v(" "),a("p",[t._v("可选链除了可以用在获取对象的属性，还可以用在数组的索引 "),a("code",[t._v("arr?.[index]")]),t._v(" ，也可以用在函数的判断 "),a("code",[t._v("func?.(args)")]),t._v(" ，当尝试调用一个可能不存在的方法时也可以使用可选链。")]),t._v(" "),a("p",[t._v("调用一个对象上可能不存在的方法时（版本原因或者当前用户的设备不支持该功能的场景下），使用可选链可以使得表达式在函数不存在时返回 "),a("code",[t._v("undefined")]),t._v(" 而不是直接抛异常。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" someInterface"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("customFunc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"_5-私有方法-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-私有方法-属性"}},[t._v("#")]),t._v(" 5. 私有方法/属性")]),t._v(" "),a("p",[t._v("在一个类里面可以给属性前面增加 "),a("code",[t._v("#")]),t._v(" 私有标记的方式来标记为私有，除了属性可以被标记为私有外， "),a("code",[t._v("getter/setter")]),t._v(" 也可以标记为私有，方法也可以标为私有。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDesc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("#name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("#getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("#getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("#age\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有方法")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("#name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有访问器")]),t._v("\n    #age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined 直接访问不到")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDesc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foo 23")]),t._v("\n")])])]),a("h2",{attrs:{id:"_6-位运算符-与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-位运算符-与"}},[t._v("#")]),t._v(" 6. 位运算符 >> 与 >>>")]),t._v(" "),a("p",[t._v("有符号右移操作符 "),a("code",[t._v(">>")]),t._v(" 将第一个操作数向右移动指定的位数，多余的位移到右边被丢弃，高位补其符号位，正数补 0，负数则补 1。因为新的最左位与前一个最左位的值相同，所以符号位（最左位）不会改变。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "11"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "-100" 感觉跟直觉不一样')]),t._v("\n")])])]),a("p",[t._v("正数的好理解，负数怎么理解呢，负数在计算机中存储是按照补码来存储的，补码的计算方式是取反加一，移位时将补码形式右移，最左边补符号位，移完之后再次取反加一求补码获得处理后的原码。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 真值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0000111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原码（高位的0无所谓，后面加不到）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1111001")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 补码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1111100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 算数右移")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0000100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移位后求补码获得原码")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移位后的真值")]),t._v("\n")])])]),a("p",[t._v("一般我们用 "),a("code",[t._v(">>")]),t._v(" 来将一个数除 2，相当于先舍弃小数位然后进行一次 "),a("code",[t._v("Math.floor")]),t._v(" ：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6 相当于")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13.9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -7 相当于")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13.9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -7")]),t._v("\n")])])]),a("p",[t._v("无符号右移操作符 "),a("code",[t._v(">>>")]),t._v(" ，将符号位作为二进制数据的一部分向右移动，高位始终补 0，对于正整数和算数右移没有区别，对于负数来说由于符号位被补 0，成为正数后就不用再求补码了，所以结果总是非负的。即便右移 0 个比特，结果也是非负的。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "11"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1111111111111111111111111111100"')]),t._v("\n")])])]),a("p",[t._v("可以这样去理解")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 真值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("000000000000000000000000000111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("111111111111111111111111111001")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 补码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("111111111111111111111111111100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 算数右移（由于右移后成为正数，就不要再求补码了）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741820")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移位后的真值")]),t._v("\n")])])]),a("p",[t._v("左移运算符 "),a("code",[t._v("<<")]),t._v(" 与之类似，左移很简单左边移除最高位，低位补 0：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b1111111111111111111111111111100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "-1000"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b1111111111111111111111111111100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "-1000"')]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("PS：JS 里面没有无符号左移，而且其他语言比如 JAVA 也没有无符号左移。")])]),t._v(" "),a("h2",{attrs:{id:"_7-位运算符-与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-位运算符-与"}},[t._v("#")]),t._v(" 7. 位运算符 & 与 |")]),t._v(" "),a("p",[t._v("位运算符是按位进行运算， "),a("code",[t._v("&")]),t._v(" 与、 "),a("code",[t._v("|")]),t._v(" 或、 "),a("code",[t._v("~")]),t._v(" 非、 "),a("code",[t._v("^")]),t._v(" 按位异或：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1010")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1010")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1010")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1010")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0110")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0110")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0110")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0010")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1110")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0101")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1100")]),t._v("\n")])])]),a("p",[t._v("使用位运算符时会抛弃小数位，我们可以利用这个特性来给数字取整，比如给任意数字 "),a("code",[t._v("&")]),t._v(" 上二进制的 32 个 1，或者 "),a("code",[t._v("|")]),t._v(" 上 0，显而易见后者简单些。")]),t._v(" "),a("p",[t._v("所以我们可以对一个数字 "),a("code",[t._v("| 0")]),t._v(" 来取整，负数也同样适用")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -1")]),t._v("\n")])])]),a("p",[t._v("判断奇偶数除了常见的取余 "),a("code",[t._v("% 2")]),t._v(" 之外，也可以使用 "),a("code",[t._v("& 1")]),t._v(" ，来判断二进制数的最低位是不是 1，这样除了最低位之外都被置 0，取余的结果只剩最低位，是不是很巧妙。负数也同样适用：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h2",{attrs:{id:"_8-双位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-双位运算符"}},[t._v("#")]),t._v(" 8. 双位运算符 ~~")]),t._v(" "),a("p",[t._v("可以使用双位操作符来替代正数的 "),a("code",[t._v("Math.floor( )")]),t._v(" ，替代负数的 "),a("code",[t._v("Math.ceil( )")]),t._v(" 。双否定位操作符的优势在于它执行相同的操作运行速度更快。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 简写为：")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("不过要注意，对正数来说 "),a("code",[t._v("~~")]),t._v(" 运算结果与 "),a("code",[t._v("Math.floor( )")]),t._v(" 运算结果相同，而对于负数来说与 "),a("code",[t._v("Math.ceil( )")]),t._v(" 的运算结果相同：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -4")]),t._v("\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -5")]),t._v("\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -4")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("PS：注意 "),a("code",[t._v("~~(num/2)")]),t._v(" 方式和 "),a("code",[t._v("num >> 1")]),t._v(" 在值为负数时的差别")])]),t._v(" "),a("h2",{attrs:{id:"_9-短路运算符-与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-短路运算符-与"}},[t._v("#")]),t._v(" 9. 短路运算符 && 与 ||")]),t._v(" "),a("p",[t._v("我们知道逻辑与 "),a("code",[t._v("&&")]),t._v(" 与逻辑或 "),a("code",[t._v("||")]),t._v(" 是短路运算符，短路运算符就是从左到右的运算中前者满足要求，就不再执行后者了。")]),t._v(" "),a("p",[t._v("可以理解为：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("&&")]),t._v(" 为取假运算，从左到右依次判断，如果遇到一个假值，就返回假值，以后不再执行，否则返回最后一个真值")]),t._v(" "),a("li",[a("code",[t._v("||")]),t._v(" 为取真运算，从左到右依次判断，如果遇到一个真值，就返回真值，以后不再执行，否则返回最后一个假值")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" param1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" expr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" expr2\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" param2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" expr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" expr2\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("示例")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("&&")])]),t._v(" "),a("td",[a("code",[t._v("expr1&&expr2")])]),t._v(" "),a("td",[t._v("如果 expr1 能转换成 false 则返回 expr1，否则返回 expr2。 因此，在 Boolean 环境中使用时, 两个操作结果都为 true 时返回 true，否则返回 false")])]),t._v(" "),a("tr",[a("td",[t._v("||")]),t._v(" "),a("td",[t._v("expr1||expr2")]),t._v(" "),a("td",[t._v("如果 expr1 能转换成 true 则返回 expr1，否则返回 expr2。 因此, 在 boolean 环境(在if的条件判断中)中使用时, 二者操作结果中只要有一个为 true, 返回 true；二者操作结果都为 false 时返回 false")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("!")])]),t._v(" "),a("td",[a("code",[t._v("!expr")])]),t._v(" "),a("td",[t._v("如果单个表达式能转换为 true 的话返回 false，否则返回 true")])])])]),t._v(" "),a("p",[t._v("因此可以用来做很多有意思的事，比如给变量赋初值：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" variable1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" variable2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" variable1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v("\n")])])]),a("p",[t._v("如果 "),a("code",[t._v("variable1")]),t._v(" 是真值就直接返回了，后面短路就不会被返回了，如果为假值，则会返回后面的 "),a("code",[t._v("foo")]),t._v(" 。")]),t._v(" "),a("p",[t._v("也可以用来进行简单的判断，取代冗长的 "),a("code",[t._v("if")]),t._v(" 语句：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" variable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有了可选链之后可以直接 param?.prop")]),t._v("\n")])])]),a("p",[t._v("如果 "),a("code",[t._v("param")]),t._v(" 如果为真值则返回 "),a("code",[t._v("param.prop")]),t._v(" 属性，否则返回 "),a("code",[t._v("param")]),t._v(" 这个假值，这样在某些地方防止 "),a("code",[t._v("param")]),t._v(" 为 "),a("code",[t._v("undefined")]),t._v(" 的时候还取其属性造成报错。")]),t._v(" "),a("h2",{attrs:{id:"_10-void-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-void-运算符"}},[t._v("#")]),t._v(" 10. void 运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("void` 运算符 对给定的表达式进行求值，然后返回 `undefined\n")])])]),a("p",[t._v("可以用来给在使用立即调用的函数表达式（IIFE）时，可以利用 "),a("code",[t._v("void")]),t._v(" 运算符让 JS 引擎把一个 "),a("code",[t._v("function")]),t._v(" 关键字识别成函数表达式而不是函数声明。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iife")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错，因为JS引擎把IIFE识别为了函数声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iife")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正常调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iife")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也可以使用一个位操作符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iife")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者干脆用括号括起来表示为整体的表达式")]),t._v("\n")])])]),a("p",[t._v("还可以用在箭头函数中避免传值泄漏，箭头函数，允许在函数体不使用括号来直接返回值。这个特性给用户带来了很多便利，但有时候也带来了不必要的麻烦，如果右侧调用了一个原本没有返回值的函数，其返回值改变后，会导致非预期的副作用。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("customMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 特别是给一个事件或者回调函数传一个函数时")]),t._v("\n")])])]),a("p",[t._v("安全起见，当不希望函数返回值是除了空值以外其他值，应该使用 "),a("code",[t._v("void")]),t._v(" 来确保返回 "),a("code",[t._v("undefined")]),t._v(" ，这样，当 customMethod 返回值发生改变时，也不会影响箭头函数的行为。")]),t._v(" "),a("h2",{attrs:{id:"_11-其他常用操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-其他常用操作符"}},[t._v("#")]),t._v(" 11. 其他常用操作符")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("三元表达式")]),t._v("：很简单了，大家经常用，"),a("code",[t._v("expr ? expr1 : expr2")]),t._v(" 如果 "),a("code",[t._v("expr")]),t._v(" 为真值则返回 "),a("code",[t._v("expr1")]),t._v("，否则返回 "),a("code",[t._v("expr2")])]),t._v(" "),a("li",[a("strong",[t._v("赋值运算符简写")]),t._v("：加法赋值 "),a("code",[t._v("+=")]),t._v("、减法赋值 "),a("code",[t._v("-=")]),t._v("、乘法赋值 "),a("code",[t._v("*=")]),t._v("、除法赋值 "),a("code",[t._v("/=")]),t._v("、求幂赋值 "),a("code",[t._v("**=")]),t._v("、按位或复制 "),a("code",[t._v("|=")]),t._v("、按位与赋值 "),a("code",[t._v("&=")]),t._v("、有符号按位右移赋值 "),a("code",[t._v(">>=")]),t._v("、无符号按位右移赋值 "),a("code",[t._v(">>>=")]),t._v("、逻辑空赋值 "),a("code",[t._v("??=")]),t._v(" ....")]),t._v(" "),a("li",[a("strong",[t._v("求幂运算符")]),t._v("："),a("code",[t._v("var1 ** var2")]),t._v(" 相当于 "),a("code",[t._v("Math.pow")]),t._v("，结果为 "),a("code",[t._v("var1")]),t._v(" 的 "),a("code",[t._v("var2")]),t._v(" 次方")])]),t._v(" "),a("h2",{attrs:{id:"_12-操作符优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-操作符优先级"}},[t._v("#")]),t._v(" 12. 操作符优先级")]),t._v(" "),a("p",[t._v("正因为有操作符优先级，所以 "),a("code",[t._v("variable = 1, 2")]),t._v(" 的含义是将变量先赋值为 1，再返回数字 2，而不是变量赋值给 "),a("code",[t._v("1, 2")]),t._v(" 的返回值 2，这是因为 "),a("code",[t._v("=")]),t._v(" 运算符的优先级高于 "),a("code",[t._v(",")]),t._v(" 逗号运算符。再比如表达式 "),a("code",[t._v("6 - 2 * 3 === 0 && 1")]),t._v(" ， "),a("code",[t._v("- * === &&")]),t._v(" 这四个运算符优先级最高的 "),a("code",[t._v("*")]),t._v(" 先运算，然后 "),a("code",[t._v("-")]),t._v(" 运算符结果为 0， "),a("code",[t._v("===")]),t._v(" 运算符优先级高于 "),a("code",[t._v("&&")]),t._v(" 而 "),a("code",[t._v("true && 1")]),t._v(" 的结果为 1，所以这就是运算的结果。")]),t._v(" "),a("p",[t._v("下面的表将运算符按照优先级的不同从高（20）到低（1）排列，但这个不是最新的，至少没包括可选链，建议参考"),a("a",{attrs:{href:"https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2FSHERlocked93%2Fblog%2Fissues%2F1",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个表"),a("OutboundLink")],1),t._v("或者 "),a("a",{attrs:{href:"https://link.segmentfault.com/?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FOperator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("网上的帖子大多深浅不一，甚至有些前后矛盾，在下的文章都是学习过程中的总结，如果发现错误，欢迎留言指出。")]),t._v(" "),a("blockquote",[a("p",[t._v("参考文档：")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[t._v("运算符优先级 - JavaScript | MDN"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844903641468403726",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS 中可以提升幸福度的小技巧"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/345118267",target:"_blank",rel:"noopener noreferrer"}},[t._v("这些 JS 中强大的操作符，总有几个你没听说过"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/336093302",target:"_blank",rel:"noopener noreferrer"}},[t._v("4个未听说过的强大JavaScript操作符"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/22297104",target:"_blank",rel:"noopener noreferrer"}},[t._v("聊聊JavaScript中的二进制数"),a("OutboundLink")],1)])])])])}),[],!1,null,null,null);a.default=n.exports}}]);