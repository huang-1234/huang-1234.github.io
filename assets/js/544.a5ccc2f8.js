(window.webpackJsonp=window.webpackJsonp||[]).push([[544],{979:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"各种场景下正确使用git命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#各种场景下正确使用git命令"}},[t._v("#")]),t._v(" 各种场景下正确使用git命令")]),t._v(" "),s("p",[t._v("该问题的背景就在于我破坏了一个原则："),s("code",[t._v("每次建立分支，或者切换分支前，都需要把当前的修改提交，否则切换到其他分支也能 看到这些未提交的修改，working directory 下的文件不会恢复到指定文档的版本.")])]),t._v(" "),s("blockquote",[s("p",[t._v("当我完成ch1分支的工作，但是我在还没有commit的情况下，却使用git checkout master切换到了master分支，导致我ch1的工作内容一下子就到了master分支上去。当时我就很疑惑。")])]),t._v(" "),s("h2",{attrs:{id:"git如何在不提交当前分支的情况下切换到其它分支进行操作-git-stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git如何在不提交当前分支的情况下切换到其它分支进行操作-git-stash"}},[t._v("#")]),t._v(" Git如何在不提交当前分支的情况下切换到其它分支进行操作——git stash")]),t._v(" "),s("p",[t._v("假如现在的Bug你还没有解决，而上边又给你派了一个新的Bug，而这个Bug相比较现在正在苦思冥想的Bug比较容易解决。")]),t._v(" "),s("p",[t._v("你想先解决新的Bug，可是之前的Bug还没有解决完而不能提交。怎么办?")]),t._v(" "),s("p",[t._v("解决方法：在其他分支上另开炉灶解决。")]),t._v(" "),s("p",[t._v("首先你需要将此刻正在解决Bug的当前分支“储藏”起来。例假如此时正在你在当前分支dev上已进行了Bug修改但还未提交。")]),t._v(" "),s("p",[t._v("此时你想去解决刚派下来的另一个Bug。而你需要在master分支上去修复这个Bug，第一步就需要先切换到master 分支。当你执行 $ git checkout master 命令的时候，将提示出错：")]),t._v(" "),s("p",[t._v("error: Your local changes to the following files would be overwritten by checkout:\nreadme.txt\nPlease commit your changes or stash them before you switch branches.")]),t._v(" "),s("p",[t._v("（请在切换分支之前提交您的更改或隐藏它们）")]),t._v(" "),s("p",[t._v("因为当前的分支dev 最初也是从master 分支上衍生出来的。而此时你要再从该分支上切换到其主分支。那么你需要先把该dev分支上的改动提交后才能切换，但是该dev分支上还没有完成全部的修改，你不想提交。那么此时你就要选择 stash 它们（你在当前分支上改动的却没有提交commit的内容）。")]),t._v(" "),s("blockquote",[s("p",[t._v("所以第二步，在当前分支上执行  $ git stash 命令。将当前分支存起来，id为 8528ea2 s")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13770")]),t._v("@HSQ MINGW64 /g/Study/Code/Web/NodeJS/learnFrontTest/Git/first_learn_git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\nSaved working directory and index state WIP on ch1: cc89460 del main.js p120\n")])])]),s("blockquote",[s("p",[t._v("使用错误的stash命令会显示stash的各种命令")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13770")]),t._v("@HSQ MINGW64 /g/Study/Code/Web/NodeJS/learnFrontTest/Git/first_learn_git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash cc89460\nfatal: unknown subcommand: cc89460\n\nusage: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   or: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash show "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   or: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--quiet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   or: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" apply "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--quiet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   or: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchname"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   or: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("\n   or: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("push "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("keep-index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--quiet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-u"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--include-untracked"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--pathspec-from-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--pathspec-file-nul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("pathspec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   or: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash save "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("keep-index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--quiet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-u"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--include-untracked"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("正确使用stash回复命令$ git stash apply stash@{cc89460}")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13770")]),t._v("@HSQ MINGW64 /g/Study/Code/Web/NodeJS/learnFrontTest/Git/first_learn_git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply stash@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("cc89460"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nOn branch ch1\nChanges not staged "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git restore <file>..."')]),t._v(" to discard changes "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        modified:   t1.txt\n\nno changes added to commit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" and/or "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit -a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("一、用 $ git stash apply 命令恢复，但是恢复后，stash内容并不删除，这时候再执行")]),t._v(" "),s("p",[t._v("$ git stash list 命令，id 为  8528ea2 s 的储藏项目还会在列表中，你需要用")]),t._v(" "),s("p",[t._v("$ git stash drop 来删除；")]),t._v(" "),s("p",[t._v("注意： 如果有一个分支上多个 stash，如果需要恢复指定的 stash ，可以在命令尾部加id，如  $ git stash apply stash@{0}，同样删除指定 stash 项目则执行如")]),t._v(" "),s("p",[t._v("$ git stash drop stash@{1}  。")]),t._v(" "),s("p",[t._v("二、用  $ git stash pop  命令，恢复的同时把 stash 存储列表的内容也删了。这时候再执行")]),t._v(" "),s("p",[t._v("$ git stash list 命令，id 为  8528ea2 s 的储藏项目不会在列表中。")]),t._v(" "),s("p",[t._v("此时再查看 $ cat  "),s("code",[t._v("<filename>")]),t._v("  会发现之前的改动还存在，且执行 git status 就会继续显示该分支上有改动未提交。")]),t._v(" "),s("h3",{attrs:{id:"误删stash-git-stash-clear"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#误删stash-git-stash-clear"}},[t._v("#")]),t._v(" 误删stash：git stash clear")]),t._v(" "),s("p",[t._v("前言：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git fsck")]),t._v(" & "),s("code",[t._v("git stash apply <commit_id>")]),t._v(" ：针对 stash 存储的误删")]),t._v(" "),s("li",[s("code",[t._v("git checkout -- <file>")]),t._v(" ：针对工作区的修改")]),t._v(" "),s("li",[s("code",[t._v("git reset")]),t._v(" ：针对暂存区的修改")])]),t._v(" "),s("h3",{attrs:{id:"fsck-针对-stash-存储的误删"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fsck-针对-stash-存储的误删"}},[t._v("#")]),t._v(" fsck —— 针对 stash 存储的误删")]),t._v(" "),s("p",[t._v("在不同的公司，技术团队在代码仓库中的协同工作流程可能会有不同。我公司就是在 dev 分支上进行开发，合并更新的流程基本就是下面：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("git stash")]),t._v(" 存储自己在 dev 上做的修改（新建的文件是不会被存储起来的）")]),t._v(" "),s("li",[s("code",[t._v("git pull")]),t._v(" 拉取远程仓库中的 dev 的更新")]),t._v(" "),s("li",[s("code",[t._v("git stash pop")]),t._v(" 弹出存储的修改（有冲突的话就解决冲突）")]),t._v(" "),s("li",[t._v("然后就是添加文件并提交修改那些操作。")])]),t._v(" "),s("p",[t._v("那么我在工作中，遇到最让我窒息、心痛如绞的事情就是：我亲手把自己 stash 的修改给 clear 了……….")]),t._v(" "),s("p",[t._v("神操作如下：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("啊，终于可以提交了，我先 "),s("code",[t._v("git stash")]),t._v(" 存起来先")])]),t._v(" "),s("li",[s("p",[t._v("那么接下来查查看我的存储仓记录 "),s("code",[t._v("git stash clear")]),t._v(" （一失足成千古恨）")])]),t._v(" "),s("li",[s("p",[t._v("嗯？为什么没有显示存储记录？")])]),t._v(" "),s("li",[s("p",[t._v("？？？我执行了 "),s("code",[t._v("git stash clear")]),t._v(" ？？？ CLEAR？？？？我不是要 "),s("code",[t._v("git stash list")]),t._v(" 的吗？？？")])]),t._v(" "),s("li",[s("p",[t._v("我不信，一定没有清空掉的， "),s("code",[t._v("git stash list")]),t._v(" ………\n(Sorry, the list you checked is empty. Du… Du… Du…)")])]),t._v(" "),s("li",[s("p",[t._v("我还是不信，可能我没有 stash 到，还在工作区里。 "),s("code",[t._v("git status")]),t._v(" ……..\n(Sorry, the list you checked is empty. Du… Du… Du…)")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("git fsck")])]),t._v(" 查询仓库中所有未被其他对象引用的对象，这密密麻麻地列出了一摞（我记得当时不是时间顺序排序的，但是今天一看好像又是时间顺序的）。")])]),t._v(" "),s("li",[s("p",[t._v("于是我只能 "),s("strong",[s("code",[t._v("git show <commit_id>")])]),t._v(" 一个个打开来看。")])]),t._v(" "),s("li",[s("p",[t._v("经过漫长的版本查找后，我终于找到了离上一次修改最近的记录！最后 "),s("strong",[s("code",[t._v("git stash apply <commit_id>")])]),t._v(" 。谢天谢地，回来了！")])])]),t._v(" "),s("h3",{attrs:{id:"checkout-针对工作区的修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#checkout-针对工作区的修改"}},[t._v("#")]),t._v(" checkout —— 针对工作区的修改")]),t._v(" "),s("p",[t._v("对于在工作区的修改，还没执行 "),s("code",[t._v("git add")]),t._v(" 等操作，此时若是想放弃工作区的全部修改，只需要：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("需要撤销修改的文件名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("注意：这个不针对 Untracked 的文件哦～")]),t._v(" "),s("h3",{attrs:{id:"reset-针对暂存区的修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reset-针对暂存区的修改"}},[t._v("#")]),t._v(" reset —— 针对暂存区的修改")]),t._v(" "),s("p",[t._v("对于刚执行完 "),s("code",[t._v("git add")]),t._v(" 把文件添加到暂存区的修改，此时若是想放弃暂存区某个文件的修改，只需要：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset HEAD <需要撤销修改的文件名>\n")])])]),s("p",[t._v("而如果你已经执行了 "),s("code",[t._v("git commit")]),t._v(" 将这些暂存区的文件提交，那你只能：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset --hard HEAD^                ## 将 HEAD 回退到上一个版本\ngit reset --hard HEAD@{<index>}       ## 将 HEAD 回退到第 index 个版本\ngit reset --hard <commit_id>          ## 将 HEAD 指向指定的 commit_id 版本\n\ngit log         ## 查看提交的历史\ngit reflog      ## 查看 HEAD 移动的历史记录，从而回到任意版本\n")])])]),s("p",[t._v("注意：这个操作非常危险！⚠️如果你的工作区中还有已跟踪的修改文件未提交，执行这个操作将会丢失你的这些文件！")]),t._v(" "),s("h2",{attrs:{id:"vue的响应式原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue的响应式原理"}},[t._v("#")]),t._v(" Vue的响应式原理")]),t._v(" "),s("p",[t._v("我们都知道， Vue 最大的特点之一就是响应式的双向绑定。那么它的实现原理是怎么样的呢？无论是深入学习 Vue 框架也好，还是作为一个面试常考题也好，这都是前端必须了解的一个问题。那么我们今天就来探索一下它的实现方法。")]),t._v(" "),s("h3",{attrs:{id:"模拟实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模拟实现"}},[t._v("#")]),t._v(" 模拟实现")]),t._v(" "),s("p",[t._v("Vue 在它的官网中就已经有对它的这个「双向绑定」特性进行说明。\b详情请戳"),s("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/reactivity.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),s("OutboundLink")],1),t._v("。我们可以看到， Vue 会遍历实例的 "),s("code",[t._v("data")]),t._v(" 对象的所有属性，并使用 "),s("code",[t._v("Object.defineProperty")]),t._v(" 把这些属性全部转为 "),s("code",[t._v("getter")]),t._v(" / "),s("code",[t._v("setter")]),t._v("。根据 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),s("OutboundLink")],1),t._v(" 的介绍，我尝试着使用这个方法来做一个简单的模拟实现：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var $person1 = {},   // 模拟 vm.$data\n  person1 = { name: 'caaa' }  // 模拟我们在 Vue 中的 data 选项\n\nObject.defineProperty($person1, 'name', {\n  get() { return person1.name },\n  set(val) {\n    person1.name = val\n    // 执行某些操作实现 DOM 局部更新\n    console.log('发生了更新')\n  }\n})\n\n$person1.name             // 'caaa'\n$person1.age              // undefined\n\n/* 改变 $person1.name */\n$person1.name = 'jack'    // '发生了更新'\n$person1.name             // 'jack'\nperson1.name              // 'jack'\n")])])]),s("h3",{attrs:{id:"局限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局限"}},[t._v("#")]),t._v(" 局限")]),t._v(" "),s("p",[t._v("通过上面的例子，我们知道了 Vue 是如何实现响应式原理的，但是「受现代 JavaScript 的限制，Vue 不能检测到对象属性的添加或删除。」例如说，我们对上面的 "),s("code",[t._v("$person1")]),t._v(" 添加一个属性：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/* 为 $person1 添加 age 属性 */\n$person1.age = 18\n$person1.age              // 18\nperson1.age               // undefined\n")])])]),s("p",[t._v("我们可以看到，即使已经改变了 "),s("code",[t._v("$person1.age")]),t._v(" ， "),s("code",[t._v("person1.age")]),t._v(" 也依旧没有变化。这是因为 "),s("code",[t._v("$person1.age")]),t._v(" 是一个非响应的属性，它并没有 "),s("code",[t._v("setter")]),t._v(" 来对它进行追踪。也就是说 "),s("code",[t._v("$person1.age = 18")]),t._v(" 其实等同于：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$person1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'age'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("enumerable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("writable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("那么要如何在 Vue 中为已创建的实例动态添加新的根级响应式属性呢？ Vue 提供的一个方法是 "),s("code",[t._v("Vue.set(object, key, value)")]),t._v(" 。这里不详细举例说明，有兴趣的可以自己去尝试一下。")]),t._v(" "),s("p",[t._v("我想展开讲的是， Vue 3.0 中对于响应式数据的更新。")])])}),[],!1,null,null,null);s.default=n.exports}}]);