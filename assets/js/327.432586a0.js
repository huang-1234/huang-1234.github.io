(window.webpackJsonp=window.webpackJsonp||[]).push([[327],{757:function(t,n,a){"use strict";a.r(n);var e=a(2),s=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"undefined-与-null-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#undefined-与-null-的区别"}},[t._v("#")]),t._v(" undefined 与 null 的区别")]),t._v(" "),n("p",[t._v('大多数计算机语言，有且仅有一个表示"无"的值，比如，C 语言的 NULL，Java 语言的 null，Python 语言的 None，Ruby 语言的 nil。')]),t._v(" "),n("p",[t._v("有点奇怪的是，JavaScript 语言居然有"),n("strong",[t._v("两个")]),t._v('表示"无"的值：undefined 和 null。这是为什么？')]),t._v(" "),n("h2",{attrs:{id:"一、相似性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、相似性"}},[t._v("#")]),t._v(" 一、相似性")]),t._v(" "),n("p",[t._v("在 JavaScript 中，将一个变量赋值为 undefined 或 null，老实说，几乎没区别。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("上面代码中，a 变量分别被赋值为 undefined 和 null，这两种写法几乎等价。")]),t._v(" "),n("p",[t._v("undefined 和 null 在 if 语句中，都会被自动转为 false，相等运算符甚至直接报告两者相等。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"undefined is false"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined is false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"null is false"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null is false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("p",[t._v("上面代码说明，两者的行为是何等相似！")]),t._v(" "),n("p",[t._v("既然 undefined 和 null 的含义与用法都差不多，为什么要同时设置两个这样的值，这不是无端增加 JavaScript 的复杂度，令初学者困扰吗？Google 公司开发的 JavaScript 语言的替代品 Dart 语言，就明确规定只有 null，没有 undefined！")]),t._v(" "),n("h2",{attrs:{id:"二、历史原因"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、历史原因"}},[t._v("#")]),t._v(" 二、历史原因")]),t._v(" "),n("p",[t._v("最近，我在读新书"),n("a",{attrs:{href:"http://speakingjs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Speaking JavaScript》"),n("OutboundLink")],1),t._v("时，意外发现了这个问题的答案！")]),t._v(" "),n("p",[t._v('原来，这与 JavaScript 的历史有关。1995 年 JavaScript 诞生时，最初像 Java 一样，只设置了 null 作为表示"无"的值。')]),t._v(" "),n("p",[t._v("根据 C 语言的传统，null 被设计成可以自动转为 0。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])])]),n("p",[t._v("但是，JavaScript 的设计者 Brendan Eich，觉得这样做还不够，有两个原因。")]),t._v(" "),n("p",[t._v('首先，null 像在 Java 里一样，被当成一个对象。但是，JavaScript 的数据类型分成原始类型(primitive)和合成类型(complex)两大类，Brendan Eich 觉得表示"无"的值最好不是对象。')]),t._v(" "),n("p",[t._v("其次，JavaScript 的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。Brendan Eich 觉得，如果 null 自动转为 0，很不容易发现错误。")]),t._v(" "),n("p",[t._v("因此，Brendan Eich 又设计了一个 undefined。")]),t._v(" "),n("h2",{attrs:{id:"三、最初设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、最初设计"}},[t._v("#")]),t._v(" 三、最初设计")]),t._v(" "),n("p",[t._v("JavaScript 的最初版本是这样区分的："),n("strong",[t._v('null 是一个表示"无"的对象，转为数值时为 0；undefined 是一个表示"无"的原始值，转为数值时为 NaN。')])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),n("h2",{attrs:{id:"四、目前的用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、目前的用法"}},[t._v("#")]),t._v(" 四、目前的用法")]),t._v(" "),n("p",[t._v("但是，上面这样的区分，在实践中很快就被证明不可行。目前，null 和 undefined 基本是同义的，只有一些细微的差别。")]),t._v(" "),n("p",[t._v('**null 表示"没有对象"，即该处不应该有值。**典型用法是：')]),t._v(" "),n("p",[t._v("(1) 作为函数的参数，表示该函数的参数不是对象。")]),t._v(" "),n("p",[t._v("(2) 作为对象原型链的终点。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])])]),n("p",[t._v('**undefined 表示"缺少值"，就是此处应该有一个值，但是还没有定义。**典型用法是：')]),t._v(" "),n("p",[t._v("(1)变量被声明了，但没有赋值时，就等于 undefined。")]),t._v(" "),n("p",[t._v("(2) 调用函数时，应该提供的参数没有提供，该参数等于 undefined。")]),t._v(" "),n("p",[t._v("(3)对象没有赋值的属性，该属性的值为 undefined。")]),t._v(" "),n("p",[t._v("(4)函数没有返回值时，默认返回 undefined。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ni"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\no"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),n("h2",{attrs:{id:"typeof-原理探索"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typeof-原理探索"}},[t._v("#")]),t._v(" typeof 原理探索")]),t._v(" "),n("p",[t._v("javascript 中的 "),n("code",[t._v("null")]),t._v("：既是对象，又不是对象，史称「薛定谔的对象」。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("typeof null === 'object';\nnull instanceof Object === false\n")])])]),n("p",[t._v("而")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("null instanceof null\n")])])]),n("p",[t._v("会抛出异常：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Uncaught TypeError: Right-hand side of 'instanceof' is not an object\n")])])]),n("p",[t._v("这是一个历史遗留下来的 feature(or bug?)，"),n("a",{attrs:{href:"http://2ality.com/2013/10/typeof-null.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The history of “typeof null”"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("在 javascript 的最初版本中，使用的 32 位系统，为了性能考虑使用低位存储了变量的类型信息：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("000：对象")])]),t._v(" "),n("li",[t._v("1：整数")]),t._v(" "),n("li",[t._v("010：浮点数")]),t._v(" "),n("li",[t._v("100：字符串")]),t._v(" "),n("li",[t._v("110：布尔")])]),t._v(" "),n("p",[t._v("有 2 个值比较特殊：")]),t._v(" "),n("ul",[n("li",[t._v("undefined：用 - （−2^30）表示。")]),t._v(" "),n("li",[t._v("null：对应机器码的 NULL 指针，一般是全零。")])]),t._v(" "),n("p",[t._v("在第一版的 javascript 实现中，判断类型的代码是这么写的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("if (JSVAL_IS_VOID(v)) {  // (1)\n    type = JSTYPE_VOID;\n} else if (JSVAL_IS_OBJECT(v)) {  // (2)\n    obj = JSVAL_TO_OBJECT(v);\n    if (obj &&\n        (ops = obj->map->ops,\n            ops == &js_ObjectOps\n            ? (clasp = OBJ_GET_CLASS(cx, obj),\n            clasp->call || clasp == &js_FunctionClass) // (3,4)\n            : ops->call != 0)) {  // (3)\n        type = JSTYPE_FUNCTION;\n    } else {\n        type = JSTYPE_OBJECT;\n    }\n} else if (JSVAL_IS_NUMBER(v)) {\n    type = JSTYPE_NUMBER;\n} else if (JSVAL_IS_STRING(v)) {\n    type = JSTYPE_STRING;\n} else if (JSVAL_IS_BOOLEAN(v)) {\n    type = JSTYPE_BOOLEAN;\n}\n")])])]),n("p",[t._v("（1）：判断是否为 undefined\n（2）：如果不是 undefined，判断是否为对象\n（3）：如果不是对象，判断是否为数字\n（4）：。。。")]),t._v(" "),n("p",[t._v("这样一来，"),n("code",[t._v("null")]),t._v(" 就出了一个 bug。根据 type tags 信息，低位是 "),n("code",[t._v("000")]),t._v("，因此 "),n("code",[t._v("null")]),t._v(" 被判断成了一个对象。这就是为什么 "),n("code",[t._v("typeof null")]),t._v(" 的返回值是 "),n("code",[t._v("object")]),t._v("。")]),t._v(" "),n("p",[t._v("关于 "),n("code",[t._v("null")]),t._v(" 的类型在 MDN 文档中也有简单的描述："),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#null",target:"_blank",rel:"noopener noreferrer"}},[t._v("typeof - javascript | MDN"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("在 ES6 中曾有关于修复此 bug 的提议，提议中称应该让 "),n("code",[t._v("typeof null === 'null'")]),t._v(" "),n("a",{attrs:{href:"http://wiki.ecmascript.org/doku.php?id=harmony",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://wiki.ecmascript.org/do..."),n("OutboundLink")],1),t._v(":typeof_null 但是该提议被无情的否决了，自此 "),n("code",[t._v("typeof null")]),t._v(" 终于不再是一个 bug，而是一个 feature，并且永远不会被修复。")]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("这是 JavaScript 最初实现的一个 bug，目前的 JavaScript 引擎已经不这么去实现了，但是这个 bug 却一直流传了下来。")]),t._v(" "),n("p",[t._v("至于对象的内部表示，不同的 JavaScript 引擎实现起来都是不一样的，单说说 V8 吧。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.zhihu.com/question/62732293/answer/201723301",target:"_blank",rel:"noopener noreferrer"}},[t._v("v8引擎是如何知道js数据类型的？"),n("OutboundLink")],1),t._v(" （原文太长我就不贴过来了）")]),t._v(" "),n("h2",{attrs:{id:"void-0-代替-undefined"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#void-0-代替-undefined"}},[t._v("#")]),t._v(" void 0 代替 undefined")]),t._v(" "),n("p",[t._v('首先我们来看看underscore 源码没有出现 undefined（注意，其实有出现一处，是为 "undefined"，而不是 undefined），而用 void 0 代替之。为什么要这么做？我们可以从两部分解读，其一是 undefined 哪里不好了，你非得找个替代品？其二就是替代品为毛要找 void 0？')]),t._v(" "),n("p",[t._v("我们先看第一点，答案很简单，undefined 并不是保留词（reserved word），它只是全局对象的一个属性，在低版本 IE 中能被重写。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var undefined = 10;\n\n// undefined -- chrome\n// 10 -- IE 8\nalert(undefined);\n")])])]),n("p",[t._v("事实上，undefined 在 ES5 中已经是全局对象的一个只读（read-only）属性了，它不能被重写。但是在局部作用域中，还是可以被重写的。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("(function() {\n  var undefined = 10;\n\n  // 10 -- chrome\n  alert(undefined);\n})();\n\n(function() {\n  undefined = 10;\n\n  // undefined -- chrome\n  alert(undefined);\n})();\n")])])]),n("p",[t._v("接下来思考第二个问题，为毛找的替代品是 void 0？")]),t._v(" "),n("p",[t._v("我们来看看 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),n("OutboundLink")],1),t._v(" 的解释：")]),t._v(" "),n("blockquote",[n("p",[t._v("The void operator evaluates the given expression and then returns undefined.")])]),t._v(" "),n("p",[t._v('意思是说 void 运算符能对给定的表达式进行求值，然后返回 undefined。也就是说，void 后面你随便跟上一个表达式，返回的都是 undefined，都能完美代替 undefined！那么，这其中最短的是什么呢？毫无疑问就是 void 0 了。其实用 void 1，void (1+1)，void (0) 或者 void "hello"，void (new Date()) 等等，都是一样的效果。更重要的前提是，void 是不能被重写的（cannot be overidden）。')]),t._v(" "),n("p",[t._v("那么，ES5 大环境下，void 0 就没有用武之地了吗？答案是否定的，用 void 0 代替 undefined 能节省不少字节的大小，事实上，不少 JavaScript 压缩工具在压缩过程中，正是将 undefined 用 void 0 代替掉了。")])])}),[],!1,null,null,null);n.default=s.exports}}]);