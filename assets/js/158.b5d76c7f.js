(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{588:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"理解-crlf-lf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解-crlf-lf"}},[t._v("#")]),t._v(" 理解 CRLF，LF")]),t._v(" "),a("p",[t._v("CRLF, LF 是用来表示文本换行的方式。CR(Carriage Return) 代表回车，对应字符 "),a("code",[t._v("'\\r'")]),t._v("；LF(Line Feed) 代表换行，对应字符 "),a("code",[t._v("'\\n'")]),t._v("。由于历史原因，不同的操作系统文本使用的换行符各不相同。主流的操作系统一般使用CRLF或者LF作为其文本的换行符。其中，Windows 系统使用的是 CRLF,  Unix系统(包括Linux, MacOS近些年的版本) 使用的是LF。")]),t._v(" "),a("p",[t._v("系统间的这个差异给跨平台协作开发和跨平台运行带来很多不方便的地方。最近写的代码就遇到了这个问题。下面是一段按行读取配置文件的 Golang 代码，在读取一行字符之后，去掉开头结尾的换行符与空格。我是这样写的：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("fun "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InterpretQueryLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    str_line "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Trim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("本来在自己的 Ubuntu 系统上跑的很好，觉得没bug就提交了。然而，同事使用的是Windows系统，他编译之后怎么跑都不正常。由于我对 Golang 不熟悉，调试了很久才发现是换行符的问题。在Windows系统上换行符是CRLF, "),a("code",[t._v("\\r\\n")]),t._v("两个字符，只删除"),a("code",[t._v("\\n")]),t._v("是不够的。所以在读取文件的时候一定要小心跨平台。")]),t._v(" "),a("p",[t._v("除了上面的问题，我们平常受到换行符问题的困扰更多来自协作开发工具，比如Git。有时候我们只改了源码中的一行，但提交的时候发现整个文件都被修改了。有时候拉取最新的分支，明明改动不大，但是在与本地合并的时候整个文件都是冲突。这些问题不会导致严重的错误，但是会给开发带来非常大的不方便。")]),t._v(" "),a("p",[t._v("下面介绍两个 Git 中换行符相关的处理方式：")]),t._v(" "),a("p",[t._v("这里先指定两个非官方的概念，方便后面解释与描述："),a("strong",[t._v("(重要，否则后面看不懂)")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("标准化")]),t._v(" 指在提交代码到git数据库(本地库) 中将文本文件中的换行符CRLF转为LF的过程")]),t._v(" "),a("li",[a("strong",[t._v("转换")]),t._v("     指在检出Git数据库代码过程中将文本文件中的换行符LF转换为CRLF的过程")])]),t._v(" "),a("h4",{attrs:{id:"core-autocrlf-core-safecrlf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#core-autocrlf-core-safecrlf"}},[t._v("#")]),t._v(" core.autocrlf & core.safecrlf")]),t._v(" "),a("p",[t._v("Git 提供了一个名为 "),a("code",[t._v("core.autocrlf")]),t._v(" 的配置，可以自动完成标准化与转换。它的设置方式如下：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" core.autocrlf  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("true "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--local")]),t._v(" core.autocrlf  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("true "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 针对本项目设置")]),t._v("\n")])])]),a("ul",[a("li",[a("strong",[t._v("true")]),t._v(" 自动完成标准化与转换")]),t._v(" "),a("li",[a("strong",[t._v("input")]),t._v(" 只做标准化操作，不做转换操作")]),t._v(" "),a("li",[a("strong",[t._v("false")]),t._v(" 提交与检出的代码都保持文件原有的换行符不变")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("CRLF 与 LF 混合的文本文件不受此配置控制。")]),t._v(" "),a("li",[t._v("Git 安装后默认为 false")])])]),t._v(" "),a("p",[t._v("所以，一种规范换行符的方式是这样的：\n使用 Windows 系统的开发者设置：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" core.aurocrlf "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("p",[t._v("使用 Linux/MacOS 的开发者设置：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" core.autocrlf input\n")])])]),a("p",[t._v("由于没有一个绝对有效的算法来判断一个文件是否为文本，所以Git 提供了一项禁止/警告不可逆转换的配置来防止错误的标准化与转换。它主要是影响到多种换行符混合的文件，我们可以手动将其转换为同一种换行符：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" core.safecrlf "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("true "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" warn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ul",[a("li",[a("strong",[t._v("true")]),t._v(" 禁止提交混合换行符的文本文件("),a("code",[t._v("git add")]),t._v(" 的时候会被拦截，提示异常)")]),t._v(" "),a("li",[a("strong",[t._v("warn")]),t._v(" 提交混合换行符的文本文件的时候发出警告，但是不会阻止 "),a("code",[t._v("git add")]),t._v(" 操作")]),t._v(" "),a("li",[a("strong",[t._v("false")]),t._v(" 不禁止提交混合换行符的文本文件（默认配置）")])]),t._v(" "),a("h4",{attrs:{id:"gitattributes-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitattributes-文件"}},[t._v("#")]),t._v(" .gitattributes 文件")]),t._v(" "),a("p",[t._v("core.autocrlf 的配置依赖于每一位参与项目的开发机器上的配置，这很难确保每个人都能正确配置。于是在规范项目中的换行符方面，还有一套添加配置文件的方案。在项目的根目录下可以添加一个.gitattributes 文件。它的优先级高于core.autocrlf的设置，可以覆盖core.autocrlf的。它类似于 .gitignore 文件，随提交修改生效，一个项目中可以维持一份相同的配置。所以，它能够避免每个开发人员配置不同的问题。")]),t._v(" "),a("p",[t._v(".gitattributes文件的功能不只有配置换行符，所以它的配置相对复杂一下。详细的说明文档可以参考 "),a("a",{attrs:{href:"http://schacon.github.io/git/gitattributes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("地址"),a("OutboundLink")],1),t._v("。这里只针对换行符的配置做一下简单的介绍：")]),t._v(" "),a("p",[t._v("每行基本形式：")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("filter attr1 attr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("....")]),t._v("\n")])])]),a("p",[t._v("filter 代表匹配文件的通配符，在它后面跟着相应的属性，用空格间隔。")]),t._v(" "),a("p",[t._v("filter 的选项比较简单，常见的：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[t._v("* 匹配所有文件\n*.txt  匹配文件名以txt结尾的文件\n")])])]),a("p",[t._v("attr的选择比较多，其中与换行符相关的属性只有几条：")]),t._v(" "),a("ul",[a("li",[t._v("text\n"),a("ul",[a("li",[a("strong",[t._v("text")]),t._v(" 自动完成标准化与转换")]),t._v(" "),a("li",[a("strong",[t._v("-text")]),t._v(" 不执行标准化与转换")]),t._v(" "),a("li",[a("strong",[t._v("text=auto")]),t._v(" 根据 Git 决定是否需要执行标准化与转化")]),t._v(" "),a("li",[a("strong",[t._v("不设置")]),t._v(" 使用core.autocrlf配置决定是否执行标准化与转换")])])]),t._v(" "),a("li",[t._v("eol\n"),a("ul",[a("li",[a("strong",[t._v("eol=lf")]),t._v(" 强制完成标准化，不执行转换（相当于指定转换为LF格式）")]),t._v(" "),a("li",[a("strong",[t._v("eol=crlf")]),t._v(" 强制完成标准化，指定转换为CRLF格式")])])]),t._v(" "),a("li",[t._v("binary\n"),a("ul",[a("li",[a("strong",[t._v("binary")]),t._v(" 二进制文件不参与标准化与转换")]),t._v(" "),a("li",[a("strong",[t._v("不设置")]),t._v(" 由 Git 决定是否为二进制文件")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("text 设置的时候，转换自动转换到对应平台的换行符\n行号高的设置会覆盖行号低的设置")])]),t._v(" "),a("p",[t._v("这里给出一个简单的例子来说明一下：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("*         "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("auto\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# These files are text and should be normalized (convert crlf => lf)")]),t._v("\n*.cs      text\n*.xaml    text\n*.csproj  text\n*.sln     text\n*.tt      text\n*.ps1     text\n*.cmd     text\n*.msbuild text\n*.md      text\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Images should be treated as binary")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (binary is a macro for -text -diff)")]),t._v("\n*.png     binary\n*.jepg    binary\n\n*.sdf     binary\n")])])]),a("p",[t._v("除了下面匹配到的文件，剩下的依赖Git 决定是否参与标准化与转换。上面一段是参与标准化与转换的文件；下面一段是不参与标准化与转换的文件；")]),t._v(" "),a("p",[t._v("其实，在文件里只有下面这行配置的时候，就相当于根据操作系统自动填入 core.autocrlf 的设置。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v("\n")])])]),a("p",[t._v("所以，这里推荐使用.gitattributes来规范项目中换行符。简单，方便，灵活。")]),t._v(" "),a("p",[t._v("参考文章：")]),t._v(" "),a("ul",[a("li",[t._v("[1] "),a("a",{attrs:{href:"http://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mind the End of Your Line"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("[2] "),a("a",{attrs:{href:"http://schacon.github.io/git/gitattributes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitattributes(5) Manual Page"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=3ld8ip2y3rsw8")]),t._v(" "),a("p",[t._v("作者：于晓飞93\n链接：https://www.jianshu.com/p/ec9564fe1c2b\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])])}),[],!1,null,null,null);a.default=r.exports}}]);