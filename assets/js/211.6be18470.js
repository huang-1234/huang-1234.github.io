(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{646:function(e,t,r){"use strict";r.r(t);var o=r(2),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"go语言简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go语言简介"}},[e._v("#")]),e._v(" Go语言简介")]),e._v(" "),t("p",[e._v("Go语言（或 Golang）起源于 2007 年，并在 2009 年正式对外发布。Go 是非常年轻的一门语言，它的主要目标是“兼具 "),t("a",{attrs:{href:"http://c.biancheng.net/python/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python"),t("OutboundLink")],1),e._v(" 等动态语言的开发速度和 C/"),t("a",{attrs:{href:"http://c.biancheng.net/cplus/",target:"_blank",rel:"noopener noreferrer"}},[e._v("C++"),t("OutboundLink")],1),e._v(" 等编译型语言的性能与安全性”。")]),e._v(" "),t("p",[e._v("Go语言是编程语言设计的又一次尝试，是对类C语言的重大改进，它不但能让你访问底层操作系统，还提供了强大的网络编程和并发编程支持。Go语言的用途众多，可以进行网络编程、系统编程、并发编程、分布式编程。")]),e._v(" "),t("p",[e._v("Go语言的推出，旨在不损失应用程序性能的情况下降低代码的复杂性，具有“部署简单、并发性好、语言设计良好、执行性能好”等优势，目前国内诸多 IT 公司均已采用Go语言开发项目。")]),e._v(" "),t("p",[e._v("Go语言有时候被描述为“C 类似语言”，或者是“21 世纪的C语言”。Go 从C语言继承了相似的表达式语法、控制流结构、基础数据类型、调用参数传值、指针等很多思想，还有C语言一直所看中的编译后机器码的运行效率以及和现有操作系统的无缝适配。")]),e._v(" "),t("p",[e._v("因为Go语言没有类和继承的概念，所以它和 "),t("a",{attrs:{href:"http://c.biancheng.net/java/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java"),t("OutboundLink")],1),e._v(" 或 C++ 看起来并不相同。但是它通过接口（interface）的概念来实现多态性。Go语言有一个清晰易懂的轻量级类型系统，在类型之间也没有层级之说。因此可以说Go语言是一门混合型的语言。")]),e._v(" "),t("p",[e._v("此外，很多重要的开源项目都是使用Go语言开发的，其中包括 "),t("a",{attrs:{href:"http://c.biancheng.net/docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker"),t("OutboundLink")],1),e._v("、Go-Ethereum、Thrraform 和 Kubernetes。")]),e._v(" "),t("h2",{attrs:{id:"go语言创始人"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go语言创始人"}},[e._v("#")]),e._v(" Go语言创始人")]),e._v(" "),t("p",[e._v("对语言进行评估时，明白设计者的动机以及语言要解决的问题很重要。Go语言出自 Ken Thompson 和 Rob Pike、Robert Griesemer 之手，他们都是计算机科学领域的重量级人物。")]),e._v(" "),t("h4",{attrs:{id:"_1-ken-thompson"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-ken-thompson"}},[e._v("#")]),e._v(" 1) Ken Thompson")]),e._v(" "),t("p",[e._v("贝尔实验室 Unix 团队成员，C语言、Unix 和 Plan 9 的创始人之一，在 20 世纪 70 年代，设计并实现了最初的 UNIX 操作系统，仅从这一点说，他对计算机科学的贡献怎么强调都不过分。他还与 Rob Pike 合作设计了 UTF-8 编码方案。")]),e._v(" "),t("h4",{attrs:{id:"_2-rob-pike"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-rob-pike"}},[e._v("#")]),e._v(" 2) Rob Pike")]),e._v(" "),t("p",[e._v("Go语言项目总负责人，贝尔实验室 Unix 团队成员，除帮助设计 UTF-8 外，还帮助开发了分布式多用户操作系统 Plan 9、Inferno 操作系统和 Limbo 编程语言，并与人合著了《The Unix Programming Environment》，对 UNIX 的设计理念做了正统的阐述。")]),e._v(" "),t("h4",{attrs:{id:"_3-robert-griesemer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-robert-griesemer"}},[e._v("#")]),e._v(" 3) Robert Griesemer")]),e._v(" "),t("p",[e._v("就职于 Google，参与开发 Java HotSpot 虚拟机，对语言设计有深入的认识，并负责 Chrome 浏览器和 Node.js 使用的 Google V8 "),t("a",{attrs:{href:"http://c.biancheng.net/js/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript"),t("OutboundLink")],1),e._v(" 引擎的代码生成部分。")]),e._v(" "),t("p",[e._v("这些计算机科学领城的重量级人物设计Go语言的初衷是满足 Google 的需求。设计此语言花费了两年的时间，融入了整个团队多年的经验及对编程语言设计的深入认识。设计团队借鉴了 Pascal、Oberon 和C语言的设计智慧，同时让Go语言具备动态语言的便利性。因此，Go语言体现了经验丰富的计算机科学家的语言设计理念，是为全球最大的互联网公司之一设计的。")]),e._v(" "),t("p",[e._v("Go语言的所有设计者都说，设计Go语言是因为 C++ 给他们带来了挫败感。在 Google I/O 2012 的 Go 设计小组见面会上，Rob Pike 是这样说的：")]),e._v(" "),t("blockquote",[t("p",[e._v("我们做了大量的 C++ 开发，厌烦了等待编译完成，尽管这是玩笑，但在很大程度上来说也是事实。")])]),e._v(" "),t("h2",{attrs:{id:"go-是编译型语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go-是编译型语言"}},[e._v("#")]),e._v(" Go 是编译型语言")]),e._v(" "),t("p",[e._v("Go 使用编译器来编译代码。编译器将源代码编译成二进制（或字节码）格式；在编译代码时，编译器检查错误、优化性能并输出可在不同平台上运行的二进制文件。要创建并运行 Go 程序，程序员必须执行如下步骤。")]),e._v(" "),t("ol",[t("li",[e._v("使用文本编辑器创建 Go 程序；")]),e._v(" "),t("li",[e._v("保存文件；")]),e._v(" "),t("li",[e._v("编译程序；")]),e._v(" "),t("li",[e._v("运行编译得到的可执行文件。")])]),e._v(" "),t("p",[e._v("这不同于 Python、Ruby 和 JavaScript 等语言，它们不包含编译步骤。Go 自带了编译器，因此无须单独安装编译器。")]),e._v(" "),t("h2",{attrs:{id:"为什么要学习go语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习go语言"}},[e._v("#")]),e._v(" 为什么要学习Go语言")]),e._v(" "),t("p",[e._v("如果你要创建系统程序，或者基于网络的程序，Go语言是很不错的选择。作为一种相对较新的语言，它是由经验丰富且受人尊敬的计算机科学家设计的，旨在应对创建大型并发网络程序面临的挑战。")]),e._v(" "),t("p",[e._v("在Go语言出现之前，开发者们总是面临非常艰难的抉择，究竟是使用执行速度快但是编译速度并不理想的语言（如：C++），还是使用编译速度较快但执行效率不佳的语言（如：.NET、Java），或者说开发难度较低但执行速度一般的动态语言呢？显然，Go语言在这 3 个条件之间做到了最佳的平衡：快速编译，高效执行，易于开发。")]),e._v(" "),t("p",[e._v("Go语言支持交叉编译，比如说你可以在运行 Linux 系统的计算机上开发可以在 Windows 上运行的应用程序。这是第一门完全支持 UTF-8 的编程语言，这不仅体现在它可以处理使用 UTF-8 编码的字符串，就连它的源码文件格式都是使用的 UTF-8 编码。Go语言做到了真正的国际化！")]),e._v(" "),t("h2",{attrs:{id:"go语言吉祥物"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go语言吉祥物"}},[e._v("#")]),e._v(" Go语言吉祥物")]),e._v(" "),t("p",[e._v("Go语言有一个吉祥物，在会议、文档页面和博文中，大多会包含下图所示的 Go Gopher，这是才华横溢的插画家 Renee French 设计的，她也是 Go 设计者之一 Rob Pike 的妻子。")]),e._v(" "),t("p",[e._v("接下来从几个方面来具体介绍一下Go语言的特性。")]),e._v(" "),t("h2",{attrs:{id:"语法简单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法简单"}},[e._v("#")]),e._v(" 语法简单")]),e._v(" "),t("p",[e._v("抛开语法样式不谈，单就类型和规则而言，Go 与 C99、C11 相似之处颇多，这也是Go语言被冠以“NextC”名号的重要原因。")]),e._v(" "),t("p",[e._v("Go语言的语法处于简单和复杂的两极。C语言简单到你每写下一行代码，都能在脑中想象出编译后的模样，指令如何执行，内存如何分配，等等。而 C 的复杂在于，它有太多隐晦而不着边际的规则，着实让人头疼。相比较而言，Go 从零开始，没有历史包袱，在汲取众多经验教训后，可从头规划一个规则严谨、条理简单的世界。")]),e._v(" "),t("p",[e._v("Go语言的语法规则严谨，没有歧义，更没什么黑魔法变异用法。任何人写出的代码都基本一致，这使得Go语言简单易学。放弃部分“灵活”和“自由”，换来更好的维护性，我觉得是值得的。")]),e._v(" "),t("p",[e._v("将“++”、“--”从运算符降级为语句，保留指针，但默认阻止指针运算，带来的好处是显而易见的。还有，将切片和字典作为内置类型，从运行时的层面进行优化，这也算是一种“简单”。")]),e._v(" "),t("h2",{attrs:{id:"并发模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发模型"}},[e._v("#")]),e._v(" 并发模型")]),e._v(" "),t("p",[e._v("时至今日，并发编程已成为程序员的基本技能，在各个技术社区都能看到诸多与之相关的讨论主题。在这种情况下Go语言却一反常态做了件极大胆的事，从根本上将一切都并发化，运行时用 Goroutine 运行所有的一切，包括 main.main 入口函数。")]),e._v(" "),t("p",[e._v("可以说，Goroutine 是 Go 最显著的特征。它用类协程的方式来处理并发单元，却又在运行时层面做了更深度的优化处理。这使得语法上的并发编程变得极为容易，无须处理回调，无须关注线程切换，仅一个关键字，简单而自然。")]),e._v(" "),t("p",[e._v("搭配 channel，实现 CSP 模型。将并发单元间的数据耦合拆解开来，各司其职，这对所有纠结于内存共享、锁粒度的开发人员都是一个可期盼的解脱。若说有所不足，那就是应该有个更大的计划，将通信从进程内拓展到进程外，实现真正意义上的分布式。")]),e._v(" "),t("h2",{attrs:{id:"内存分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存分配"}},[e._v("#")]),e._v(" 内存分配")]),e._v(" "),t("p",[e._v("将一切并发化固然是好，但带来的问题同样很多。如何实现高并发下的内存分配和管理就是个难题。好在 Go 选择了 tcmalloc，它本就是为并发而设计的高性能内存分配组件。")]),e._v(" "),t("p",[e._v("可以说，内存分配器是运行时三大组件里变化最少的部分。刨去因配合垃圾回收器而修改的内容，内存分配器完整保留了 tcmalloc 的原始架构。使用 cache 为当前执行线程提供无锁分配，多个 central 在不同线程间平衡内存单元复用。在更高层次里，heap 则管理着大块内存，用以切分成不同等级的复用内存块。快速分配和二级内存平衡机制，让内存分配器能优秀地完成高压力下的内存管理任务。")]),e._v(" "),t("p",[e._v("在最近几个版本中，编译器优化卓有成效。它会竭力将对象分配在栈上，以降低垃圾回收压力，减少管理消耗，提升执行性能。可以说，除偶尔因性能问题而被迫采用对象池和自主内存管理外，我们基本无须参与内存管理操作。")]),e._v(" "),t("h2",{attrs:{id:"垃圾回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[e._v("#")]),e._v(" 垃圾回收")]),e._v(" "),t("p",[e._v("垃圾回收一直是个难题。早年间，"),t("a",{attrs:{href:"http://c.biancheng.net/java/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java"),t("OutboundLink")],1),e._v(" 就因垃圾回收低效被嘲笑了许久，后来 Sun 连续收纳了好多人和技术才发展到今天。可即便如此，在 Hadoop 等大内存应用场景下，垃圾回收依旧捉襟见肘、步履维艰。")]),e._v(" "),t("p",[e._v("相比 Java，Go 面临的困难要更多。因指针的存在，所以回收内存不能做收缩处理。幸好，指针运算被阻止，否则要做到精确回收都难。")]),e._v(" "),t("p",[e._v("每次升级，垃圾回收器必然是核心组件里修改最多的部分。从并发清理，到降低 STW 时间，直到 Go 的 1.5 版本实现并发标记，逐步引入三色标记和写屏障等等，都是为了能让垃圾回收在不影响用户逻辑的情况下更好地工作。尽管有了努力，当前版本的垃圾回收算法也只能说堪用，离好用尚有不少距离。")]),e._v(" "),t("h2",{attrs:{id:"静态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态链接"}},[e._v("#")]),e._v(" 静态链接")]),e._v(" "),t("p",[e._v("Go 刚发布时，静态链接被当作优点宣传。只须编译后的一个可执行文件，无须附加任何东西就能部署。这似乎很不错，只是后来风气变了。连着几个版本，编译器都在完善动态库 buildmode 功能，场面一时变得有些尴尬。")]),e._v(" "),t("p",[e._v("暂不说未完工的 buildmode 模式，静态编译的好处显而易见。将运行时、依赖库直接打包到可执行文件内部，简化了部署和发布操作，无须事先安装运行环境和下载诸多第三方库。这种简单方式对于编写系统软件有着极大好处，因为库依赖一直都是个麻烦。")]),e._v(" "),t("h2",{attrs:{id:"标准库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准库"}},[e._v("#")]),e._v(" 标准库")]),e._v(" "),t("p",[e._v("功能完善、质量可靠的标准库为编程语言提供了充足动力。在不借助第三方扩展的情况下，就可完成大部分基础功能开发，这大大降低了学习和使用成本。最关键的是，标准库有升级和修复保障，还能从运行时获得深层次优化的便利，这是第三方库所不具备的。")]),e._v(" "),t("p",[e._v("Go 标准库虽称不得完全覆盖，但也算极为丰富。其中值得称道的是 net/http，仅须简单几条语句就能实现一个高性能 Web Server，这从来都是宣传的亮点。更何况大批基于此的优秀第三方 Framework 更是将 Go 推到 Web/Microservice 开发标准之一的位置。")]),e._v(" "),t("p",[e._v("当然，优秀第三方资源也是语言生态圈的重要组成部分。近年来崛起的几门语言中，Go 算是独树一帜，大批优秀作品频繁涌现，这也给我们学习 Go 提供了很好的参照。")]),e._v(" "),t("h2",{attrs:{id:"工具链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工具链"}},[e._v("#")]),e._v(" 工具链")]),e._v(" "),t("p",[e._v("完整的工具链对于日常开发极为重要。Go 在此做得相当不错，无论是编译、格式化、错误检查、帮助文档，还是第三方包下载、更新都有对应的工具。其功能未必完善，但起码算得上简单易用。")]),e._v(" "),t("p",[e._v("内置完整测试框架，其中包括单元测试、性能测试、代码覆盖率、数据竞争，以及用来调优的 pprof，这些都是保障代码能正确而稳定运行的必备利器。")]),e._v(" "),t("p",[e._v("除此之外，还可通过环境变量输出运行时监控信息，尤其是垃圾回收和并发调度跟踪，可进一步帮助我们改进算法，获得更佳的运行期表现。")]),e._v(" "),t("p",[e._v("在早期 CPU 都是以单核的形式顺序执行机器指令。Go语言的祖先C语言正是这种顺序编程语言的代表。顺序编程语言中的顺序是指：所有的指令都是以串行的方式执行，在相同的时刻有且仅有一个 CPU 在顺序执行程序的指令。")]),e._v(" "),t("p",[e._v("随着处理器技术的发展，单核时代以提升处理器频率来提高运行效率的方式遇到了瓶颈，单核 CPU 发展的停滞，给多核 CPU 的发展带来了机遇。相应地，编程语言也开始逐步向并行化的方向发展。")]),e._v(" "),t("p",[e._v("虽然一些编程语言的框架在不断地提高多核资源使用效率，例如 "),t("a",{attrs:{href:"http://c.biancheng.net/java/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java"),t("OutboundLink")],1),e._v(" 的 Netty 等，但仍然需要开发人员花费大量的时间和精力搞懂这些框架的运行原理后才能熟练掌握。")]),e._v(" "),t("p",[e._v("作为程序员，要开发出能充分利用硬件资源的应用程序是一件很难的事情。现代计算机都拥有多个核，但是大部分编程语言都没有有效的工具让程序可以轻易利用这些资源。编程时需要写大量的线程同步代码来利用多个核，很容易导致错误。")]),e._v(" "),t("p",[e._v("Go语言正是在多核和网络化的时代背景下诞生的原生支持并发的编程语言。Go语言从底层原生支持并发，无须第三方库，开发人员可以很轻松地在编写程序时决定怎么使用 CPU 资源。")]),e._v(" "),t("p",[e._v("Go语言的并发是基于 goroutine 的，goroutine 类似于线程，但并非线程。可以将 goroutine 理解为一种虚拟线程。Go语言运行时会参与调度 goroutine，并将 goroutine 合理地分配到每个 CPU 中，最大限度地使用 CPU 性能。")]),e._v(" "),t("p",[e._v("多个 goroutine 中，Go语言使用通道（channel）进行通信，通道是一种内置的"),t("a",{attrs:{href:"http://c.biancheng.net/data_structure/",target:"_blank",rel:"noopener noreferrer"}},[e._v("数据结构"),t("OutboundLink")],1),e._v("，可以让用户在不同的 goroutine 之间同步发送具有类型的消息。这让编程模型更倾向于在 goroutine 之间发送消息，而不是让多个 goroutine 争夺同一个数据的使用权。")]),e._v(" "),t("p",[e._v("程序可以将需要并发的环节设计为生产者模式和消费者的模式，将数据放入通道。通道另外一端的代码将这些数据进行并发计算并返回结果")])])}),[],!1,null,null,null);t.default=a.exports}}]);