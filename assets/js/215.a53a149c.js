(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{649:function(a,t,s){"use strict";s.r(t);var n=s(2),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"go的变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go的变量"}},[a._v("#")]),a._v(" Go的变量")]),a._v(" "),t("h2",{attrs:{id:"golang中-var-与-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#golang中-var-与-的区别"}},[a._v("#")]),a._v(" golang中“var”与“:=”的区别")]),a._v(" "),t("p",[a._v("Go语言里面定义变量有多种方式。")]),a._v(" "),t("p",[a._v("使用var关键字是Go最基本的定义变量方式，有时也会使用到:=来定义变量。")]),a._v(" "),t("p",[a._v("定义变量")]),a._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// 定义一个名称为“variableName”，类型为"type"的变量')]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// var variableName type")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" number "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),a._v("\n")])])]),t("p",[a._v("定义变量并初始化值")]),a._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 初始化“variableName”的变量为“value”值，类型是“type”")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// var variableName type = value")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" number "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n")])])]),t("p",[a._v("同时初始化多个变量，又叫平行赋值")]),a._v(" "),t("p",[a._v('/*\n定义三个类型都是"type"的变量,并且分别初始化为相应的值\nvname1为v1，vname2为v2，vname3为v3\n*/')]),a._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// var vname1, vname2, vname3 type = v1, v2, v3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" number1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" number2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" number3 "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])])]),t("p",[a._v("你是不是觉得上面这样的定义有点繁琐？没关系，因为Go语言的设计者也发现了，有一种写法可以让它变得简单一点。我们可以直接忽略类型声明，那么上面的代码变成这样了：")]),a._v(" "),t("p",[a._v("/*\n定义三个变量，它们分别初始化为相应的值"),t("br"),a._v("\nvname1为v1，vname2为v2，vname3为v3"),t("br"),a._v("\n然后Go会根据其相应值的类型来帮你初始化它们\n*/")]),a._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// var vname1, vname2, vname3 = v1, v2, v3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" number1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" number2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" number3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])])]),t("p",[a._v("你觉得上面的还是有些繁琐？好吧，我也觉得。让我们继续简化：")]),a._v(" "),t("p",[a._v("/*\n定义三个变量，它们分别初始化为相应的值"),t("br"),a._v("\nvname1为v1，vname2为v2，vname3为v3"),t("br"),a._v("\n编译器会根据初始化的值自动推导出相应的类型*/")]),a._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// vname1, vname2, vname3 := v1, v2, v3")]),a._v("\nnumber1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" number2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" number3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])])]),t("p",[a._v("现在是不是看上去非常简洁了？:=这个符号直接取代了var和type,这种形式叫做简短声明。不过它有一个限制，那就是它只能用在函数内部；在函数外部使用则会无法编译通过，所以一般用var方式来定义全局变量。")]),a._v(" "),t("blockquote",[t("p",[a._v("换句话说，“:=”只能在声明“局部变量”的时候使用，而“var”没有这个限制。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);