(window.webpackJsonp=window.webpackJsonp||[]).push([[546],{978:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-简介和常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-简介和常用命令"}},[t._v("#")]),t._v(" git 简介和常用命令")]),t._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("h3",{attrs:{id:"什么是git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是git"}},[t._v("#")]),t._v(" 什么是git")]),t._v(" "),a("p",[t._v("Git(读音为/gɪt/),是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。\n　　Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ol",[a("li",[t._v("适合分布式开发，强调个体。")]),t._v(" "),a("li",[t._v("公共服务器压力和数据量都不会太大。")]),t._v(" "),a("li",[t._v("速度快、灵活。")]),t._v(" "),a("li",[t._v("任意两个开发者之间可以很容易的解决冲突。")]),t._v(" "),a("li",[t._v("离线工作。\n"),a("a",{attrs:{href:"https://www.progit.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("成为Git专家"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"上传项目到git的操作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传项目到git的操作流程"}},[t._v("#")]),t._v(" 上传项目到git的操作流程")]),t._v(" "),a("h4",{attrs:{id:"_1-本地安装git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-本地安装git"}},[t._v("#")]),t._v(" 1.本地安装Git")]),t._v(" "),a("p",[t._v("这个步骤网上教程很多")]),t._v(" "),a("p",[t._v("可参考：https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html")]),t._v(" "),a("h4",{attrs:{id:"_2-进入你想上传的项目文件夹下-然后右键点击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-进入你想上传的项目文件夹下-然后右键点击"}},[t._v("#")]),t._v(" 2.进入你想上传的项目文件夹下，然后右键点击")]),t._v(" "),a("p",[t._v("Git Bash Here")]),t._v(" "),a("h4",{attrs:{id:"_3-配置你的用户名及邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-配置你的用户名及邮箱"}},[t._v("#")]),t._v(" 3.配置你的用户名及邮箱")]),t._v(" "),a("p",[t._v('$ git config --global user.name "xxx"')]),t._v(" "),a("p",[t._v('$ git config --global user.email "xxx"')]),t._v(" "),a("h4",{attrs:{id:"_4-查看用户名及邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-查看用户名及邮箱"}},[t._v("#")]),t._v(" 4.查看用户名及邮箱")]),t._v(" "),a("p",[t._v("$ git config user.name")]),t._v(" "),a("p",[t._v("$ git config user.email")]),t._v(" "),a("h4",{attrs:{id:"_5-初始化本地环境-把该项目变成可被git管理的仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-初始化本地环境-把该项目变成可被git管理的仓库"}},[t._v("#")]),t._v(" 5.初始化本地环境，把该项目变成可被git管理的仓库")]),t._v(" "),a("p",[t._v("$ git init")]),t._v(" "),a("h4",{attrs:{id:"_6-添加该项目下的所有文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-添加该项目下的所有文件"}},[t._v("#")]),t._v(" 6.添加该项目下的所有文件")]),t._v(" "),a("p",[t._v("$git add .  （注意这里有个点）")]),t._v(" "),a("h4",{attrs:{id:"_7-使用如下命令将文件添加到仓库中去"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-使用如下命令将文件添加到仓库中去"}},[t._v("#")]),t._v(" 7.使用如下命令将文件添加到仓库中去")]),t._v(" "),a("p",[t._v("$ git commit -m '本次提交的说明'（说明信息为必填项，最好是信息有意义，便于后期理解）")]),t._v(" "),a("h4",{attrs:{id:"_8-在远程端创建一个仓库-此处省略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-在远程端创建一个仓库-此处省略"}},[t._v("#")]),t._v(" 8.在远程端创建一个仓库（此处省略）")]),t._v(" "),a("p",[t._v("具体怎么创建，很简单，自己摸索或者百度")]),t._v(" "),a("h4",{attrs:{id:"_9-将本地代码库与远程代码库相关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-将本地代码库与远程代码库相关联"}},[t._v("#")]),t._v(" 9.将本地代码库与远程代码库相关联")]),t._v(" "),a("p",[t._v("$ git remote add origin https://gitee.com/qlqaq/projects/仓库名称")]),t._v(" "),a("h4",{attrs:{id:"_10-强制把远程仓库的代码跟新到当前分支上面。ps-如果仓库为空这一步可以跳过"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-强制把远程仓库的代码跟新到当前分支上面。ps-如果仓库为空这一步可以跳过"}},[t._v("#")]),t._v(" 10.强制把远程仓库的代码跟新到当前分支上面。ps:如果仓库为空这一步可以跳过")]),t._v(" "),a("p",[t._v("$ git pull --rebase origin master")]),t._v(" "),a("h4",{attrs:{id:"_11-将本地代码推送到指定远程的仓库中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-将本地代码推送到指定远程的仓库中"}},[t._v("#")]),t._v(" 11.将本地代码推送到指定远程的仓库中")]),t._v(" "),a("p",[t._v("$ git push -u origin master")]),t._v(" "),a("p",[a("strong",[t._v("解决方法共两步")]),t._v("\n1、移除\ngit remote rm origin\n2、再次连接\ngit remote add origin ‘仓库地址’")]),t._v(" "),a("p",[t._v("输入“git remote -v”查看项目远程地址。")]),t._v(" "),a("p",[t._v("输入“git branch -a”查看远程项目所有分支，红颜色分支代表当前所在分支，其他的所列的就是所有分支了。")]),t._v(" "),a("p",[t._v("输入“git log”查看历史提交信息。")]),t._v(" "),a("p",[t._v("输入“git status”检查下修改了什么内容。")]),t._v(" "),a("p",[t._v("输入“git remote show origin”查看当前仓库基本信息。")]),t._v(" "),a("h2",{attrs:{id:"一些使用git时出现的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些使用git时出现的问题"}},[t._v("#")]),t._v(" 一些使用Git时出现的问题")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("echo "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"# MyvuePressBlog"')]),t._v(" >> README.md\ngit init\ngit add README.md\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first commit"')]),t._v("\ngit branch -M main\ngit remote add origin git@github.com:huang-1234/MyvuePressBlog.git\ngit push -u origin main\n")])])]),a("h3",{attrs:{id:"everything-up-to-date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#everything-up-to-date"}},[t._v("#")]),t._v(" Everything up-to-date")]),t._v(" "),a("p",[t._v("出现这个问题的原因是git提交改动到缓存，要push的时候不会将本地所有的分支都push掉，所以出现这个问题。我们应该告诉git提交哪个分支。\n这里有种特殊的情况是如果你是fork别人的仓库再clone到本地的话，即使git上只有一个主分支，他还是可能出现这个错误。那么我们就需要新建分支提交改动然后合并分支。")]),t._v(" "),a("p",[t._v("接下来先创建一个新分支提交改动")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git branch newbranch\n然后输入这条命令检查是否创建成功\n"),a("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch")]),t._v("\n这时输出\n newbranch\n master\n")])])]),a("p",[t._v("这样就创建成功了，前面的*代表的是当前你所在的工作分支。我们接下来就要切换工作分支。\n$ git checkout newbranch\n这样就切换完了，可以 $ git branch确认下。然后你要将你的改动提交到新的分支上。\n$ git add .\n$ git commit -a\n此时可以 $ git status检查下提交情况。如果提交成功，我们接下来就要回主分支了，代码和之前一样。\n$ git checkout master\n然后我们要将新分支提交的改动合并到主分支上\n$ git merge newbranch\n合并分支可能产生冲突这是正常的，虽然我们这是新建的分支不会产生冲突，但还是在这里记录下。下面的代码可以查看产生冲突的文件，然后做对应的修改再提交一次就可以了。\n$ git diff\n我们的问题就解决了，接下来就可以push代码了。\n$ git push -u origin master\n新建分支的朋友别忘了删除这个分支\n$ git branch -D newbranch\n如果想保留分支只是想删除已经合并的部分只要把大写的D改成小写的d就行了。")]),t._v(" "),a("h4",{attrs:{id:"or-create-a-new-repository-on-the-command-line"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#or-create-a-new-repository-on-the-command-line"}},[t._v("#")]),t._v(" …or create a new repository on the command line")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("echo "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"# MyvuePressBlog"')]),t._v(" >> README.md\ngit init\ngit add README.md\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first commit"')]),t._v("\ngit branch -M main\ngit remote add origin git@github.com:huang-1234/MyvuePressBlog.git\ngit push -u origin main\n")])])]),a("h3",{attrs:{id:"有图有真相"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有图有真相"}},[t._v("#")]),t._v(" 有图有真相")]),t._v(" "),a("p",[t._v("别害怕，了解git命令之前我们先来看张图吧！")]),t._v(" "),a("a",{attrs:{target:"_blank",href:"/images/Tools/Git/git-command.png"}},[a("img",{attrs:{src:t.$withBase("/images/Tools/Git/git-command.png"),draggable:"ture",alt:"git-command"}})]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ondragstart")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("window.event.returnValue=false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("oncontextmenu")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("window.event.returnValue=false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onselectstart")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("event.returnValue=false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h3",{attrs:{id:"下载安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载安装"}},[t._v("#")]),t._v(" 下载安装")]),t._v(" "),a("p",[t._v('从git官网下载安装包，安装完毕后就可以使用命令行的 git 工具，在开始菜单里找到"Git"->"Git Bash"，会弹出 Git 命令窗口，你可以在该窗口进行 Git 相关命令行的操作。')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("具体可参考https://www.runoob.com/git/git-install-setup.html\n")])])]),a("h3",{attrs:{id:"全局配置环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局配置环境"}},[t._v("#")]),t._v(" 全局配置环境")]),t._v(" "),a("p",[t._v("配置个人用户名和电子邮箱")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config –globle user.name “runoob”\ngit config –globle user.email text@runoob.com\n")])])]),a("p",[t._v("配置完毕后，可以通过$ git config –list命令查看所有的配置信息。 也可直接查询某个环境变量的信息。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config user.name\ngit config user.email\n")])])]),a("h3",{attrs:{id:"查看工作区状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看工作区状态"}},[t._v("#")]),t._v(" 查看工作区状态")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git status\n")])])]),a("ul",[a("li",[t._v("状态一：修改了没有添加到缓存区（红色），此时可以通过git diff 查看修改了的内容，“-”号是修改前，“+”号是修改后，第一个加号后修改的前一行。第二个加号是修改的内容。")]),t._v(" "),a("li",[t._v("状态二：修改了添加到缓存区（绿色）")]),t._v(" "),a("li",[t._v("状态三：On branch master nothing to commit, work tree clean 表明无修改内容")])]),t._v(" "),a("h3",{attrs:{id:"添加文件到git仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加文件到git仓库"}},[t._v("#")]),t._v(" 添加文件到git仓库")]),t._v(" "),a("p",[t._v("分两步： 把修改的修改添加到版本库里的暂存区，可以单独添加某个文件，可多次使用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git add <file>\n")])])]),a("p",[t._v("把暂存区的所有内容提交到当前分支，提交的说明一定要写（字符串加双引号）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git commit -m <message>\n")])])]),a("p",[t._v("将当前分支与远程仓库关联")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("git remote add origin\n")])])]),a("p",[t._v("删除与远程仓库的关联就比较简单了，直接输入以下命令：")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git remote rm github")]),t._v("\n")])])]),a("p",[a("strong",[t._v("注意：")]),t._v(" 以上"),a("strong",[t._v("github")]),t._v(" 是远程仓库在本地Git中的名称。就是上面的origin")]),t._v(" "),a("h3",{attrs:{id:"本地同步更新远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地同步更新远程分支"}},[t._v("#")]),t._v(" 本地同步更新远程分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git pull\n")])])]),a("p",[t._v("如果项目是多人合作的，那么就需要在拉去别人更新的代码合并到本地。Git会自动合并本地代码。")]),t._v(" "),a("h3",{attrs:{id:"把缓存中的代码推送到远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#把缓存中的代码推送到远程分支"}},[t._v("#")]),t._v(" 把缓存中的代码推送到远程分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push\n")])])]),a("h3",{attrs:{id:"撤销修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),a("ul",[a("li",[t._v("场景一：修改了文件但是未被add")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout -- <file>\n")])])]),a("ul",[a("li",[t._v("场景二：修改了工作区内容，还添加到了暂存区时，想丢弃修改，分两步")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset HEAD <file> 就回到了场景一\ngit checkout -- <file>\n")])])]),a("ul",[a("li",[t._v("场景三：修改文件已被commit,但是没有推送到远程库，想要撤销本次提交，只能切换版本")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset --hard HEAD^\n")])])]),a("h3",{attrs:{id:"从远程分支拉取项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从远程分支拉取项目"}},[t._v("#")]),t._v(" 从远程分支拉取项目")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone SSH/HTTPS地址 -b <分支名>\n")])])]),a("h3",{attrs:{id:"分支管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),a("p",[t._v("当前分支作业时")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1)查看分支：git branch\n2)创建分支：git branch <name>\n3)切换分支：git checkout <name>\n4)创建+切换分支：git checkout -b <name>\n5)合并某分支到当前分支：git merge <name>\n6)删除分支git branch -d <name>\n")])])]),a("p",[t._v("临时切换分支作业时")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1)暂存分支工作状态： git stash\n2)查看分支存储的工作状态： git stash list\n3)恢复分支工作状态： git stash apply\n4)删除分支存储的工作状态：git stash drop\n5)恢复并删除分支存储工作状态：git stash pop\n")])])]),a("p",[t._v("切换远程分支 ：当前分支branch1工作，现在需要在分支branch2上工作，则需要切换")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git fetch origin branch2(分支名)\ngit checkout branch2\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);